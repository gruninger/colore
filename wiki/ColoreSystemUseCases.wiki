#summary This page provides a listing of Use Cases for the COLORE System.
=== By Cameron Ross ====

= A work in progress!!! =

= Objectives =

The COLORE initiative has requirements related to both content development and software development.  The Uses Cases presented here describe COLORE's functional software requirements.  However, before delving into a detailed analysis of software requirements, it is important to understand the overall objectives of the project.  COLORE is intended to be an open repository of ontologies represented using Common Logic (CL).  The objectives of the COLORE project are:
 * to develop techniques for representing ontologies using CL,
 * to establish an open repository of CL-based ontologies,
 * to establish a testbed for integration and evaluation techniques,
 * to support the design and reuse of modular ontologies,
 * to promote ISO 24707 for constructing ontologies using FOL,
 * to develop best practices for ontological engineering using CL,
 * to construct infrastructure for collaborative ontology development,
 * to develop APIs and services for accessing CL-based repositories,
 * to support both web-based and non-web-based applications,
 * to enable proliferation and interoperation of CL-based repositories, and
 * to enable and promote an ecosystem of both open source and commercial developments focused on CL technology.

= Collaborative Ontology Development =

One of our primary objectives is to support the collaborative development of CL-based ontologies.  Therefore, the COLORE system shall provide the means for _Users_ to create their own projects and to manage and coordinate the development life cycle of these projects within an open and transparent environment.  Several existing systems support a similar model for open source software development and the COLORE feature set is partly derived from these systems (e.g. Google Code, !SourceForge, !GitHub etc.).  COLORE will provide the following features in support of collaborative ontology development:
 * a project Wiki for documenting the ontology,
 * a project email list to coordinate and archive project discussions,
 * a revision control system to manage project artifacts,
 * an issue tracking system to help resolve issues with project artifacts,
 * a administration console to help manage project _Users_ and settings, and 
 * a mechanism for publishing project artifacts (e.g. ontology source files)

Although the details of these features are to be determined, the salient aspect for our Use Case analysis is that COLORE content will be partitioned into projects and that each project will have the scope of an ontology.  We call these partitions _Ontology Projects_.

= Actors =

Users of the COLORE system fall into one of three general categories: _Administrators_, _Users_ and _Guests_.  _Administrators_ are authorized to perform all functions relating to both system management and content management.  The COLORE system can have one or more _Administrators_.  _Users_ are formally registered with the COLORE system and can create and contribute to _Ontology Projects_.  The COLORE system can have any number of _Users_.  _Guests_ are not registered with the COLORE system and are limited to read-only access of COLORE's public artifacts.

_Users_ fall into one of three sub-categories: _Owners_, _Committers_, and _Contributors_.  _Owners_ can make changes to an ontology project's artifacts and can manage the project's _User_ membership.  An ontology project can have one or more _Owners_.  _Committers_ can make changes to a project's artifacts, but cannot change a project's members list.  An ontology project can have zero or more _Committers_.  _Contributors_ have read-only access rights to a project's artifacts, but can participate in the discussion forums and wikis associated with the project.  The following list enumerates the COLORE actors:
 * _Administrator_
 * _Guest_
 * _User_
  * _Owner_
  * _Committer_
  * _Contributor_

= COLORE Use Cases =
The methodology used to analyze COLORE requirements is motivated by the concepts of Resource-Oriented Architecture, developed by [http://oreilly.com/catalog/9780596529260 Richardson & Ruby], and the ideas on Resource-Oriented Analysis & Design, developed by [http://www.manning.com/louvel Louvel & Boileau]. The format used to capture COLORE Use Cases is based on [http://www.amazon.com/Writing-Effective-Cases-Alistair-Cockburn/dp/0201702258 Alistar Cockburn's] approach.  

== Use Cases for Managing COLORE Users ==

 * [UC6646]: Add a new user to the system
 * [UC6203]: Retrieve a list of all users registered within the system
 * [UC4089]: Retrieve the metadata of a specified user
 * [UC1011]: Update the metadata of a specified user
 * [UC2261]: Remove a specified user from the system
 * [UC5983]: Add a new organization to the system
 * [UC6706]: Retrieve a list of all organizations registered within the system
 * [UC6533]: Retrieve the metadata of a specified organization
 * [UC8874]: Update the metadata of a specified organization
 * [UC9687]: Remove a specified organization from the system
 * [UC1194]: Associated a specified user with a specified organization

== Use Cases for Managing the COLORE Catalog ==

 * [UC9626]: Add a new category to the system
 * [UC7318]: Retrieve a list of all categories defined within the system
 * [UC8779]: Retrieve the metadata of a specified category
 * [UC4316]: Update the metadata of a specified category
 * [UC9493]: Remove a specified category from the system

== Use Cases for Managing Common Logic Content ==

 * [UC2505]: Add a new ontology to a specified category
 * [UC4764]: Retrieve a list of all ontologies within a specified category
 * [UC2798]: Retrieve the metadata of a specified ontology
 * [UC4169]: Update the metadata of a specified ontology
 * [UC5503]: Remove a specified ontology from the system
 * [UC9786]: Add a new CL text to the specified ontology
 * [UC3467]: Retrieve a listing of all CL texts within the repository
 * [UC5377]: Retrieve most recent version of a CL text from the repository
 * [UC8204]: Retrieve a specific version of a CL text from the repository
 * [UC3980]: Add a new version of a CL text within the repository
 * [UC7883]: Update an existing version of a CL text within the repository
 * [UC8388]: Delete all versions of a CL text from the repository
 * [UC9742]: Delete a specific version of a CL text from the repository
 * [UC2892]: Delete the most recent version of a CL text from the repository
 * [UC4135]: Retrieve a listing of all CL texts that reference a specified CL name