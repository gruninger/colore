============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 25509 was started by torsten on stl-ws2,
Fri Oct 21 16:35:10 2011
The command was "prover9 -t 600 -f dim/definitions/input/dim_defs.p9 dim/conversions/dim_basic.p9 dim/definitions/input/min_max_dim.p9 dim/definitions/input/dim_covers.p9 dim/theorems/input/options.txt dim/theorems/generated/dim_eqdimpossible_theorems_relevance1.order dim/theorems/input/dim_eqdimpossible_theorems_5.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file dim/definitions/input/dim_defs.p9


formulas(sos).
(all x all y (x > y <-> y < x)).
(all x all y (x >= y <-> y <= x)).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x all y (EqDimPossible(x,y) <-> -(x < y) & -(y < x))).
end_of_list.

% Reading from file dim/conversions/dim_basic.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y < z -> x < z)).
(all x EqDim(x,x)).
(all x all y (EqDim(x,y) -> EqDim(y,x))).
(all x all y all z (EqDim(x,y) & EqDim(y,z) -> EqDim(x,z))).
(all x all y (x < y -> -EqDim(x,y))).
(all x all y all z (EqDim(x,y) -> (z < x -> z < y))).
(all x all y all z (EqDim(x,y) -> (x < z -> y < z))).
(exists x (-ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
end_of_list.

% Reading from file dim/definitions/input/min_max_dim.p9


formulas(sos).
(all x (MaxDim(x) <-> (all y -(x < y)))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
end_of_list.

% Reading from file dim/definitions/input/dim_covers.p9


formulas(sos).
(all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))).
end_of_list.

% Reading from file dim/theorems/input/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file dim/theorems/generated/dim_eqdimpossible_theorems_relevance1.order

predicate_order([=,ZEX,EqDimPossible,EqDim,<]).
set(inverse_order).
assign(order,kbo).

% Reading from file dim/theorems/input/dim_eqdimpossible_theorems_5.p9


formulas(goals).
(all x all y all z (x < y & EqDimPossible(x,z) -> -EqDim(x,z) | -EqDim(y,z))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (x > y <-> y < x)) # label(non_clause).  [assumption].
2 (all x all y (x >= y <-> y <= x)) # label(non_clause).  [assumption].
3 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
4 (all x all y (EqDimPossible(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
5 (all x -(x < x)) # label(non_clause).  [assumption].
6 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
7 (all x all y all z (x < y & y < z -> x < z)) # label(non_clause).  [assumption].
8 (all x EqDim(x,x)) # label(non_clause).  [assumption].
9 (all x all y (EqDim(x,y) -> EqDim(y,x))) # label(non_clause).  [assumption].
10 (all x all y all z (EqDim(x,y) & EqDim(y,z) -> EqDim(x,z))) # label(non_clause).  [assumption].
11 (all x all y (x < y -> -EqDim(x,y))) # label(non_clause).  [assumption].
12 (all x all y all z (EqDim(x,y) -> (z < x -> z < y))) # label(non_clause).  [assumption].
13 (all x all y all z (EqDim(x,y) -> (x < z -> y < z))) # label(non_clause).  [assumption].
14 (exists x (-ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
15 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
16 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
17 (all x (MaxDim(x) <-> (all y -(x < y)))) # label(non_clause).  [assumption].
18 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
19 (all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))) # label(non_clause).  [assumption].
20 (all x all y all z (x < y & EqDimPossible(x,z) -> -EqDim(x,z) | -EqDim(y,z))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating >/2
21 x > y | -(y < x).  [clausify(1)].
22 -(x > y) | y < x.  [clausify(1)].

Eliminating >=/2
23 x >= y | -(y <= x).  [clausify(2)].
24 -(x >= y) | y <= x.  [clausify(2)].

Eliminating <=/2
25 x <= y | -(x < y).  [clausify(3)].
26 -(x <= y) | x < y | EqDim(x,y).  [clausify(3)].
27 x <= y | -EqDim(x,y).  [clausify(3)].

Eliminating EqDimPossible/2
28 EqDimPossible(x,y) | x < y | y < x.  [clausify(4)].
29 -EqDimPossible(x,y) | -(x < y).  [clausify(4)].
30 -EqDimPossible(x,y) | -(y < x).  [clausify(4)].
31 EqDimPossible(c2,c4).  [deny(20)].
Derived: -(c2 < c4).  [resolve(31,a,29,a)].
Derived: -(c4 < c2).  [resolve(31,a,30,a)].

Eliminating MaxDim/1
32 MaxDim(x) | x < f1(x).  [clausify(17)].
33 -MaxDim(x) | -(x < y).  [clausify(17)].
Derived: x < f1(x) | -(x < y).  [resolve(32,a,33,a)].

Eliminating MinDim/1
34 MinDim(x) | ZEX(x) | f2(x) < x.  [clausify(18)].
35 -MinDim(x) | -ZEX(x).  [clausify(18)].
36 -MinDim(x) | -(y < x) | ZEX(y).  [clausify(18)].
Derived: ZEX(x) | f2(x) < x | -(y < x) | ZEX(y).  [resolve(34,a,36,a)].
37 MinDim(x) | ZEX(x) | -ZEX(f2(x)).  [clausify(18)].
Derived: ZEX(x) | -ZEX(f2(x)) | -(y < x) | ZEX(y).  [resolve(37,a,36,a)].

Eliminating Covers/2
38 Covers(x,y) | -(y < x) | y < f3(x,y).  [clausify(19)].
39 -Covers(x,y) | y < x.  [clausify(19)].
40 -Covers(x,y) | -(y < z) | -(z < x).  [clausify(19)].
Derived: -(x < y) | x < f3(y,x) | -(x < z) | -(z < y).  [resolve(38,a,40,a)].
41 Covers(x,y) | -(y < x) | f3(x,y) < x.  [clausify(19)].
Derived: -(x < y) | f3(y,x) < y | -(x < z) | -(z < y).  [resolve(41,a,40,a)].

============================== end predicate elimination =============

Term ordering decisions:
Function symbol KB weights:  c1=1. c2=1. c3=1. c4=1. f3=1. f1=1. f2=1.
Predicate symbol precedence:  predicate_order([ =, ZEX, EqDim, < ]).
Function symbol precedence:  function_order([ c1, c2, c3, c4, f3, f1, f2 ]).
Skipping inverse_order, because term ordering is KBO.
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.02 seconds.

============================== PROOF =================================

% Proof 1 at 0.02 (+ 0.00) seconds.
% Length of proof is 10.
% Level of proof is 3.
% Maximum clause weight is 9.000.
% Given clauses 17.

4 (all x all y (EqDimPossible(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
12 (all x all y all z (EqDim(x,y) -> (z < x -> z < y))) # label(non_clause).  [assumption].
20 (all x all y all z (x < y & EqDimPossible(x,z) -> -EqDim(x,z) | -EqDim(y,z))) # label(non_clause) # label(goal).  [goal].
29 -EqDimPossible(x,y) | -(x < y).  [clausify(4)].
31 EqDimPossible(c2,c4).  [deny(20)].
49 -EqDim(x,y) | -(z < x) | z < y.  [clausify(12)].
55 c2 < c3.  [deny(20)].
57 EqDim(c3,c4).  [deny(20)].
58 -(c2 < c4).  [resolve(31,a,29,a)].
80 $F.  [ur(49,b,55,a,c,58,a),unit_del(a,57)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=17. Generated=71. Kept=38. proofs=1.
Usable=17. Sos=21. Demods=0. Limbo=0, Disabled=44. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=32. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=14. Nonunit_bsub_feature_tests=48.
Megabytes=0.13.
User_CPU=0.02, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 25509 exit (max_proofs) Fri Oct 21 16:35:10 2011
