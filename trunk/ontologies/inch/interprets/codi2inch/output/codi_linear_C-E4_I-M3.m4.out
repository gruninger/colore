============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 22247 was started by torsten on stl-ws2,
Mon May 28 17:06:37 2012
The command was "mace4 -c -t 600 -s 60 -n 2 -N 20 -f inch/theorems/input/codi_linear_C-E4_I-M3.p9 codi/conversions/codi_linear_nodefs.p9 codi/conversions/C-E4.p9 zex/input/zex.p9 inch/mappings/conversions/codi2inch.p9 inch/definitions/input/inch_ged.p9 inch/definitions/input/inch_I-M2.p9 cont/conversions/cont_basic.p9 codi/definitions/input/ep.p9 inch/definitions/input/inch_zex.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file inch/theorems/input/codi_linear_C-E4_I-M3.p9


formulas(sos).
(all x all y (GED(y,x) -> x <= y)).
(all x all y (x <= y -> GED(y,x))).
end_of_list.

% Reading from file codi/conversions/codi_linear_nodefs.p9


formulas(sos).
(all x all y (Cont(x,y) -> x < y | EqDim(x,y))).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y <= z -> x < z)).
(all x all y all z (x <= y & y <= z -> x <= z)).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
(exists x MinDim(x)).
(all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
end_of_list.

% Reading from file codi/conversions/C-E4.p9


formulas(sos).
(all x all y (x <= y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))).
(all x all y (x < y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))).
(all x all y (EqDim(x,y) -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))).
end_of_list.

% Reading from file zex/input/zex.p9


formulas(sos).
(exists x ZEX(x)).
end_of_list.

% Reading from file inch/mappings/conversions/codi2inch.p9


formulas(sos).
(all x all y (INCH(x,y) <-> (exists z (Cont(z,x) & Cont(z,y) & EqDim(z,y))))).
end_of_list.

% Reading from file inch/definitions/input/inch_ged.p9


formulas(sos).
(all x all y (GED(x,y) <-> ZEXI(y) | (exists z (INCH(x,z) & INCH(z,y))))).
end_of_list.

% Reading from file inch/definitions/input/inch_I-M2.p9


formulas(sos).
(all x (ZEX(x) <-> ZEXI(x))).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file inch/definitions/input/inch_zex.p9


formulas(sos).
(all x all y (ZEXI(x) <-> -INCH(x,x))).
end_of_list.

% From the command line: assign(max_seconds, 600).

% From the command line: assign(max_seconds_per, 60).
    % assign(domain_size, 2) -> assign(start_size, 2).
    % assign(domain_size, 2) -> assign(end_size, 2).

% From the command line: assign(domain_size, 2).

% From the command line: assign(end_size, 20).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (GED(y,x) -> x <= y)) # label(non_clause).  [assumption].
2 (all x all y (x <= y -> GED(y,x))) # label(non_clause).  [assumption].
3 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
4 (all x -(x < x)) # label(non_clause).  [assumption].
5 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
6 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
7 (all x all y all z (x <= y & y <= z -> x <= z)) # label(non_clause).  [assumption].
8 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
9 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
10 (exists x MinDim(x)) # label(non_clause).  [assumption].
11 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
12 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
13 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
14 (all x all y (x <= y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))) # label(non_clause).  [assumption].
15 (all x all y (x < y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))) # label(non_clause).  [assumption].
16 (all x all y (EqDim(x,y) -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))) # label(non_clause).  [assumption].
17 (exists x ZEX(x)) # label(non_clause).  [assumption].
18 (all x all y (INCH(x,y) <-> (exists z (Cont(z,x) & Cont(z,y) & EqDim(z,y))))) # label(non_clause).  [assumption].
19 (all x all y (GED(x,y) <-> ZEXI(y) | (exists z (INCH(x,z) & INCH(z,y))))) # label(non_clause).  [assumption].
20 (all x (ZEX(x) <-> ZEXI(x))) # label(non_clause).  [assumption].
21 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
22 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
23 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
24 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
25 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
26 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
27 (all x all y (ZEXI(x) <-> -INCH(x,x))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-GED(x,y) | y <= x.
-(x <= y) | GED(y,x).
-Cont(x,y) | x < y | EqDim(x,y).
-(x < x).
-(x < y) | -(y < x).
-(x < y) | -(y <= z) | x < z.
-(x <= y) | -(y <= z) | x <= z.
-ZEX(x) | -ZEX(y) | y = x.
-ZEX(x) | ZEX(y) | x < y.
MinDim(c1).
-EqDim(x,y) | -(x < y).
-EqDim(x,y) | -(y < x).
EqDim(x,y) | x < y | y < x.
-(x <= y) | x < y | EqDim(x,y).
x <= y | -(x < y).
x <= y | -EqDim(x,y).
-MinDim(x) | -ZEX(x).
-MinDim(x) | -(y < x) | ZEX(y).
MinDim(x) | ZEX(x) | f1(x) < x.
MinDim(x) | ZEX(x) | -ZEX(f1(x)).
-(x <= y) | ZEX(x) | P(f3(x,y),x).
-(x <= y) | ZEX(x) | Cont(f3(x,y),f2(x,y)).
-(x <= y) | ZEX(x) | P(f4(x,y),f2(x,y)).
-(x <= y) | ZEX(x) | Cont(f4(x,y),y).
-(x < y) | ZEX(x) | P(f6(x,y),x).
-(x < y) | ZEX(x) | Cont(f6(x,y),f5(x,y)).
-(x < y) | ZEX(x) | P(f7(x,y),f5(x,y)).
-(x < y) | ZEX(x) | Cont(f7(x,y),y).
-EqDim(x,y) | ZEX(x) | P(f9(x,y),x).
-EqDim(x,y) | ZEX(x) | Cont(f9(x,y),f8(x,y)).
-EqDim(x,y) | ZEX(x) | P(f10(x,y),f8(x,y)).
-EqDim(x,y) | ZEX(x) | Cont(f10(x,y),y).
ZEX(c2).
-INCH(x,y) | Cont(f11(x,y),x).
-INCH(x,y) | Cont(f11(x,y),y).
-INCH(x,y) | EqDim(f11(x,y),y).
INCH(x,y) | -Cont(z,x) | -Cont(z,y) | -EqDim(z,y).
-GED(x,y) | ZEXI(y) | INCH(x,f12(x,y)).
-GED(x,y) | ZEXI(y) | INCH(f12(x,y),y).
GED(x,y) | -ZEXI(y).
GED(x,y) | -INCH(x,z) | -INCH(z,y).
-ZEX(x) | ZEXI(x).
ZEX(x) | -ZEXI(x).
ZEX(x) | Cont(x,x).
-ZEX(x) | -Cont(x,x).
-Cont(x,y) | -Cont(y,x) | y = x.
-Cont(x,y) | -Cont(y,z) | Cont(x,z).
-ZEX(x) | -Cont(y,x).
-ZEX(x) | -Cont(x,y).
-ZEX(x) | -ZEX(y) | y = x.
-P(x,y) | Cont(x,y).
-P(x,y) | EqDim(x,y).
P(x,y) | -Cont(x,y) | -EqDim(x,y).
-ZEXI(x) | -INCH(x,x).
ZEXI(x) | INCH(x,x).
end_of_list.

============================== end of clauses for search =============

% There are no natural numbers in the input.

============================== DOMAIN SIZE 2 =========================

============================== MODEL =================================

interpretation( 2, [number=1, seconds=0], [

        function(c1, [ 0 ]),

        function(c2, [ 1 ]),

        function(f1(_), [ 0, 0 ]),

        function(f2(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f3(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f4(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f5(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f6(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f7(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f8(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f9(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f10(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f11(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f12(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(MinDim(_), [ 1, 0 ]),

        relation(ZEX(_), [ 0, 1 ]),

        relation(ZEXI(_), [ 0, 1 ]),

        relation(<(_,_), [
			   0, 0,
			   1, 0 ]),

        relation(<=(_,_), [
			   1, 0,
			   1, 1 ]),

        relation(Cont(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(EqDim(_,_), [
			   1, 0,
			   0, 1 ]),

        relation(GED(_,_), [
			   1, 1,
			   0, 1 ]),

        relation(INCH(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(P(_,_), [
			   1, 0,
			   0, 0 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=214, kept=176.
Selections=39, assignments=39, propagations=43, current_models=1.
Rewrite_terms=86, rewrite_bools=261, indexes=3.
Rules_from_neg_clauses=9, cross_offs=9.

============================== end of statistics =====================

User_CPU=0.01, System_CPU=0.00, Wall_clock=0.

Exiting with 1 model.

Process 22247 exit (max_models) Mon May 28 17:06:37 2012
The process finished Mon May 28 17:06:37 2012
