============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 24035 was started by torsten on stl-ws2,
Mon May 28 18:10:55 2012
The command was "prover9 -t 600 -f codi/conversions/codi_down_nodefs.p9 codi/conversions/C-E4.p9 zex/input/zex.p9 codi/definitions/input/ep.p9 inch/mappings/conversions/codi2inch.p9 inch/definitions/input/inch_I-M2.p9 inch/definitions/input/inch_I-M3.p9 inch/definitions/input/inch_I-M6.p9 codi/conversions/codi_linear_nodefs.p9 codi/definitions/input/epp.p9 codi/definitions/input/po.p9 cont/conversions/cont_basic.p9 inch/theorems/input/options.txt inch/theorems/input/codi_down_C-E4_I-M8_1.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file codi/conversions/codi_down_nodefs.p9


formulas(sos).
(all x all y (-C(x,y) -> ZEX(intersection(x,y)))).
(all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))).
(all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))).
(all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))).
(all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))).
(all x all y (y < x -> x = difference(x,y))).
(all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))).
(all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))).
(all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)).
(all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))).
(all x all y (PP(x,y) -> (exists z (P(z,y) & -PO(z,x))))).
(all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & EqDim(x,y) & PO(x,y) & -PP(y,x) -> (exists z (P(z,y) & -PO(z,x))))).
(all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & EqDim(x,y) & -PO(x,y) -> (exists z (P(z,y) & -PO(z,x))))).
(all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & -EqDim(x,y) -> (exists z (P(z,y) & -PO(z,x))))).
(all x all y ((all z (PO(z,x) <-> PO(z,y))) -> x = y)).
(all x all y (PO(x,y) <-> INCH(x,y) & INCH(y,x))).
(all x all y (CH(x,y) <-> INCH(x,y) & (all z (PO(x,z) -> PO(y,z))))).
end_of_list.

% Reading from file codi/conversions/C-E4.p9


formulas(sos).
(all x all y (x <= y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))).
(all x all y (x < y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))).
(all x all y (EqDim(x,y) -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))).
end_of_list.

% Reading from file zex/input/zex.p9


formulas(sos).
(exists x ZEX(x)).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file inch/mappings/conversions/codi2inch.p9


formulas(sos).
(all x all y (INCH(x,y) <-> (exists z (Cont(z,x) & Cont(z,y) & EqDim(z,y))))).
end_of_list.

% Reading from file inch/definitions/input/inch_I-M2.p9


formulas(sos).
(all x (ZEX(x) <-> ZEXI(x))).
end_of_list.

% Reading from file inch/definitions/input/inch_I-M3.p9


formulas(sos).
(all x all y (GED(y,x) <-> x <= y)).
end_of_list.

% Reading from file inch/definitions/input/inch_I-M6.p9


formulas(sos).
(all x all y (PO(x,y) <-> OV(x,y))).
(all x all y (PO(x,y) <-> INCH(x,y) & INCH(y,x))).
end_of_list.

% Reading from file codi/conversions/codi_linear_nodefs.p9


formulas(sos).
(all x all y (Cont(x,y) -> x < y | EqDim(x,y))).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y <= z -> x < z)).
(all x all y all z (x <= y & y <= z -> x <= z)).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
(exists x MinDim(x)).
(all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
end_of_list.

% Reading from file codi/definitions/input/epp.p9


formulas(sos).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
end_of_list.

% Reading from file codi/definitions/input/po.p9


formulas(sos).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
end_of_list.

% Reading from file inch/theorems/input/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file inch/theorems/input/codi_down_C-E4_I-M8_1.p9


formulas(goals).
(all x all y (P(x,y) -> CH(x,y))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (-C(x,y) -> ZEX(intersection(x,y)))) # label(non_clause).  [assumption].
2 (all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
3 (all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))) # label(non_clause).  [assumption].
4 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
5 (all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
6 (all x all y (y < x -> x = difference(x,y))) # label(non_clause).  [assumption].
7 (all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))) # label(non_clause).  [assumption].
8 (all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
9 (all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)) # label(non_clause).  [assumption].
10 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
11 (all x all y (PP(x,y) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause).  [assumption].
12 (all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & EqDim(x,y) & PO(x,y) & -PP(y,x) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause).  [assumption].
13 (all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & EqDim(x,y) & -PO(x,y) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause).  [assumption].
14 (all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & -EqDim(x,y) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause).  [assumption].
15 (all x all y ((all z (PO(z,x) <-> PO(z,y))) -> x = y)) # label(non_clause).  [assumption].
16 (all x all y (PO(x,y) <-> INCH(x,y) & INCH(y,x))) # label(non_clause).  [assumption].
17 (all x all y (CH(x,y) <-> INCH(x,y) & (all z (PO(x,z) -> PO(y,z))))) # label(non_clause).  [assumption].
18 (all x all y (x <= y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))) # label(non_clause).  [assumption].
19 (all x all y (x < y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))) # label(non_clause).  [assumption].
20 (all x all y (EqDim(x,y) -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))) # label(non_clause).  [assumption].
21 (exists x ZEX(x)) # label(non_clause).  [assumption].
22 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
23 (all x all y (INCH(x,y) <-> (exists z (Cont(z,x) & Cont(z,y) & EqDim(z,y))))) # label(non_clause).  [assumption].
24 (all x (ZEX(x) <-> ZEXI(x))) # label(non_clause).  [assumption].
25 (all x all y (GED(y,x) <-> x <= y)) # label(non_clause).  [assumption].
26 (all x all y (PO(x,y) <-> OV(x,y))) # label(non_clause).  [assumption].
27 (all x all y (PO(x,y) <-> INCH(x,y) & INCH(y,x))) # label(non_clause).  [assumption].
28 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
29 (all x -(x < x)) # label(non_clause).  [assumption].
30 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
31 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
32 (all x all y all z (x <= y & y <= z -> x <= z)) # label(non_clause).  [assumption].
33 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
34 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
35 (exists x MinDim(x)) # label(non_clause).  [assumption].
36 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
37 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
38 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
39 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
40 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
41 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
42 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
43 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
44 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
45 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
46 (all x all y (P(x,y) -> CH(x,y))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating C/2

Eliminating PP/2
47 ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | PP(y,x) | P(f2(x,y),y).  [clausify(12)].
48 -PP(x,y) | P(f1(x,y),y).  [clausify(11)].
49 -PP(x,y) | -PO(f1(x,y),x).  [clausify(11)].
Derived: ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | P(f2(x,y),y) | P(f1(y,x),x).  [resolve(47,f,48,a)].
Derived: ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | P(f2(x,y),y) | -PO(f1(y,x),y).  [resolve(47,f,49,a)].
50 ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | PP(y,x) | -PO(f2(x,y),x).  [clausify(12)].
Derived: ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | -PO(f2(x,y),x) | P(f1(y,x),x).  [resolve(50,f,48,a)].
Derived: ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | -PO(f2(x,y),x) | -PO(f1(y,x),y).  [resolve(50,f,49,a)].
51 -PP(x,y) | P(x,y).  [clausify(39)].
Derived: P(x,y) | ZEX(y) | ZEX(x) | P(x,y) | -EqDim(y,x) | -PO(y,x) | P(f2(y,x),x).  [resolve(51,a,47,f)].
Derived: P(x,y) | ZEX(y) | ZEX(x) | P(x,y) | -EqDim(y,x) | -PO(y,x) | -PO(f2(y,x),y).  [resolve(51,a,50,f)].
52 -PP(x,y) | y != x.  [clausify(39)].
53 PP(x,y) | -P(x,y) | y = x.  [clausify(39)].
Derived: -P(x,y) | y = x | P(f1(x,y),y).  [resolve(53,a,48,a)].
Derived: -P(x,y) | y = x | -PO(f1(x,y),x).  [resolve(53,a,49,a)].

Eliminating ZEXI/1
54 ZEX(x) | -ZEXI(x).  [clausify(24)].
55 -ZEX(x) | ZEXI(x).  [clausify(24)].

Eliminating GED/2
56 GED(x,y) | -(y <= x).  [clausify(25)].
57 -GED(x,y) | y <= x.  [clausify(25)].

Eliminating OV/2
58 PO(x,y) | -OV(x,y).  [clausify(26)].
59 -PO(x,y) | OV(x,y).  [clausify(26)].

Eliminating MinDim/1
60 -MinDim(x) | -ZEX(x).  [clausify(38)].
61 MinDim(c2).  [clausify(35)].
Derived: -ZEX(c2).  [resolve(60,a,61,a)].
62 -MinDim(x) | -(y < x) | ZEX(y).  [clausify(38)].
Derived: -(x < c2) | ZEX(x).  [resolve(62,a,61,a)].
63 MinDim(x) | ZEX(x) | f17(x) < x.  [clausify(38)].
Derived: ZEX(x) | f17(x) < x | -(y < x) | ZEX(y).  [resolve(63,a,62,a)].
64 MinDim(x) | ZEX(x) | -ZEX(f17(x)).  [clausify(38)].
Derived: ZEX(x) | -ZEX(f17(x)) | -(y < x) | ZEX(y).  [resolve(64,a,62,a)].

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, ZEX, P, PO, Cont, EqDim, <, <=, INCH, CH ]).
Function symbol precedence:  function_order([ c1, c2, c3, c4, intersection, difference, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f18, f17 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.02 seconds.

NOTE: Back_subsumption disabled, ratio of kept to back_subsumed is 22 (0.00 of 0.17 sec).

Low Water (keep): wt=48.000, iters=6705

Low Water (keep): wt=46.000, iters=6708

Low Water (keep): wt=37.000, iters=6667

Low Water (keep): wt=34.000, iters=6715

Low Water (keep): wt=30.000, iters=6687

Low Water (keep): wt=29.000, iters=6712

Low Water (keep): wt=25.000, iters=6667

Low Water (keep): wt=22.000, iters=6666

Low Water (keep): wt=19.000, iters=6792

Low Water (keep): wt=18.000, iters=6675

Low Water (keep): wt=17.000, iters=6688

Low Water (keep): wt=16.000, iters=6697

Low Water (keep): wt=15.000, iters=6683

Low Water (keep): wt=14.000, iters=6669

Low Water (keep): wt=13.000, iters=6666

Low Water (keep): wt=12.000, iters=6683

Low Water (keep): wt=11.000, iters=6690

Low Water (displace): id=22973, wt=17.000

Low Water (displace): id=22965, wt=13.000

Low Water (displace): id=23685, wt=12.000

Low Water (keep): wt=9.000, iters=6684

Low Water (displace): id=25644, wt=11.000

Low Water (displace): id=12166, wt=10.000

Low Water (displace): id=33859, wt=9.000

============================== PROOF =================================

% Proof 1 at 24.73 (+ 0.08) seconds.
% Length of proof is 113.
% Level of proof is 19.
% Maximum clause weight is 16.000.
% Given clauses 9174.

2 (all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
3 (all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))) # label(non_clause).  [assumption].
4 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
10 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
16 (all x all y (PO(x,y) <-> INCH(x,y) & INCH(y,x))) # label(non_clause).  [assumption].
17 (all x all y (CH(x,y) <-> INCH(x,y) & (all z (PO(x,z) -> PO(y,z))))) # label(non_clause).  [assumption].
21 (exists x ZEX(x)) # label(non_clause).  [assumption].
22 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
28 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
29 (all x -(x < x)) # label(non_clause).  [assumption].
31 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
33 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
34 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
36 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
37 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
40 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
41 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
42 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
44 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
46 (all x all y (P(x,y) -> CH(x,y))) # label(non_clause) # label(goal).  [goal].
65 ZEX(intersection(x,y)) | Cont(intersection(x,y),x).  [clausify(2)].
66 -Cont(x,y) | -Cont(x,z) | x <= intersection(y,z).  [clausify(3)].
67 -Cont(x,y) | -Cont(x,z) | -EqDim(x,intersection(y,z)) | P(x,intersection(y,z)).  [clausify(4)].
69 Cont(x,y) | -P(x,intersection(z,y)).  [clausify(4)].
76 -ZEX(difference(x,y)) | ZEX(x) | Cont(x,y).  [clausify(10)].
78 ZEX(difference(x,y)) | -Cont(x,y).  [clausify(10)].
86 -PO(x,y) | INCH(y,x).  [clausify(16)].
90 CH(x,y) | -INCH(x,y) | PO(x,f6(x,y)).  [clausify(17)].
91 CH(x,y) | -INCH(x,y) | -PO(y,f6(x,y)).  [clausify(17)].
104 ZEX(c1).  [clausify(21)].
105 -P(x,y) | Cont(x,y).  [clausify(22)].
106 -P(x,y) | EqDim(x,y).  [clausify(22)].
107 P(x,y) | -Cont(x,y) | -EqDim(x,y).  [clausify(22)].
112 -Cont(x,y) | x < y | EqDim(x,y).  [clausify(28)].
113 -(x < x).  [clausify(29)].
115 -(x < y) | -(y <= z) | x < z.  [clausify(31)].
117 -ZEX(x) | -ZEX(y) | y = x.  [clausify(33)].
118 -ZEX(x) | ZEX(y) | x < y.  [clausify(34)].
119 -EqDim(x,y) | -(x < y).  [clausify(36)].
120 -EqDim(x,y) | -(y < x).  [clausify(36)].
121 EqDim(x,y) | x < y | y < x.  [clausify(36)].
124 x <= y | -EqDim(x,y).  [clausify(37)].
125 -PO(x,y) | P(f18(x,y),x).  [clausify(40)].
126 -PO(x,y) | P(f18(x,y),y).  [clausify(40)].
127 PO(x,y) | -P(z,x) | -P(z,y).  [clausify(40)].
128 ZEX(x) | Cont(x,x).  [clausify(41)].
130 -Cont(x,y) | -Cont(y,x) | y = x.  [clausify(42)].
132 -ZEX(x) | -Cont(y,x).  [clausify(44)].
133 -ZEX(x) | -Cont(x,y).  [clausify(44)].
134 P(c3,c4).  [deny(46)].
135 -CH(c3,c4).  [deny(46)].
150 -Cont(x,y) | x <= intersection(y,y).  [factor(66,a,b)].
151 -Cont(x,y) | -EqDim(x,intersection(y,y)) | P(x,intersection(y,y)).  [factor(67,a,b)].
158 EqDim(x,x).  [factor(121,b,c),unit_del(b,113)].
203 intersection(x,y) < x | EqDim(intersection(x,y),x) | ZEX(intersection(x,y)).  [resolve(112,a,65,b)].
204 -ZEX(x) | c1 = x.  [resolve(117,a,104,a),flip(b)].
206 EqDim(x,y) | y < x | -EqDim(y,x).  [resolve(121,b,120,b)].
227 ZEX(x) | ZEX(difference(x,x)).  [resolve(128,b,78,b)].
229 ZEX(x) | -Cont(x,y) | x <= intersection(x,y).  [resolve(128,b,66,a)].
230 -Cont(x,intersection(x,y)) | intersection(x,y) = x | ZEX(intersection(x,y)).  [resolve(130,a,65,b),flip(b)].
237 PO(c4,x) | -P(c3,x).  [resolve(134,a,127,b)].
238 EqDim(c3,c4).  [resolve(134,a,106,a)].
239 Cont(c3,c4).  [resolve(134,a,105,a)].
257 P(x,x) | -Cont(x,x).  [resolve(158,a,107,c)].
294 -(c4 < c3).  [ur(120,a,238,a)].
295 -(c3 < c4).  [ur(119,a,238,a)].
296 c3 <= intersection(c4,c4).  [resolve(239,a,150,a)].
297 -ZEX(c3).  [resolve(239,a,133,b)].
298 -ZEX(c4).  [resolve(239,a,132,b)].
387 EqDim(c4,c3).  [resolve(294,a,121,b),unit_del(b,295)].
389 c4 <= c3.  [resolve(387,a,124,b)].
398 -(x < c4) | x < c3.  [resolve(389,a,115,b)].
422 -(intersection(c4,c4) < c3).  [ur(115,b,296,a,c,113,a)].
567 -ZEX(intersection(c4,c4)).  [ur(118,b,297,a,c,422,a)].
569 -(intersection(c4,c4) < c4).  [ur(115,b,389,a,c,422,a)].
1710 EqDim(intersection(c4,c4),c4).  [resolve(203,a,569,a),unit_del(b,567)].
1968 EqDim(c4,intersection(c4,c4)).  [resolve(1710,a,206,c),unit_del(b,569)].
2309 -Cont(c4,c4) | P(c4,intersection(c4,c4)).  [resolve(1968,a,151,b)].
3076 ZEX(x) | difference(x,x) = c1.  [resolve(227,b,204,a),flip(b)].
3206 c3 <= intersection(c3,c4).  [resolve(229,b,239,a),unit_del(a,297)].
3366 -(intersection(c3,c4) < c3).  [ur(115,b,3206,a,c,113,a)].
3481 EqDim(intersection(c3,c4),c3) | ZEX(intersection(c3,c4)).  [resolve(3366,a,203,a)].
3483 -ZEX(intersection(c3,c4)).  [ur(118,b,297,a,c,3366,a)].
3507 EqDim(intersection(c3,c4),c3).  [back_unit_del(3481),unit_del(b,3483)].
3575 EqDim(c3,intersection(c3,c4)).  [resolve(3507,a,206,c),unit_del(b,3366)].
3653 -Cont(c3,c3) | P(c3,intersection(c3,c4)).  [resolve(3575,a,67,c),unit_del(b,239)].
3972 P(x,x) | ZEX(x).  [resolve(257,b,128,b)].
3973 PO(c4,c3).  [resolve(3972,a,237,b),unit_del(a,297)].
3982 INCH(c3,c4).  [resolve(3973,a,86,a)].
4029 -PO(c4,f6(c3,c4)).  [resolve(3982,a,91,b),unit_del(a,135)].
4030 PO(c3,f6(c3,c4)).  [resolve(3982,a,90,b),unit_del(a,135)].
4210 P(f18(c3,f6(c3,c4)),f6(c3,c4)).  [resolve(4030,a,126,a)].
4211 P(f18(c3,f6(c3,c4)),c3).  [resolve(4030,a,125,a)].
10801 difference(c4,c4) = c1.  [resolve(3076,a,298,a)].
10802 difference(c3,c3) = c1.  [resolve(3076,a,297,a)].
10813 Cont(c4,c4).  [para(10801(a,1),76(a,1)),unit_del(a,104),unit_del(b,298)].
10816 P(c4,intersection(c4,c4)).  [back_unit_del(2309),unit_del(a,10813)].
10840 Cont(c3,c3).  [para(10802(a,1),76(a,1)),unit_del(a,104),unit_del(b,297)].
10844 P(c3,intersection(c3,c4)).  [back_unit_del(3653),unit_del(a,10840)].
10887 Cont(c4,intersection(c4,c4)).  [resolve(10816,a,105,a)].
10933 Cont(c3,intersection(c3,c4)).  [resolve(10844,a,105,a)].
10959 intersection(c4,c4) = c4.  [resolve(10887,a,230,a),unit_del(b,567)].
11209 intersection(c3,c4) = c3.  [resolve(10933,a,230,a),unit_del(b,3483)].
11667 Cont(x,c4) | -P(x,c3).  [para(11209(a,1),69(b,2))].
12783 Cont(f18(c3,f6(c3,c4)),c4).  [resolve(4211,a,11667,b)].
12787 EqDim(f18(c3,f6(c3,c4)),c3).  [resolve(4211,a,106,a)].
19912 f18(c3,f6(c3,c4)) <= c4.  [resolve(12783,a,150,a),rewrite([10959(8)])].
19922 -(f18(c3,f6(c3,c4)) < c3).  [ur(119,a,12787,a)].
29303 -(c4 < f18(c3,f6(c3,c4))).  [ur(115,b,19912,a,c,113,a)].
30817 -(f18(c3,f6(c3,c4)) < c4).  [ur(398,b,19922,a)].
32759 EqDim(f18(c3,f6(c3,c4)),c4).  [resolve(29303,a,121,c),unit_del(b,30817)].
38327 P(f18(c3,f6(c3,c4)),c4).  [resolve(32759,a,107,c),unit_del(b,12783)].
63067 $F.  [ur(127,a,4029,a,b,38327,a),unit_del(a,4210)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=9174. Generated=281245. Kept=63000. proofs=1.
Usable=8942. Sos=19999. Demods=484. Limbo=0, Disabled=34165. Hints=0.
Kept_by_rule=0, Deleted_by_rule=120.
Forward_subsumed=74764. Back_subsumed=127.
Sos_limit_deleted=143360. Sos_displaced=31155. Sos_removed=0.
New_demodulators=509 (0 lex), Back_demodulated=1909. Back_unit_deleted=868.
Demod_attempts=4500599. Demod_rewrites=54946.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=77264. Nonunit_bsub_feature_tests=4215.
Megabytes=62.77.
User_CPU=24.73, System_CPU=0.08, Wall_clock=25.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 24035 exit (max_proofs) Mon May 28 18:11:20 2012
