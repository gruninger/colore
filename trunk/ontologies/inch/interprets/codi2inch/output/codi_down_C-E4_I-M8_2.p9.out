============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 24039 was started by torsten on stl-ws2,
Mon May 28 18:11:25 2012
The command was "prover9 -t 600 -f codi/conversions/codi_down_nodefs.p9 codi/conversions/C-E4.p9 zex/input/zex.p9 codi/definitions/input/ep.p9 inch/mappings/conversions/codi2inch.p9 inch/definitions/input/inch_I-M2.p9 inch/definitions/input/inch_I-M3.p9 inch/definitions/input/inch_I-M6.p9 codi/conversions/codi_linear_nodefs.p9 codi/definitions/input/epp.p9 codi/definitions/input/po.p9 cont/conversions/cont_basic.p9 inch/theorems/input/options.txt inch/theorems/input/codi_down_C-E4_I-M8_2.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file codi/conversions/codi_down_nodefs.p9


formulas(sos).
(all x all y (-C(x,y) -> ZEX(intersection(x,y)))).
(all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))).
(all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))).
(all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))).
(all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))).
(all x all y (y < x -> x = difference(x,y))).
(all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))).
(all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))).
(all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)).
(all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))).
(all x all y (PP(x,y) -> (exists z (P(z,y) & -PO(z,x))))).
(all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & EqDim(x,y) & PO(x,y) & -PP(y,x) -> (exists z (P(z,y) & -PO(z,x))))).
(all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & EqDim(x,y) & -PO(x,y) -> (exists z (P(z,y) & -PO(z,x))))).
(all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & -EqDim(x,y) -> (exists z (P(z,y) & -PO(z,x))))).
(all x all y ((all z (PO(z,x) <-> PO(z,y))) -> x = y)).
(all x all y (PO(x,y) <-> INCH(x,y) & INCH(y,x))).
(all x all y (CH(x,y) <-> INCH(x,y) & (all z (PO(x,z) -> PO(y,z))))).
end_of_list.

% Reading from file codi/conversions/C-E4.p9


formulas(sos).
(all x all y (x <= y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))).
(all x all y (x < y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))).
(all x all y (EqDim(x,y) -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))).
end_of_list.

% Reading from file zex/input/zex.p9


formulas(sos).
(exists x ZEX(x)).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file inch/mappings/conversions/codi2inch.p9


formulas(sos).
(all x all y (INCH(x,y) <-> (exists z (Cont(z,x) & Cont(z,y) & EqDim(z,y))))).
end_of_list.

% Reading from file inch/definitions/input/inch_I-M2.p9


formulas(sos).
(all x (ZEX(x) <-> ZEXI(x))).
end_of_list.

% Reading from file inch/definitions/input/inch_I-M3.p9


formulas(sos).
(all x all y (GED(y,x) <-> x <= y)).
end_of_list.

% Reading from file inch/definitions/input/inch_I-M6.p9


formulas(sos).
(all x all y (PO(x,y) <-> OV(x,y))).
(all x all y (PO(x,y) <-> INCH(x,y) & INCH(y,x))).
end_of_list.

% Reading from file codi/conversions/codi_linear_nodefs.p9


formulas(sos).
(all x all y (Cont(x,y) -> x < y | EqDim(x,y))).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y <= z -> x < z)).
(all x all y all z (x <= y & y <= z -> x <= z)).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
(exists x MinDim(x)).
(all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
end_of_list.

% Reading from file codi/definitions/input/epp.p9


formulas(sos).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
end_of_list.

% Reading from file codi/definitions/input/po.p9


formulas(sos).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
end_of_list.

% Reading from file inch/theorems/input/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file inch/theorems/input/codi_down_C-E4_I-M8_2.p9


formulas(goals).
(all x all y (CH(x,y) -> P(x,y))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (-C(x,y) -> ZEX(intersection(x,y)))) # label(non_clause).  [assumption].
2 (all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
3 (all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))) # label(non_clause).  [assumption].
4 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
5 (all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
6 (all x all y (y < x -> x = difference(x,y))) # label(non_clause).  [assumption].
7 (all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))) # label(non_clause).  [assumption].
8 (all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
9 (all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)) # label(non_clause).  [assumption].
10 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
11 (all x all y (PP(x,y) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause).  [assumption].
12 (all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & EqDim(x,y) & PO(x,y) & -PP(y,x) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause).  [assumption].
13 (all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & EqDim(x,y) & -PO(x,y) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause).  [assumption].
14 (all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & -EqDim(x,y) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause).  [assumption].
15 (all x all y ((all z (PO(z,x) <-> PO(z,y))) -> x = y)) # label(non_clause).  [assumption].
16 (all x all y (PO(x,y) <-> INCH(x,y) & INCH(y,x))) # label(non_clause).  [assumption].
17 (all x all y (CH(x,y) <-> INCH(x,y) & (all z (PO(x,z) -> PO(y,z))))) # label(non_clause).  [assumption].
18 (all x all y (x <= y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))) # label(non_clause).  [assumption].
19 (all x all y (x < y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))) # label(non_clause).  [assumption].
20 (all x all y (EqDim(x,y) -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))) # label(non_clause).  [assumption].
21 (exists x ZEX(x)) # label(non_clause).  [assumption].
22 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
23 (all x all y (INCH(x,y) <-> (exists z (Cont(z,x) & Cont(z,y) & EqDim(z,y))))) # label(non_clause).  [assumption].
24 (all x (ZEX(x) <-> ZEXI(x))) # label(non_clause).  [assumption].
25 (all x all y (GED(y,x) <-> x <= y)) # label(non_clause).  [assumption].
26 (all x all y (PO(x,y) <-> OV(x,y))) # label(non_clause).  [assumption].
27 (all x all y (PO(x,y) <-> INCH(x,y) & INCH(y,x))) # label(non_clause).  [assumption].
28 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
29 (all x -(x < x)) # label(non_clause).  [assumption].
30 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
31 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
32 (all x all y all z (x <= y & y <= z -> x <= z)) # label(non_clause).  [assumption].
33 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
34 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
35 (exists x MinDim(x)) # label(non_clause).  [assumption].
36 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
37 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
38 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
39 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
40 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
41 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
42 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
43 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
44 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
45 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
46 (all x all y (CH(x,y) -> P(x,y))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating C/2

Eliminating PP/2
47 ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | PP(y,x) | P(f2(x,y),y).  [clausify(12)].
48 -PP(x,y) | P(f1(x,y),y).  [clausify(11)].
49 -PP(x,y) | -PO(f1(x,y),x).  [clausify(11)].
Derived: ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | P(f2(x,y),y) | P(f1(y,x),x).  [resolve(47,f,48,a)].
Derived: ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | P(f2(x,y),y) | -PO(f1(y,x),y).  [resolve(47,f,49,a)].
50 ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | PP(y,x) | -PO(f2(x,y),x).  [clausify(12)].
Derived: ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | -PO(f2(x,y),x) | P(f1(y,x),x).  [resolve(50,f,48,a)].
Derived: ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | -PO(f2(x,y),x) | -PO(f1(y,x),y).  [resolve(50,f,49,a)].
51 -PP(x,y) | P(x,y).  [clausify(39)].
Derived: P(x,y) | ZEX(y) | ZEX(x) | P(x,y) | -EqDim(y,x) | -PO(y,x) | P(f2(y,x),x).  [resolve(51,a,47,f)].
Derived: P(x,y) | ZEX(y) | ZEX(x) | P(x,y) | -EqDim(y,x) | -PO(y,x) | -PO(f2(y,x),y).  [resolve(51,a,50,f)].
52 -PP(x,y) | y != x.  [clausify(39)].
53 PP(x,y) | -P(x,y) | y = x.  [clausify(39)].
Derived: -P(x,y) | y = x | P(f1(x,y),y).  [resolve(53,a,48,a)].
Derived: -P(x,y) | y = x | -PO(f1(x,y),x).  [resolve(53,a,49,a)].

Eliminating CH/2
54 CH(x,y) | -INCH(x,y) | PO(x,f6(x,y)).  [clausify(17)].
55 -CH(x,y) | INCH(x,y).  [clausify(17)].
56 -CH(x,y) | -PO(x,z) | PO(y,z).  [clausify(17)].
Derived: -INCH(x,y) | PO(x,f6(x,y)) | -PO(x,z) | PO(y,z).  [resolve(54,a,56,a)].
57 CH(x,y) | -INCH(x,y) | -PO(y,f6(x,y)).  [clausify(17)].
Derived: -INCH(x,y) | -PO(y,f6(x,y)) | -PO(x,z) | PO(y,z).  [resolve(57,a,56,a)].
58 CH(c3,c4).  [deny(46)].
Derived: INCH(c3,c4).  [resolve(58,a,55,a)].
Derived: -PO(c3,x) | PO(c4,x).  [resolve(58,a,56,a)].

Eliminating ZEXI/1
59 ZEX(x) | -ZEXI(x).  [clausify(24)].
60 -ZEX(x) | ZEXI(x).  [clausify(24)].

Eliminating GED/2
61 GED(x,y) | -(y <= x).  [clausify(25)].
62 -GED(x,y) | y <= x.  [clausify(25)].

Eliminating OV/2
63 PO(x,y) | -OV(x,y).  [clausify(26)].
64 -PO(x,y) | OV(x,y).  [clausify(26)].

Eliminating MinDim/1
65 -MinDim(x) | -ZEX(x).  [clausify(38)].
66 MinDim(c2).  [clausify(35)].
Derived: -ZEX(c2).  [resolve(65,a,66,a)].
67 -MinDim(x) | -(y < x) | ZEX(y).  [clausify(38)].
Derived: -(x < c2) | ZEX(x).  [resolve(67,a,66,a)].
68 MinDim(x) | ZEX(x) | f17(x) < x.  [clausify(38)].
Derived: ZEX(x) | f17(x) < x | -(y < x) | ZEX(y).  [resolve(68,a,67,a)].
69 MinDim(x) | ZEX(x) | -ZEX(f17(x)).  [clausify(38)].
Derived: ZEX(x) | -ZEX(f17(x)) | -(y < x) | ZEX(y).  [resolve(69,a,67,a)].

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, ZEX, P, PO, Cont, EqDim, <, <=, INCH ]).
Function symbol precedence:  function_order([ c1, c2, c3, c4, intersection, difference, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f18, f17 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.02 seconds.

NOTE: Back_subsumption disabled, ratio of kept to back_subsumed is 22 (0.00 of 0.18 sec).

Low Water (keep): wt=72.000, iters=6742

Low Water (keep): wt=56.000, iters=6795

Low Water (keep): wt=49.000, iters=6775

Low Water (keep): wt=44.000, iters=6728

Low Water (keep): wt=43.000, iters=6746

Low Water (keep): wt=34.000, iters=6674

Low Water (keep): wt=30.000, iters=6672

Low Water (keep): wt=29.000, iters=6675

Low Water (keep): wt=25.000, iters=6783

Low Water (keep): wt=22.000, iters=6683

Low Water (keep): wt=19.000, iters=6709

Low Water (keep): wt=18.000, iters=6673

Low Water (keep): wt=17.000, iters=6679

Low Water (keep): wt=16.000, iters=6671

Low Water (keep): wt=15.000, iters=6671

Low Water (keep): wt=14.000, iters=6688

Low Water (keep): wt=13.000, iters=6678

Low Water (keep): wt=12.000, iters=6768

Low Water (keep): wt=11.000, iters=6734

Low Water (keep): wt=9.000, iters=6682

Low Water (displace): id=8486, wt=98.000

Low Water (displace): id=8183, wt=97.000

Low Water (displace): id=8477, wt=92.000

Low Water (displace): id=8478, wt=86.000

Low Water (displace): id=9170, wt=83.000

Low Water (displace): id=8488, wt=78.000

Low Water (displace): id=9503, wt=77.000

Low Water (displace): id=8479, wt=76.000

Low Water (displace): id=7994, wt=75.000

Low Water (displace): id=8487, wt=72.000

Low Water (displace): id=8672, wt=67.000

Low Water (displace): id=20071, wt=18.000

Low Water (displace): id=20747, wt=17.000

Low Water (displace): id=14696, wt=14.000

Low Water (displace): id=20087, wt=13.000

Low Water (displace): id=20753, wt=12.000

Low Water (displace): id=24810, wt=11.000

Low Water (displace): id=14760, wt=10.000

Low Water (displace): id=26647, wt=9.000

============================== PROOF =================================

% Proof 1 at 55.91 (+ 0.14) seconds.
% Length of proof is 94.
% Level of proof is 25.
% Maximum clause weight is 18.000.
% Given clauses 11382.

12 (all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & EqDim(x,y) & PO(x,y) & -PP(y,x) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause).  [assumption].
16 (all x all y (PO(x,y) <-> INCH(x,y) & INCH(y,x))) # label(non_clause).  [assumption].
17 (all x all y (CH(x,y) <-> INCH(x,y) & (all z (PO(x,z) -> PO(y,z))))) # label(non_clause).  [assumption].
22 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
23 (all x all y (INCH(x,y) <-> (exists z (Cont(z,x) & Cont(z,y) & EqDim(z,y))))) # label(non_clause).  [assumption].
29 (all x -(x < x)) # label(non_clause).  [assumption].
31 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
36 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
37 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
39 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
40 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
41 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
44 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
46 (all x all y (CH(x,y) -> P(x,y))) # label(non_clause) # label(goal).  [goal].
47 ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | PP(y,x) | P(f2(x,y),y).  [clausify(12)].
50 ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | PP(y,x) | -PO(f2(x,y),x).  [clausify(12)].
51 -PP(x,y) | P(x,y).  [clausify(39)].
55 -CH(x,y) | INCH(x,y).  [clausify(17)].
56 -CH(x,y) | -PO(x,z) | PO(y,z).  [clausify(17)].
58 CH(c3,c4).  [deny(46)].
90 -PO(x,y) | INCH(x,y).  [clausify(16)].
91 -PO(x,y) | INCH(y,x).  [clausify(16)].
92 PO(x,y) | -INCH(x,y) | -INCH(y,x).  [clausify(16)].
106 -P(x,y) | Cont(x,y).  [clausify(22)].
107 -P(x,y) | EqDim(x,y).  [clausify(22)].
108 P(x,y) | -Cont(x,y) | -EqDim(x,y).  [clausify(22)].
109 -INCH(x,y) | Cont(f16(x,y),x).  [clausify(23)].
110 -INCH(x,y) | Cont(f16(x,y),y).  [clausify(23)].
112 INCH(x,y) | -Cont(z,x) | -Cont(z,y) | -EqDim(z,y).  [clausify(23)].
114 -(x < x).  [clausify(29)].
116 -(x < y) | -(y <= z) | x < z.  [clausify(31)].
120 -EqDim(x,y) | -(x < y).  [clausify(36)].
121 -EqDim(x,y) | -(y < x).  [clausify(36)].
122 EqDim(x,y) | x < y | y < x.  [clausify(36)].
125 x <= y | -EqDim(x,y).  [clausify(37)].
126 -PO(x,y) | P(f18(x,y),x).  [clausify(40)].
127 -PO(x,y) | P(f18(x,y),y).  [clausify(40)].
128 PO(x,y) | -P(z,x) | -P(z,y).  [clausify(40)].
129 ZEX(x) | Cont(x,x).  [clausify(41)].
133 -ZEX(x) | -Cont(y,x).  [clausify(44)].
134 -ZEX(x) | -Cont(x,y).  [clausify(44)].
135 -P(c3,c4).  [deny(46)].
140 P(x,y) | ZEX(y) | ZEX(x) | P(x,y) | -EqDim(y,x) | -PO(y,x) | P(f2(y,x),x).  [resolve(51,a,47,f)].
141 P(x,y) | ZEX(y) | ZEX(x) | -EqDim(y,x) | -PO(y,x) | P(f2(y,x),x).  [copy(140),merge(d)].
142 P(x,y) | ZEX(y) | ZEX(x) | P(x,y) | -EqDim(y,x) | -PO(y,x) | -PO(f2(y,x),y).  [resolve(51,a,50,f)].
143 P(x,y) | ZEX(y) | ZEX(x) | -EqDim(y,x) | -PO(y,x) | -PO(f2(y,x),y).  [copy(142),merge(d)].
148 INCH(c3,c4).  [resolve(58,a,55,a)].
149 -PO(c3,x) | PO(c4,x).  [resolve(58,a,56,a)].
160 PO(x,x) | -INCH(x,x).  [factor(92,b,c)].
161 INCH(x,x) | -Cont(y,x) | -EqDim(y,x).  [factor(112,b,c)].
162 EqDim(x,x).  [factor(122,b,c),unit_del(b,114)].
210 EqDim(x,y) | y < x | -EqDim(y,x).  [resolve(122,b,121,b)].
245 Cont(f16(c3,c4),c4).  [resolve(148,a,110,a)].
246 Cont(f16(c3,c4),c3).  [resolve(148,a,109,a)].
248 PO(c3,c4) | -INCH(c4,c3).  [resolve(148,a,92,b)].
257 INCH(x,x) | -Cont(x,x).  [resolve(162,a,161,c)].
261 P(x,x) | -Cont(x,x).  [resolve(162,a,108,c)].
347 -ZEX(c4).  [resolve(245,a,133,b)].
364 -ZEX(c3).  [resolve(246,a,133,b)].
719 INCH(x,x) | ZEX(x).  [resolve(257,b,129,b)].
720 ZEX(x) | PO(x,x).  [resolve(719,a,160,b)].
724 PO(c4,c3).  [resolve(720,b,149,a),unit_del(a,364)].
738 INCH(c4,c3).  [resolve(724,a,90,a)].
739 PO(c3,c4).  [back_unit_del(248),unit_del(b,738)].
745 P(f18(c3,c4),c4).  [resolve(739,a,127,a)].
746 P(f18(c3,c4),c3).  [resolve(739,a,126,a)].
885 EqDim(f18(c3,c4),c4).  [resolve(745,a,107,a)].
907 EqDim(f18(c3,c4),c3).  [resolve(746,a,107,a)].
1258 -(c4 < f18(c3,c4)).  [ur(121,a,885,a)].
1259 -(f18(c3,c4) < c4).  [ur(120,a,885,a)].
1341 -(c3 < f18(c3,c4)).  [ur(121,a,907,a)].
1342 -(f18(c3,c4) < c3).  [ur(120,a,907,a)].
1509 EqDim(c3,f18(c3,c4)).  [resolve(210,c,907,a),unit_del(b,1342)].
1510 EqDim(c4,f18(c3,c4)).  [resolve(210,c,885,a),unit_del(b,1259)].
1900 c3 <= f18(c3,c4).  [resolve(1509,a,125,b)].
1908 c4 <= f18(c3,c4).  [resolve(1510,a,125,b)].
2137 -(c4 < c3).  [ur(116,b,1900,a,c,1258,a)].
2165 EqDim(c4,c3) | c3 < c4.  [resolve(2137,a,122,b)].
2193 -(c3 < c4).  [ur(116,b,1908,a,c,1341,a)].
2194 EqDim(c4,c3).  [back_unit_del(2165),unit_del(b,2193)].
2196 -PO(f2(c4,c3),c4).  [resolve(2194,a,143,d),unit_del(a,135),unit_del(b,347),unit_del(c,364),unit_del(d,724)].
2197 P(f2(c4,c3),c3).  [resolve(2194,a,141,d),unit_del(a,135),unit_del(b,347),unit_del(c,364),unit_del(d,724)].
2447 PO(x,c3) | -P(f2(c4,c3),x).  [resolve(2197,a,128,c)].
2450 Cont(f2(c4,c3),c3).  [resolve(2197,a,106,a)].
2714 -ZEX(f2(c4,c3)).  [resolve(2450,a,134,b)].
4100 P(x,x) | ZEX(x).  [resolve(261,b,129,b)].
100097 PO(f2(c4,c3),c3).  [resolve(2447,b,4100,a),unit_del(b,2714)].
100164 INCH(c3,f2(c4,c3)).  [resolve(100097,a,91,a)].
100165 INCH(f2(c4,c3),c3).  [resolve(100097,a,90,a)].
100170 PO(c3,f2(c4,c3)).  [resolve(100164,a,92,b),unit_del(b,100165)].
100175 PO(c4,f2(c4,c3)).  [resolve(100170,a,149,a)].
100182 INCH(f2(c4,c3),c4).  [resolve(100175,a,91,a)].
100183 INCH(c4,f2(c4,c3)).  [resolve(100175,a,90,a)].
100187 $F.  [resolve(100182,a,92,b),unit_del(a,2196),unit_del(b,100183)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=11382. Generated=415985. Kept=100115. proofs=1.
Usable=11246. Sos=19999. Demods=554. Limbo=3, Disabled=68977. Hints=0.
Kept_by_rule=0, Deleted_by_rule=130.
Forward_subsumed=100935. Back_subsumed=131.
Sos_limit_deleted=214804. Sos_displaced=66865. Sos_removed=0.
New_demodulators=567 (0 lex), Back_demodulated=1016. Back_unit_deleted=855.
Demod_attempts=6586670. Demod_rewrites=53851.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=68290. Nonunit_bsub_feature_tests=4995.
Megabytes=90.60.
User_CPU=55.91, System_CPU=0.14, Wall_clock=56.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 24039 exit (max_proofs) Mon May 28 18:12:21 2012
