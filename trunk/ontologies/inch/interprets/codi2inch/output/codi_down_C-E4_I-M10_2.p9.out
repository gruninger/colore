============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 24590 was started by torsten on stl-ws2,
Mon May 28 18:32:16 2012
The command was "prover9 -t 600 -f codi/conversions/codi_linear_nodefs.p9 cont/conversions/cont_c.p9 codi/conversions/C-E4.p9 zex/input/zex.p9 codi/definitions/input/ep.p9 inch/mappings/conversions/codi2inch.p9 inch/definitions/input/inch_co.p9 inch/definitions/input/inch_I-M2.p9 inch/definitions/input/inch_I-M3.p9 inch/definitions/input/inch_I-M6.p9 inch/definitions/input/inch_I-M7.p9 inch/definitions/input/inch_I-M8.p9 cont/conversions/cont_basic.p9 inch/definitions/input/inch_cs.p9 inch/definitions/input/inch_zex.p9 inch/definitions/input/inch_ch.p9 inch/definitions/input/inch_ov.p9 inch/theorems/input/options.txt inch/theorems/input/codi_down_C-E4_I-M10_2.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file codi/conversions/codi_linear_nodefs.p9


formulas(sos).
(all x all y (Cont(x,y) -> x < y | EqDim(x,y))).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y <= z -> x < z)).
(all x all y all z (x <= y & y <= z -> x <= z)).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
(exists x MinDim(x)).
(all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
end_of_list.

% Reading from file cont/conversions/cont_c.p9


formulas(sos).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
end_of_list.

% Reading from file codi/conversions/C-E4.p9


formulas(sos).
(all x all y (x <= y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))).
(all x all y (x < y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))).
(all x all y (EqDim(x,y) -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))).
end_of_list.

% Reading from file zex/input/zex.p9


formulas(sos).
(exists x ZEX(x)).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file inch/mappings/conversions/codi2inch.p9


formulas(sos).
(all x all y (INCH(x,y) <-> (exists z (Cont(z,x) & Cont(z,y) & EqDim(z,y))))).
end_of_list.

% Reading from file inch/definitions/input/inch_co.p9


formulas(sos).
(all x all y (CO(x,y) <-> (exists z (-ZEXI(z) & CS(z,x) & CS(z,y))))).
end_of_list.

% Reading from file inch/definitions/input/inch_I-M2.p9


formulas(sos).
(all x (ZEX(x) <-> ZEXI(x))).
end_of_list.

% Reading from file inch/definitions/input/inch_I-M3.p9


formulas(sos).
(all x all y (GED(y,x) <-> x <= y)).
end_of_list.

% Reading from file inch/definitions/input/inch_I-M6.p9


formulas(sos).
(all x all y (PO(x,y) <-> OV(x,y))).
(all x all y (PO(x,y) <-> INCH(x,y) & INCH(y,x))).
end_of_list.

% Reading from file inch/definitions/input/inch_I-M7.p9


formulas(sos).
(all x all y (CS(x,y) <-> Cont(x,y) | ZEX(x))).
end_of_list.

% Reading from file inch/definitions/input/inch_I-M8.p9


formulas(sos).
(all x all y (CH(x,y) <-> P(x,y))).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
end_of_list.

% Reading from file inch/definitions/input/inch_cs.p9


formulas(sos).
(all x all y (CS(x,y) <-> (all z (INCH(x,z) -> INCH(y,z))))).
end_of_list.

% Reading from file inch/definitions/input/inch_zex.p9


formulas(sos).
(all x all y (ZEXI(x) <-> -INCH(x,x))).
end_of_list.

% Reading from file inch/definitions/input/inch_ch.p9


formulas(sos).
(all x all y (CH(x,y) <-> INCH(x,y) & (all z (OV(x,z) -> OV(y,z))))).
end_of_list.

% Reading from file inch/definitions/input/inch_ov.p9


formulas(sos).
(all x all y (OV(x,y) <-> INCH(x,y) & INCH(y,x))).
end_of_list.

% Reading from file inch/theorems/input/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file inch/theorems/input/codi_down_C-E4_I-M10_2.p9


formulas(goals).
(all x all y (C(x,y) -> CO(x,y))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
2 (all x -(x < x)) # label(non_clause).  [assumption].
3 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
4 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
5 (all x all y all z (x <= y & y <= z -> x <= z)) # label(non_clause).  [assumption].
6 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
7 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
8 (exists x MinDim(x)) # label(non_clause).  [assumption].
9 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
10 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
11 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
12 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
13 (all x all y (x <= y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))) # label(non_clause).  [assumption].
14 (all x all y (x < y -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))) # label(non_clause).  [assumption].
15 (all x all y (EqDim(x,y) -> ZEX(x) | (exists z exists v exists w (P(v,x) & Cont(v,z) & P(w,z) & Cont(w,y))))) # label(non_clause).  [assumption].
16 (exists x ZEX(x)) # label(non_clause).  [assumption].
17 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
18 (all x all y (INCH(x,y) <-> (exists z (Cont(z,x) & Cont(z,y) & EqDim(z,y))))) # label(non_clause).  [assumption].
19 (all x all y (CO(x,y) <-> (exists z (-ZEXI(z) & CS(z,x) & CS(z,y))))) # label(non_clause).  [assumption].
20 (all x (ZEX(x) <-> ZEXI(x))) # label(non_clause).  [assumption].
21 (all x all y (GED(y,x) <-> x <= y)) # label(non_clause).  [assumption].
22 (all x all y (PO(x,y) <-> OV(x,y))) # label(non_clause).  [assumption].
23 (all x all y (PO(x,y) <-> INCH(x,y) & INCH(y,x))) # label(non_clause).  [assumption].
24 (all x all y (CS(x,y) <-> Cont(x,y) | ZEX(x))) # label(non_clause).  [assumption].
25 (all x all y (CH(x,y) <-> P(x,y))) # label(non_clause).  [assumption].
26 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
27 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
28 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
29 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
30 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
31 (all x all y (CS(x,y) <-> (all z (INCH(x,z) -> INCH(y,z))))) # label(non_clause).  [assumption].
32 (all x all y (ZEXI(x) <-> -INCH(x,x))) # label(non_clause).  [assumption].
33 (all x all y (CH(x,y) <-> INCH(x,y) & (all z (OV(x,z) -> OV(y,z))))) # label(non_clause).  [assumption].
34 (all x all y (OV(x,y) <-> INCH(x,y) & INCH(y,x))) # label(non_clause).  [assumption].
35 (all x all y (C(x,y) -> CO(x,y))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating EqDim/2
36 -EqDim(x,y) | -(x < y).  [clausify(9)].
37 -Cont(x,y) | x < y | EqDim(x,y).  [clausify(1)].
38 -EqDim(x,y) | -(y < x).  [clausify(9)].
Derived: -(x < y) | -Cont(y,x) | y < x.  [resolve(38,a,37,c)].
39 EqDim(x,y) | x < y | y < x.  [clausify(9)].
40 -(x <= y) | x < y | EqDim(x,y).  [clausify(10)].
Derived: -(x <= y) | x < y | -(y < x).  [resolve(40,c,38,a)].
41 x <= y | -EqDim(x,y).  [clausify(10)].
Derived: x <= y | -Cont(x,y) | x < y.  [resolve(41,b,37,c)].
Derived: x <= y | x < y | y < x.  [resolve(41,b,39,a)].
42 -EqDim(x,y) | ZEX(x) | P(f10(x,y),x).  [clausify(15)].
Derived: ZEX(x) | P(f10(x,y),x) | -Cont(x,y) | x < y.  [resolve(42,a,37,c)].
Derived: ZEX(x) | P(f10(x,y),x) | x < y | y < x.  [resolve(42,a,39,a)].
Derived: ZEX(x) | P(f10(x,y),x) | -(x <= y) | x < y.  [resolve(42,a,40,c)].
43 -EqDim(x,y) | ZEX(x) | Cont(f10(x,y),f9(x,y)).  [clausify(15)].
Derived: ZEX(x) | Cont(f10(x,y),f9(x,y)) | -Cont(x,y) | x < y.  [resolve(43,a,37,c)].
Derived: ZEX(x) | Cont(f10(x,y),f9(x,y)) | x < y | y < x.  [resolve(43,a,39,a)].
Derived: ZEX(x) | Cont(f10(x,y),f9(x,y)) | -(x <= y) | x < y.  [resolve(43,a,40,c)].
44 -EqDim(x,y) | ZEX(x) | P(f11(x,y),f9(x,y)).  [clausify(15)].
Derived: ZEX(x) | P(f11(x,y),f9(x,y)) | -Cont(x,y) | x < y.  [resolve(44,a,37,c)].
Derived: ZEX(x) | P(f11(x,y),f9(x,y)) | x < y | y < x.  [resolve(44,a,39,a)].
Derived: ZEX(x) | P(f11(x,y),f9(x,y)) | -(x <= y) | x < y.  [resolve(44,a,40,c)].
45 -EqDim(x,y) | ZEX(x) | Cont(f11(x,y),y).  [clausify(15)].
Derived: ZEX(x) | Cont(f11(x,y),y) | -Cont(x,y) | x < y.  [resolve(45,a,37,c)].
Derived: ZEX(x) | Cont(f11(x,y),y) | x < y | y < x.  [resolve(45,a,39,a)].
Derived: ZEX(x) | Cont(f11(x,y),y) | -(x <= y) | x < y.  [resolve(45,a,40,c)].
46 -P(x,y) | EqDim(x,y).  [clausify(17)].
Derived: -P(x,y) | -(x < y).  [resolve(46,b,36,a)].
Derived: -P(x,y) | -(y < x).  [resolve(46,b,38,a)].
Derived: -P(x,y) | x <= y.  [resolve(46,b,41,b)].
Derived: -P(x,y) | ZEX(x) | P(f10(x,y),x).  [resolve(46,b,42,a)].
Derived: -P(x,y) | ZEX(x) | Cont(f10(x,y),f9(x,y)).  [resolve(46,b,43,a)].
Derived: -P(x,y) | ZEX(x) | P(f11(x,y),f9(x,y)).  [resolve(46,b,44,a)].
Derived: -P(x,y) | ZEX(x) | Cont(f11(x,y),y).  [resolve(46,b,45,a)].
47 P(x,y) | -Cont(x,y) | -EqDim(x,y).  [clausify(17)].
Derived: P(x,y) | -Cont(x,y) | -Cont(x,y) | x < y.  [resolve(47,c,37,c)].
48 -INCH(x,y) | EqDim(f12(x,y),y).  [clausify(18)].
Derived: -INCH(x,y) | -(f12(x,y) < y).  [resolve(48,b,36,a)].
Derived: -INCH(x,y) | -(y < f12(x,y)).  [resolve(48,b,38,a)].
Derived: -INCH(x,y) | f12(x,y) <= y.  [resolve(48,b,41,b)].
Derived: -INCH(x,y) | ZEX(f12(x,y)) | P(f10(f12(x,y),y),f12(x,y)).  [resolve(48,b,42,a)].
Derived: -INCH(x,y) | ZEX(f12(x,y)) | Cont(f10(f12(x,y),y),f9(f12(x,y),y)).  [resolve(48,b,43,a)].
Derived: -INCH(x,y) | ZEX(f12(x,y)) | P(f11(f12(x,y),y),f9(f12(x,y),y)).  [resolve(48,b,44,a)].
Derived: -INCH(x,y) | ZEX(f12(x,y)) | Cont(f11(f12(x,y),y),y).  [resolve(48,b,45,a)].
Derived: -INCH(x,y) | P(f12(x,y),y) | -Cont(f12(x,y),y).  [resolve(48,b,47,c)].
49 INCH(x,y) | -Cont(z,x) | -Cont(z,y) | -EqDim(z,y).  [clausify(18)].
Derived: INCH(x,y) | -Cont(z,x) | -Cont(z,y) | -Cont(z,y) | z < y.  [resolve(49,d,37,c)].
Derived: INCH(x,y) | -Cont(z,x) | -Cont(z,y) | -P(z,y).  [resolve(49,d,46,b)].
Derived: INCH(x,y) | -Cont(f12(z,y),x) | -Cont(f12(z,y),y) | -INCH(z,y).  [resolve(49,d,48,b)].

Eliminating MinDim/1
50 -MinDim(x) | -ZEX(x).  [clausify(11)].
51 MinDim(c1).  [clausify(8)].
Derived: -ZEX(c1).  [resolve(50,a,51,a)].
52 -MinDim(x) | -(y < x) | ZEX(y).  [clausify(11)].
Derived: -(x < c1) | ZEX(x).  [resolve(52,a,51,a)].
53 MinDim(x) | ZEX(x) | f1(x) < x.  [clausify(11)].
Derived: ZEX(x) | f1(x) < x | -(y < x) | ZEX(y).  [resolve(53,a,52,a)].
54 MinDim(x) | ZEX(x) | -ZEX(f1(x)).  [clausify(11)].
Derived: ZEX(x) | -ZEX(f1(x)) | -(y < x) | ZEX(y).  [resolve(54,a,52,a)].

Eliminating C/2
55 C(x,y) | -Cont(z,x) | -Cont(z,y).  [clausify(12)].
56 -C(x,y) | Cont(f2(x,y),x).  [clausify(12)].
57 -C(x,y) | Cont(f2(x,y),y).  [clausify(12)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f2(y,z),y).  [resolve(55,a,56,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f2(y,z),z).  [resolve(55,a,57,a)].
58 C(c3,c4).  [deny(35)].
Derived: Cont(f2(c3,c4),c3).  [resolve(58,a,56,a)].
Derived: Cont(f2(c3,c4),c4).  [resolve(58,a,57,a)].

Eliminating GED/2
59 GED(x,y) | -(y <= x).  [clausify(21)].
60 -GED(x,y) | y <= x.  [clausify(21)].

Eliminating PO/2
61 PO(x,y) | -OV(x,y).  [clausify(22)].
62 -PO(x,y) | OV(x,y).  [clausify(22)].
63 -PO(x,y) | INCH(x,y).  [clausify(23)].
64 -PO(x,y) | INCH(y,x).  [clausify(23)].
65 PO(x,y) | -INCH(x,y) | -INCH(y,x).  [clausify(23)].

Eliminating CH/2
66 CH(x,y) | -P(x,y).  [clausify(25)].
67 -CH(x,y) | P(x,y).  [clausify(25)].
68 -CH(x,y) | INCH(x,y).  [clausify(33)].
Derived: INCH(x,y) | -P(x,y).  [resolve(68,a,66,a)].
69 -CH(x,y) | -OV(x,z) | OV(y,z).  [clausify(33)].
Derived: -OV(x,y) | OV(z,y) | -P(x,z).  [resolve(69,a,66,a)].
70 CH(x,y) | -INCH(x,y) | OV(x,f15(x,y)).  [clausify(33)].
Derived: -INCH(x,y) | OV(x,f15(x,y)) | P(x,y).  [resolve(70,a,67,a)].
Derived: -INCH(x,y) | OV(x,f15(x,y)) | -OV(x,z) | OV(y,z).  [resolve(70,a,69,a)].
71 CH(x,y) | -INCH(x,y) | -OV(y,f15(x,y)).  [clausify(33)].
Derived: -INCH(x,y) | -OV(y,f15(x,y)) | P(x,y).  [resolve(71,a,67,a)].
Derived: -INCH(x,y) | -OV(y,f15(x,y)) | -OV(x,z) | OV(y,z).  [resolve(71,a,69,a)].

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, ZEX, ZEXI, Cont, <, P, INCH, <=, OV, CS, CO ]).
Function symbol precedence:  function_order([ c1, c2, c3, c4, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f1 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.02 seconds.

============================== PROOF =================================

% Proof 1 at 0.04 (+ 0.00) seconds.
% Length of proof is 21.
% Level of proof is 5.
% Maximum clause weight is 11.000.
% Given clauses 160.

12 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
19 (all x all y (CO(x,y) <-> (exists z (-ZEXI(z) & CS(z,x) & CS(z,y))))) # label(non_clause).  [assumption].
20 (all x (ZEX(x) <-> ZEXI(x))) # label(non_clause).  [assumption].
24 (all x all y (CS(x,y) <-> Cont(x,y) | ZEX(x))) # label(non_clause).  [assumption].
29 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
35 (all x all y (C(x,y) -> CO(x,y))) # label(non_clause) # label(goal).  [goal].
56 -C(x,y) | Cont(f2(x,y),x).  [clausify(12)].
57 -C(x,y) | Cont(f2(x,y),y).  [clausify(12)].
58 C(c3,c4).  [deny(35)].
94 CO(x,y) | ZEXI(z) | -CS(z,x) | -CS(z,y).  [clausify(19)].
96 ZEX(x) | -ZEXI(x).  [clausify(20)].
98 CS(x,y) | -Cont(x,y).  [clausify(24)].
105 -ZEX(x) | -Cont(x,y).  [clausify(29)].
114 -CO(c3,c4).  [deny(35)].
158 Cont(f2(c3,c4),c3).  [resolve(58,a,56,a)].
159 Cont(f2(c3,c4),c4).  [resolve(58,a,57,a)].
303 -ZEX(f2(c3,c4)).  [resolve(158,a,105,b)].
308 CS(f2(c3,c4),c3).  [resolve(158,a,98,b)].
329 CS(f2(c3,c4),c4).  [resolve(159,a,98,b)].
552 -ZEXI(f2(c3,c4)).  [ur(96,a,303,a)].
629 $F.  [ur(94,a,114,a,b,552,a,d,329,a),unit_del(a,308)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=160. Generated=982. Kept=555. proofs=1.
Usable=160. Sos=355. Demods=0. Limbo=0, Disabled=169. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=426. Back_subsumed=9.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=31.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=938. Nonunit_bsub_feature_tests=934.
Megabytes=1.29.
User_CPU=0.04, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 24590 exit (max_proofs) Mon May 28 18:32:16 2012
