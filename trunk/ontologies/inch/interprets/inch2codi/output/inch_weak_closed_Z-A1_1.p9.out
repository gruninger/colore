============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 23581 was started by torsten on scotus.mie.utoronto.ca,
Tue May 22 11:16:23 2012
The command was "prover9 -t 600 -f inch/mappings/conversions/inch2codi.p9 inch/conversions/inch_weak_closed.p9 inch/definitions/input/dim_prime_defs.p9 inch/conversions/inch_weak.p9 inch/theorems/input/options.txt inch/theorems/input/inch_weak_closed_Z-A1_1.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file inch/mappings/conversions/inch2codi.p9


formulas(sos).
(all x all y (Cont(x,y) <-> CS(x,y) & -ZEXI(x))).
(all x (ZEX(x) <-> ZEXI(x))).
(all x all y (x < y <-> GED(y,x) & -GED(x,y))).
end_of_list.

% Reading from file inch/conversions/inch_weak_closed.p9


formulas(sos).
(all x all y (GED(x,y) & GED(y,x) -> (exists z all w (INCH(z,w) <-> INCH(x,w) | INCH(y,w))))).
(all x all y (GED(x,y) & GED(y,x) -> (exists z all w (INCH(z,w) <-> (exists v (INCH(v,w) & CH(v,x) & -(INCH(v,y) & INCH(y,v)))))))).
end_of_list.

% Reading from file inch/definitions/input/dim_prime_defs.p9


formulas(sos).
(all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x (MaxDim(x) <-> (all y y <= x))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
end_of_list.

% Reading from file inch/conversions/inch_weak.p9


formulas(sos).
(all x all y (CS(x,y) <-> (all z (INCH(x,z) -> INCH(y,z))))).
(all x all y (CH(x,y) <-> INCH(x,y) & (all z (INCH(x,z) & INCH(z,x) -> INCH(y,z) & INCH(z,y))))).
(all x all y (ZEXI(x) <-> -INCH(x,x))).
(all x all y (GED(x,y) <-> ZEXI(y) | (exists z (INCH(x,z) & INCH(z,y))))).
(all x all y (x = y <-> (all z (INCH(x,z) <-> INCH(y,z))))).
(all x all y (x = y <-> (all z (INCH(z,x) <-> INCH(z,y))))).
(all x all y (INCH(x,y) -> INCH(x,x))).
(all x all y (GED(x,y) | GED(y,x))).
(all x all y all z (GED(x,y) & GED(y,z) -> GED(x,z))).
end_of_list.

% Reading from file inch/theorems/input/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file inch/theorems/input/inch_weak_closed_Z-A1_1.p9


formulas(goals).
(exists x ZEX(x)).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (Cont(x,y) <-> CS(x,y) & -ZEXI(x))) # label(non_clause).  [assumption].
2 (all x (ZEX(x) <-> ZEXI(x))) # label(non_clause).  [assumption].
3 (all x all y (x < y <-> GED(y,x) & -GED(x,y))) # label(non_clause).  [assumption].
4 (all x all y (GED(x,y) & GED(y,x) -> (exists z all w (INCH(z,w) <-> INCH(x,w) | INCH(y,w))))) # label(non_clause).  [assumption].
5 (all x all y (GED(x,y) & GED(y,x) -> (exists z all w (INCH(z,w) <-> (exists v (INCH(v,w) & CH(v,x) & -(INCH(v,y) & INCH(y,v)))))))) # label(non_clause).  [assumption].
6 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
7 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
8 (all x (MaxDim(x) <-> (all y y <= x))) # label(non_clause).  [assumption].
9 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
10 (all x all y (CS(x,y) <-> (all z (INCH(x,z) -> INCH(y,z))))) # label(non_clause).  [assumption].
11 (all x all y (CH(x,y) <-> INCH(x,y) & (all z (INCH(x,z) & INCH(z,x) -> INCH(y,z) & INCH(z,y))))) # label(non_clause).  [assumption].
12 (all x all y (ZEXI(x) <-> -INCH(x,x))) # label(non_clause).  [assumption].
13 (all x all y (GED(x,y) <-> ZEXI(y) | (exists z (INCH(x,z) & INCH(z,y))))) # label(non_clause).  [assumption].
14 (all x all y (x = y <-> (all z (INCH(x,z) <-> INCH(y,z))))) # label(non_clause).  [assumption].
15 (all x all y (x = y <-> (all z (INCH(z,x) <-> INCH(z,y))))) # label(non_clause).  [assumption].
16 (all x all y (INCH(x,y) -> INCH(x,x))) # label(non_clause).  [assumption].
17 (all x all y (GED(x,y) | GED(y,x))) # label(non_clause).  [assumption].
18 (all x all y all z (GED(x,y) & GED(y,z) -> GED(x,z))) # label(non_clause).  [assumption].
19 (exists x ZEX(x)) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating Cont/2
20 Cont(x,y) | -CS(x,y) | ZEXI(x).  [clausify(1)].
21 -Cont(x,y) | CS(x,y).  [clausify(1)].
22 -Cont(x,y) | -ZEXI(x).  [clausify(1)].

Eliminating ZEXI/1
23 ZEX(x) | -ZEXI(x).  [clausify(2)].
24 -ZEX(x) | ZEXI(x).  [clausify(2)].
25 -ZEXI(x) | -INCH(x,x).  [clausify(12)].
26 ZEXI(x) | INCH(x,x).  [clausify(12)].
Derived: INCH(x,x) | ZEX(x).  [resolve(26,a,23,b)].
27 -GED(x,y) | ZEXI(y) | INCH(x,f8(x,y)).  [clausify(13)].
Derived: -GED(x,y) | INCH(x,f8(x,y)) | ZEX(y).  [resolve(27,b,23,b)].
Derived: -GED(x,y) | INCH(x,f8(x,y)) | -INCH(y,y).  [resolve(27,b,25,a)].
28 -GED(x,y) | ZEXI(y) | INCH(f8(x,y),y).  [clausify(13)].
Derived: -GED(x,y) | INCH(f8(x,y),y) | ZEX(y).  [resolve(28,b,23,b)].
Derived: -GED(x,y) | INCH(f8(x,y),y) | -INCH(y,y).  [resolve(28,b,25,a)].
29 GED(x,y) | -ZEXI(y).  [clausify(13)].
Derived: GED(x,y) | INCH(y,y).  [resolve(29,b,26,a)].
Derived: GED(x,y) | -GED(z,y) | INCH(z,f8(z,y)).  [resolve(29,b,27,b)].
Derived: GED(x,y) | -GED(z,y) | INCH(f8(z,y),y).  [resolve(29,b,28,b)].

Eliminating CH/2
30 -GED(x,y) | -GED(y,x) | INCH(f2(x,y),z) | -INCH(u,z) | -CH(u,x) | INCH(u,y).  [clausify(5)].
31 -GED(x,y) | -GED(y,x) | -INCH(f2(x,y),z) | CH(f3(x,y,z),x).  [clausify(5)].
Derived: -GED(x,y) | -GED(y,x) | INCH(f2(x,y),z) | -INCH(f3(x,u,w),z) | INCH(f3(x,u,w),y) | -GED(x,u) | -GED(u,x) | -INCH(f2(x,u),w).  [resolve(30,e,31,d)].
32 -GED(x,y) | -GED(y,x) | INCH(f2(x,y),z) | -INCH(u,z) | -CH(u,x) | INCH(y,u).  [clausify(5)].
Derived: -GED(x,y) | -GED(y,x) | INCH(f2(x,y),z) | -INCH(f3(x,u,w),z) | INCH(y,f3(x,u,w)) | -GED(x,u) | -GED(u,x) | -INCH(f2(x,u),w).  [resolve(32,e,31,d)].
33 -CH(x,y) | INCH(x,y).  [clausify(11)].
Derived: INCH(f3(x,y,z),x) | -GED(x,y) | -GED(y,x) | -INCH(f2(x,y),z).  [resolve(33,a,31,d)].
34 -CH(x,y) | -INCH(x,z) | -INCH(z,x) | INCH(y,z).  [clausify(11)].
Derived: -INCH(f3(x,y,z),u) | -INCH(u,f3(x,y,z)) | INCH(x,u) | -GED(x,y) | -GED(y,x) | -INCH(f2(x,y),z).  [resolve(34,a,31,d)].
35 -CH(x,y) | -INCH(x,z) | -INCH(z,x) | INCH(z,y).  [clausify(11)].
Derived: -INCH(f3(x,y,z),u) | -INCH(u,f3(x,y,z)) | INCH(u,x) | -GED(x,y) | -GED(y,x) | -INCH(f2(x,y),z).  [resolve(35,a,31,d)].
36 CH(x,y) | -INCH(x,y) | INCH(x,f7(x,y)).  [clausify(11)].
Derived: -INCH(x,y) | INCH(x,f7(x,y)) | -GED(y,z) | -GED(z,y) | INCH(f2(y,z),u) | -INCH(x,u) | INCH(x,z).  [resolve(36,a,30,e)].
Derived: -INCH(x,y) | INCH(x,f7(x,y)) | -GED(y,z) | -GED(z,y) | INCH(f2(y,z),u) | -INCH(x,u) | INCH(z,x).  [resolve(36,a,32,e)].
Derived: -INCH(x,y) | INCH(x,f7(x,y)) | -INCH(x,z) | -INCH(z,x) | INCH(y,z).  [resolve(36,a,34,a)].
Derived: -INCH(x,y) | INCH(x,f7(x,y)) | -INCH(x,z) | -INCH(z,x) | INCH(z,y).  [resolve(36,a,35,a)].
37 CH(x,y) | -INCH(x,y) | INCH(f7(x,y),x).  [clausify(11)].
Derived: -INCH(x,y) | INCH(f7(x,y),x) | -GED(y,z) | -GED(z,y) | INCH(f2(y,z),u) | -INCH(x,u) | INCH(x,z).  [resolve(37,a,30,e)].
Derived: -INCH(x,y) | INCH(f7(x,y),x) | -GED(y,z) | -GED(z,y) | INCH(f2(y,z),u) | -INCH(x,u) | INCH(z,x).  [resolve(37,a,32,e)].
Derived: -INCH(x,y) | INCH(f7(x,y),x) | -INCH(x,z) | -INCH(z,x) | INCH(y,z).  [resolve(37,a,34,a)].
Derived: -INCH(x,y) | INCH(f7(x,y),x) | -INCH(x,z) | -INCH(z,x) | INCH(z,y).  [resolve(37,a,35,a)].
38 CH(x,y) | -INCH(x,y) | -INCH(y,f7(x,y)) | -INCH(f7(x,y),y).  [clausify(11)].
Derived: -INCH(x,y) | -INCH(y,f7(x,y)) | -INCH(f7(x,y),y) | -GED(y,z) | -GED(z,y) | INCH(f2(y,z),u) | -INCH(x,u) | INCH(x,z).  [resolve(38,a,30,e)].
Derived: -INCH(x,y) | -INCH(y,f7(x,y)) | -INCH(f7(x,y),y) | -GED(y,z) | -GED(z,y) | INCH(f2(y,z),u) | -INCH(x,u) | INCH(z,x).  [resolve(38,a,32,e)].
Derived: -INCH(x,y) | -INCH(y,f7(x,y)) | -INCH(f7(x,y),y) | -INCH(x,z) | -INCH(z,x) | INCH(y,z).  [resolve(38,a,34,a)].
Derived: -INCH(x,y) | -INCH(y,f7(x,y)) | -INCH(f7(x,y),y) | -INCH(x,z) | -INCH(z,x) | INCH(z,y).  [resolve(38,a,35,a)].

Eliminating EqDim/2
39 EqDim(x,y) | x < y | y < x.  [clausify(6)].
40 -EqDim(x,y) | -(x < y).  [clausify(6)].
41 -EqDim(x,y) | -(y < x).  [clausify(6)].
42 -(x <= y) | x < y | EqDim(x,y).  [clausify(7)].
Derived: -(x <= y) | x < y | -(y < x).  [resolve(42,c,41,a)].
43 x <= y | -EqDim(x,y).  [clausify(7)].
Derived: x <= y | x < y | y < x.  [resolve(43,b,39,a)].

Eliminating MaxDim/1
44 MaxDim(x) | -(f4(x) <= x).  [clausify(8)].
45 -MaxDim(x) | y <= x.  [clausify(8)].
Derived: -(f4(x) <= x) | y <= x.  [resolve(44,a,45,a)].

Eliminating MinDim/1
46 MinDim(x) | ZEX(x) | f5(x) < x.  [clausify(9)].
47 -MinDim(x) | -ZEX(x).  [clausify(9)].
48 -MinDim(x) | -(y < x) | ZEX(y).  [clausify(9)].
Derived: ZEX(x) | f5(x) < x | -(y < x) | ZEX(y).  [resolve(46,a,48,a)].
49 MinDim(x) | ZEX(x) | -ZEX(f5(x)).  [clausify(9)].

Eliminating CS/2
50 CS(x,y) | INCH(x,f6(x,y)).  [clausify(10)].
51 -CS(x,y) | -INCH(x,z) | INCH(y,z).  [clausify(10)].
Derived: INCH(x,f6(x,y)) | -INCH(x,z) | INCH(y,z).  [resolve(50,a,51,a)].
52 CS(x,y) | -INCH(y,f6(x,y)).  [clausify(10)].
Derived: -INCH(x,f6(y,x)) | -INCH(y,z) | INCH(x,z).  [resolve(52,a,51,a)].

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, ZEX, INCH, GED, <, <= ]).
Function symbol precedence:  function_order([ f1, f2, f6, f7, f8, f9, f10, f4, f5, f3 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

============================== PROOF =================================

% Proof 1 at 0.50 (+ 0.01) seconds.
% Length of proof is 27.
% Level of proof is 7.
% Maximum clause weight is 26.000.
% Given clauses 139.

2 (all x (ZEX(x) <-> ZEXI(x))) # label(non_clause).  [assumption].
5 (all x all y (GED(x,y) & GED(y,x) -> (exists z all w (INCH(z,w) <-> (exists v (INCH(v,w) & CH(v,x) & -(INCH(v,y) & INCH(y,v)))))))) # label(non_clause).  [assumption].
11 (all x all y (CH(x,y) <-> INCH(x,y) & (all z (INCH(x,z) & INCH(z,x) -> INCH(y,z) & INCH(z,y))))) # label(non_clause).  [assumption].
12 (all x all y (ZEXI(x) <-> -INCH(x,x))) # label(non_clause).  [assumption].
13 (all x all y (GED(x,y) <-> ZEXI(y) | (exists z (INCH(x,z) & INCH(z,y))))) # label(non_clause).  [assumption].
19 (exists x ZEX(x)) # label(non_clause) # label(goal).  [goal].
23 ZEX(x) | -ZEXI(x).  [clausify(2)].
26 ZEXI(x) | INCH(x,x).  [clausify(12)].
31 -GED(x,y) | -GED(y,x) | -INCH(f2(x,y),z) | CH(f3(x,y,z),x).  [clausify(5)].
33 -CH(x,y) | INCH(x,y).  [clausify(11)].
34 -CH(x,y) | -INCH(x,z) | -INCH(z,x) | INCH(y,z).  [clausify(11)].
60 -GED(x,y) | -GED(y,x) | -INCH(f2(x,y),z) | -INCH(f3(x,y,z),y) | -INCH(y,f3(x,y,z)).  [clausify(5)].
62 GED(x,y) | -INCH(x,z) | -INCH(z,y).  [clausify(13)].
74 -ZEX(x).  [deny(19)].
75 INCH(x,x) | ZEX(x).  [resolve(26,a,23,b)].
76 INCH(x,x).  [copy(75),unit_del(b,74)].
85 INCH(f3(x,y,z),x) | -GED(x,y) | -GED(y,x) | -INCH(f2(x,y),z).  [resolve(33,a,31,d)].
86 -INCH(f3(x,y,z),u) | -INCH(u,f3(x,y,z)) | INCH(x,u) | -GED(x,y) | -GED(y,x) | -INCH(f2(x,y),z).  [resolve(34,a,31,d)].
110 -GED(x,x) | -INCH(f2(x,x),y) | -INCH(f3(x,x,y),x) | -INCH(x,f3(x,x,y)).  [factor(60,a,b)].
111 GED(x,x).  [factor(62,b,c),unit_del(b,76)].
119 INCH(f3(x,x,y),x) | -INCH(f2(x,x),y).  [factor(85,b,c),unit_del(b,111)].
120 INCH(x,f3(x,y,z)) | -GED(x,y) | -GED(y,x) | -INCH(f2(x,y),z).  [factor(86,a,b),unit_del(a,76)].
140 -INCH(f2(x,x),y) | -INCH(f3(x,x,y),x) | -INCH(x,f3(x,x,y)).  [back_unit_del(110),unit_del(a,111)].
144 INCH(x,f3(x,x,y)) | -INCH(f2(x,x),y).  [factor(120,b,c),unit_del(b,111)].
285 INCH(f3(x,x,f2(x,x)),x).  [resolve(119,b,76,a)].
315 INCH(x,f3(x,x,f2(x,x))).  [resolve(144,b,76,a)].
1248 $F.  [resolve(285,a,140,b),unit_del(a,76),unit_del(b,315)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=139. Generated=2539. Kept=1189. proofs=1.
Usable=138. Sos=1034. Demods=0. Limbo=4, Disabled=99. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=1349. Back_subsumed=8.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=5.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=29249. Nonunit_bsub_feature_tests=9885.
Megabytes=2.19.
User_CPU=0.50, System_CPU=0.01, Wall_clock=1.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 23581 exit (max_proofs) Tue May 22 11:16:24 2012
