============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 30303 was started by cchui on stl-ws2,
Fri Jul 19 00:47:30 2013
The command was "prover9 -t 600 -f test/p9/cem_mereology.p9 test/p9/dolce_time_mereology_reduction.p9 test/p9/cm_mereology.p9 test/p9/em_mereology.p9 test/p9/mereology_def.p9 test/p9/sum_mereology.p9 test/p9/prod_mereology.p9 test/p9/m_mereology.p9 test/p9/options.txt test/p9/ex0718_reduction_1.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file test/p9/cem_mereology.p9


formulas(sos).
end_of_list.

% Reading from file test/p9/dolce_time_mereology_reduction.p9


formulas(sos).
(all x (T(x) <-> x = x)).
(all x all y (P(x,y) <-> part(x,y))).
(all x all y (PP(x,y) <-> ppart(x,y))).
(all x all y (O(x,y) <-> overlaps(x,y))).
(all x all y (U(x,y) <-> underlaps(x,y))).
end_of_list.

% Reading from file test/p9/cm_mereology.p9


formulas(sos).
end_of_list.

% Reading from file test/p9/em_mereology.p9


formulas(sos).
(all x all y (-part(x,y) -> (exists z (part(z,x) & disjoint(z,y))))).
end_of_list.

% Reading from file test/p9/mereology_def.p9


formulas(sos).
(all x all y (ppart(x,y) <-> part(x,y) & -part(y,x))).
(all x all y (overlaps(x,y) <-> (exists z (part(z,x) & part(z,y))))).
(all x all y (disjoint(x,y) <-> -overlaps(x,y))).
(all x all y (underlaps(x,y) <-> (exists z (part(x,z) & part(y,z))))).
(all x (atomic_part(x) <-> (all y (part(y,x) -> y = x)))).
(all x all y all z (sum(x,y,z) <-> (all w (overlaps(w,z) <-> overlaps(w,x) | overlaps(w,y))))).
(all x all y all z (prod(x,y,z) <-> (all w (part(w,z) <-> part(w,x) | part(w,y))))).
end_of_list.

% Reading from file test/p9/sum_mereology.p9


formulas(sos).
(all x all y (underlaps(x,y) -> (exists z all v (overlaps(v,z) <-> overlaps(v,x) | overlaps(v,y))))).
end_of_list.

% Reading from file test/p9/prod_mereology.p9


formulas(sos).
(all x all y (overlaps(x,y) -> (exists z all v (ppart(v,z) <-> ppart(v,x) & ppart(v,y))))).
end_of_list.

% Reading from file test/p9/m_mereology.p9


formulas(sos).
(all x part(x,x)).
(all x all y (part(x,y) & part(y,x) -> x = y)).
(all x all y all z (part(x,y) & part(y,z) -> part(x,z))).
end_of_list.

% Reading from file test/p9/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file test/p9/ex0718_reduction_1.p9


formulas(goals).
(all x all y (P(x,y) -> T(y) & T(y))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x (T(x) <-> x = x)) # label(non_clause).  [assumption].
2 (all x all y (P(x,y) <-> part(x,y))) # label(non_clause).  [assumption].
3 (all x all y (PP(x,y) <-> ppart(x,y))) # label(non_clause).  [assumption].
4 (all x all y (O(x,y) <-> overlaps(x,y))) # label(non_clause).  [assumption].
5 (all x all y (U(x,y) <-> underlaps(x,y))) # label(non_clause).  [assumption].
6 (all x all y (-part(x,y) -> (exists z (part(z,x) & disjoint(z,y))))) # label(non_clause).  [assumption].
7 (all x all y (ppart(x,y) <-> part(x,y) & -part(y,x))) # label(non_clause).  [assumption].
8 (all x all y (overlaps(x,y) <-> (exists z (part(z,x) & part(z,y))))) # label(non_clause).  [assumption].
9 (all x all y (disjoint(x,y) <-> -overlaps(x,y))) # label(non_clause).  [assumption].
10 (all x all y (underlaps(x,y) <-> (exists z (part(x,z) & part(y,z))))) # label(non_clause).  [assumption].
11 (all x (atomic_part(x) <-> (all y (part(y,x) -> y = x)))) # label(non_clause).  [assumption].
12 (all x all y all z (sum(x,y,z) <-> (all w (overlaps(w,z) <-> overlaps(w,x) | overlaps(w,y))))) # label(non_clause).  [assumption].
13 (all x all y all z (prod(x,y,z) <-> (all w (part(w,z) <-> part(w,x) | part(w,y))))) # label(non_clause).  [assumption].
14 (all x all y (underlaps(x,y) -> (exists z all v (overlaps(v,z) <-> overlaps(v,x) | overlaps(v,y))))) # label(non_clause).  [assumption].
15 (all x all y (overlaps(x,y) -> (exists z all v (ppart(v,z) <-> ppart(v,x) & ppart(v,y))))) # label(non_clause).  [assumption].
16 (all x part(x,x)) # label(non_clause).  [assumption].
17 (all x all y (part(x,y) & part(y,x) -> x = y)) # label(non_clause).  [assumption].
18 (all x all y all z (part(x,y) & part(y,z) -> part(x,z))) # label(non_clause).  [assumption].
19 (all x all y (P(x,y) -> T(y) & T(y))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating P/2
20 P(x,y) | -part(x,y).  [clausify(2)].
21 -P(x,y) | part(x,y).  [clausify(2)].
22 P(c1,c2).  [deny(19)].
Derived: part(c1,c2).  [resolve(22,a,21,a)].

Eliminating PP/2
23 PP(x,y) | -ppart(x,y).  [clausify(3)].
24 -PP(x,y) | ppart(x,y).  [clausify(3)].

Eliminating O/2
25 O(x,y) | -overlaps(x,y).  [clausify(4)].
26 -O(x,y) | overlaps(x,y).  [clausify(4)].

Eliminating U/2
27 U(x,y) | -underlaps(x,y).  [clausify(5)].
28 -U(x,y) | underlaps(x,y).  [clausify(5)].

Eliminating disjoint/2
29 -disjoint(x,y) | -overlaps(x,y).  [clausify(9)].
30 part(x,y) | disjoint(f1(x,y),y).  [clausify(6)].
Derived: -overlaps(f1(x,y),y) | part(x,y).  [resolve(29,a,30,b)].
31 disjoint(x,y) | overlaps(x,y).  [clausify(9)].

Eliminating underlaps/2
32 underlaps(x,y) | -part(x,z) | -part(y,z).  [clausify(10)].
33 -underlaps(x,y) | part(x,f3(x,y)).  [clausify(10)].
34 -underlaps(x,y) | part(y,f3(x,y)).  [clausify(10)].
Derived: -part(x,y) | -part(z,y) | part(x,f3(x,z)).  [resolve(32,a,33,a)].
Derived: -part(x,y) | -part(z,y) | part(z,f3(x,z)).  [resolve(32,a,34,a)].
35 -underlaps(x,y) | -overlaps(z,f7(x,y)) | overlaps(z,x) | overlaps(z,y).  [clausify(14)].
Derived: -overlaps(x,f7(y,z)) | overlaps(x,y) | overlaps(x,z) | -part(y,u) | -part(z,u).  [resolve(35,a,32,a)].
36 -underlaps(x,y) | overlaps(z,f7(x,y)) | -overlaps(z,x).  [clausify(14)].
Derived: overlaps(x,f7(y,z)) | -overlaps(x,y) | -part(y,u) | -part(z,u).  [resolve(36,a,32,a)].
37 -underlaps(x,y) | overlaps(z,f7(x,y)) | -overlaps(z,y).  [clausify(14)].
Derived: overlaps(x,f7(y,z)) | -overlaps(x,z) | -part(y,u) | -part(z,u).  [resolve(37,a,32,a)].

Eliminating atomic_part/1
38 atomic_part(x) | part(f4(x),x).  [clausify(11)].
39 -atomic_part(x) | -part(y,x) | y = x.  [clausify(11)].
Derived: part(f4(x),x) | -part(y,x) | y = x.  [resolve(38,a,39,a)].
40 atomic_part(x) | f4(x) != x.  [clausify(11)].
Derived: f4(x) != x | -part(y,x) | y = x.  [resolve(40,a,39,a)].

Eliminating sum/3
41 sum(x,y,z) | overlaps(f5(x,y,z),z) | overlaps(f5(x,y,z),x) | overlaps(f5(x,y,z),y).  [clausify(12)].
42 -sum(x,y,z) | -overlaps(u,z) | overlaps(u,x) | overlaps(u,y).  [clausify(12)].
43 -sum(x,y,z) | overlaps(u,z) | -overlaps(u,x).  [clausify(12)].
44 -sum(x,y,z) | overlaps(u,z) | -overlaps(u,y).  [clausify(12)].
Derived: overlaps(f5(x,y,z),z) | overlaps(f5(x,y,z),x) | overlaps(f5(x,y,z),y) | -overlaps(u,z) | overlaps(u,x) | overlaps(u,y).  [resolve(41,a,42,a)].
Derived: overlaps(f5(x,y,z),z) | overlaps(f5(x,y,z),x) | overlaps(f5(x,y,z),y) | overlaps(u,z) | -overlaps(u,x).  [resolve(41,a,43,a)].
Derived: overlaps(f5(x,y,z),z) | overlaps(f5(x,y,z),x) | overlaps(f5(x,y,z),y) | overlaps(u,z) | -overlaps(u,y).  [resolve(41,a,44,a)].
45 sum(x,y,z) | -overlaps(f5(x,y,z),z) | -overlaps(f5(x,y,z),x).  [clausify(12)].
Derived: -overlaps(f5(x,y,z),z) | -overlaps(f5(x,y,z),x) | -overlaps(u,z) | overlaps(u,x) | overlaps(u,y).  [resolve(45,a,42,a)].
Derived: -overlaps(f5(x,y,z),z) | -overlaps(f5(x,y,z),x) | overlaps(u,z) | -overlaps(u,x).  [resolve(45,a,43,a)].
Derived: -overlaps(f5(x,y,z),z) | -overlaps(f5(x,y,z),x) | overlaps(u,z) | -overlaps(u,y).  [resolve(45,a,44,a)].
46 sum(x,y,z) | -overlaps(f5(x,y,z),z) | -overlaps(f5(x,y,z),y).  [clausify(12)].
Derived: -overlaps(f5(x,y,z),z) | -overlaps(f5(x,y,z),y) | -overlaps(u,z) | overlaps(u,x) | overlaps(u,y).  [resolve(46,a,42,a)].
Derived: -overlaps(f5(x,y,z),z) | -overlaps(f5(x,y,z),y) | overlaps(u,z) | -overlaps(u,x).  [resolve(46,a,43,a)].
Derived: -overlaps(f5(x,y,z),z) | -overlaps(f5(x,y,z),y) | overlaps(u,z) | -overlaps(u,y).  [resolve(46,a,44,a)].

Eliminating prod/3
47 prod(x,y,z) | part(f6(x,y,z),z) | part(f6(x,y,z),x) | part(f6(x,y,z),y).  [clausify(13)].
48 -prod(x,y,z) | -part(u,z) | part(u,x) | part(u,y).  [clausify(13)].
49 -prod(x,y,z) | part(u,z) | -part(u,x).  [clausify(13)].
50 -prod(x,y,z) | part(u,z) | -part(u,y).  [clausify(13)].
Derived: part(f6(x,y,z),z) | part(f6(x,y,z),x) | part(f6(x,y,z),y) | -part(u,z) | part(u,x) | part(u,y).  [resolve(47,a,48,a)].
Derived: part(f6(x,y,z),z) | part(f6(x,y,z),x) | part(f6(x,y,z),y) | part(u,z) | -part(u,x).  [resolve(47,a,49,a)].
Derived: part(f6(x,y,z),z) | part(f6(x,y,z),x) | part(f6(x,y,z),y) | part(u,z) | -part(u,y).  [resolve(47,a,50,a)].
51 prod(x,y,z) | -part(f6(x,y,z),z) | -part(f6(x,y,z),x).  [clausify(13)].
Derived: -part(f6(x,y,z),z) | -part(f6(x,y,z),x) | -part(u,z) | part(u,x) | part(u,y).  [resolve(51,a,48,a)].
Derived: -part(f6(x,y,z),z) | -part(f6(x,y,z),x) | part(u,z) | -part(u,x).  [resolve(51,a,49,a)].
Derived: -part(f6(x,y,z),z) | -part(f6(x,y,z),x) | part(u,z) | -part(u,y).  [resolve(51,a,50,a)].
52 prod(x,y,z) | -part(f6(x,y,z),z) | -part(f6(x,y,z),y).  [clausify(13)].
Derived: -part(f6(x,y,z),z) | -part(f6(x,y,z),y) | -part(u,z) | part(u,x) | part(u,y).  [resolve(52,a,48,a)].
Derived: -part(f6(x,y,z),z) | -part(f6(x,y,z),y) | part(u,z) | -part(u,x).  [resolve(52,a,49,a)].
Derived: -part(f6(x,y,z),z) | -part(f6(x,y,z),y) | part(u,z) | -part(u,y).  [resolve(52,a,50,a)].

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, T, part, overlaps, ppart ]).
Function symbol precedence:  function_order([ c1, c2, f1, f2, f3, f7, f8, f4, f5, f6 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== PROOF =================================

% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 6.
% Level of proof is 3.
% Maximum clause weight is 2.000.
% Given clauses 0.

1 (all x (T(x) <-> x = x)) # label(non_clause).  [assumption].
19 (all x all y (P(x,y) -> T(y) & T(y))) # label(non_clause) # label(goal).  [goal].
53 T(x) | x != x.  [clausify(1)].
54 T(x).  [copy(53),xx(b)].
68 -T(c2).  [deny(19)].
69 $F.  [copy(68),unit_del(a,54)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=0. Generated=16. Kept=14. proofs=1.
Usable=0. Sos=0. Demods=0. Limbo=14, Disabled=49. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=1. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=2. Nonunit_bsub_feature_tests=0.
Megabytes=0.12.
User_CPU=0.01, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 30303 exit (max_proofs) Fri Jul 19 00:47:30 2013
