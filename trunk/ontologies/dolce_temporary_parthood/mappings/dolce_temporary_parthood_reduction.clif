 /*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 3.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/3.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger, Carmen Chui
 *******************************************************************************/
 
(cl-text dolce_temporary_parthood_reduction

(cl-comment "Translation definition for ideal_cem_downward_m_foliation, ideal_cem_wmg, taxonomy into dolce_temporary_parthood.")

(forall (x y z)
	(iff (tP x y z)
		(and (tpart x y z)
			(L_1 x)
			(L_1 y)
			(iff (L_4 x)(L_4 y))
			(iff (L_5 x)(L_5 y)))))

(forall (x y)
	(iff (PRE x y)
		(or (and (in1 y x)(point1 y)(line1 x))
			(and (in2 y x)(point2 y)(line2 x)))))

(forall (x)
	(iff (T x)
		(and (point1 x)(point2 x))))

(forall (x)
	(iff (ED x)
		(and (line1 x)(L_1 x))))

(forall (x)
	(iff (PD x)
		(and (line2 x)(L_2 x))))

(forall (x)
	(iff (Q x)
		(and (line2 x)(L_3 x))))

(forall (x)
	(iff (PED x)
		(and (line1 x)(L_4 x))))

(forall (x)
	(iff (NPED x)
		(and (line1 x)(L_5 x))))
		
(forall (x y)
	(iff (P x y)
		(or (part1 x y)(part2 x y))))

(cl-comment "Additional translation definitions for relations")
(forall (x y)
	(iff (PP x y)
		(ppart x y)))

(forall (x y)
	(iff (O x y)
		(overlaps x y)))

(forall (x y)
	(iff (U x y)
		(underlaps x y)))

(forall (x y)
	(iff (DJ x y)
		(disjoint x y)))

(forall (x y z)
	(iff (SUM z x y)
		(sum x y z)))

(cl-comment "Mereological Definitions from cm_mereology in COLORE")
(cl-comment "Source: mereology_def in COLORE with added time argument")
(forall (x y t)
	(iff	(tPP x y t)
		(and	(tP x y t)
			(not (tP y x t)))))

(forall (x y t)
	(iff    (tO x y t)
		(exists (z)
			(and (tP z x t)
				(tP z y t)))))

(forall (x y t)
	(iff    (tDJ x y t)
		(not (tO x y t))))

(forall (x y t)
	(iff    (tU x y t)
		(exists (z)
			(and (tP x z t)
				(tP y z t)))))

(forall (x t)
	(iff	(tAtP x t)
		(forall (y)
			(if	(tP y x t)
				(= y x)))))

)