============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 12511 was started by cchui on stl1.mie.utoronto.ca,
Tue Jul 16 13:11:51 2013
The command was "prover9 -t 600 -f test/p9/dolce_temporary_parthood.p9 test/p9/dolce_temporary_parthood2ideal_cem_downward_m_foliation.p9 test/p9/dolce_present.p9 test/p9/dolce_time_mereology.p9 test/p9/dolce_taxonomy.p9 test/p9/options.txt test/p9/ex0715_temporary_parthood1_27.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file test/p9/dolce_temporary_parthood.p9


formulas(sos).
(all x all y all t (tP(x,y,t) -> ED(x) & ED(y) & T(t))).
(all x all y all t (tP(x,y,t) -> (PED(x) <-> PED(y)))).
(all x all y all t (tP(x,y,t) -> (NPED(x) <-> NPED(y)))).
(all x all y all z all t (tP(x,y,t) & tP(y,z,t) -> tP(x,z,t))).
(all x all y all z all t (ED(x) & ED(y) & PRE(x,t) & PRE(y,t) & -tP(x,y,t) -> (exists z (tP(z,x,t) & -tO(z,y,t))))).
(all x all t (ED(x) & PRE(x,t) -> tP(x,x,t))).
(all x all y all t (tP(x,y,t) -> PRE(x,t) & PRE(y,t))).
(all x all y all t1 (tP(x,y,t1) -> (all t2 (P(t2,t1) -> tP(x,y,t2))))).
(all x all y all t (PRE(x,t) & PRE(y,t) & -tP(x,y,t) -> (exists z (tP(z,x,t) & tDJ(z,y,t))))).
(all x all y all t (tPP(x,y,t) <-> tP(x,y,t) & -tP(y,x,t))).
(all x all y all t (tO(x,y,t) <-> (exists z (tP(z,x,t) & tP(z,y,t))))).
(all x all y all t (tDJ(x,y,t) <-> -tO(x,y,t))).
(all x all y all t (tU(x,y,t) <-> (exists z (tP(x,z,t) & tP(y,z,t))))).
(all x all t (tAtP(x,t) <-> (all y (tP(y,x,t) -> y = x)))).
(all x all y all t (tU(x,y,t) -> (exists z all v (tO(v,z,t) <-> tO(v,x,t) | tO(v,y,t))))).
(all x all y all t (tO(x,y,t) -> (exists z all v (tPP(v,z,t) <-> tPP(v,x,t) & tPP(v,y,t))))).
end_of_list.

% Reading from file test/p9/dolce_temporary_parthood2ideal_cem_downward_m_foliation.p9


formulas(sos).
(all x all y (part1(x,y) <-> P(x,y) & T(x) & T(y))).
(all x all y (in1(x,y) <-> PRE(x,y) & T(y) & ED(x) | PRE(y,x) & T(x) & ED(y) | x = y & (ED(y) | T(y)))).
(all x (point1(x) <-> T(x))).
(all x (line1(x) <-> ED(x))).
(all x all y all z (tpart1(x,y,z) <-> tP(x,y,z))).
(all x (L_1(x) <-> ED(x))).
(all x (L_2(x) <-> PD(x))).
(all x (L_3(x) <-> Q(x))).
(all x (L_4(x) <-> PED(x))).
(all x (L_5(x) <-> NPED(x))).
(all x all y (ppart(x,y) <-> PP(x,y) & T(x) & T(y))).
(all x all y (overlaps(x,y) <-> O(x,y) & T(x) & T(y))).
(all x all y (underlaps(x,y) <-> U(x,y) & T(x) & T(y))).
(all x all y (disjoint(x,y) <-> DJ(x,y) & T(x) & T(y))).
(all x all y all z (sum(x,y,z) -> SUM(z,x,y) & T(z) & T(x) & T(y))).
(all x all y all t (tppart(x,y,t) -> tPP(x,y,t))).
(all x all y all t (toverlaps(x,y,t) -> tO(x,y,t))).
(all x all y all t (tunderlaps(x,y,t) -> tU(x,y,t))).
(all x all y all t (tdisjoint(x,y,t) -> tDJ(x,y,t))).
end_of_list.

% Reading from file test/p9/dolce_present.p9


formulas(sos).
(all x (ED(x) | PD(x) | Q(x) -> (exists t PRE(x,t)))).
(all x all t all t1 (PRE(x,t) & P(t1,t) -> PRE(x,t1))).
(all x all t (PRE(x,t) -> T(t))).
(all x all t all t1 all t2 (PRE(x,t1) & PRE(x,t2) & SUM(t,t1,t2) -> PRE(x,t))).
end_of_list.

% Reading from file test/p9/dolce_time_mereology.p9


formulas(sos).
(all x all y (P(x,y) -> T(y) & T(y))).
(all x all y (P(x,y) -> (T(x) <-> T(y)))).
(all x all y (T(x) -> P(x,x))).
(all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)).
(all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & DJ(z,y) & T(z))))).
(all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))).
(all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))).
(all x all y (T(x) & T(y) -> (DJ(x,y) <-> -O(x,y)))).
(all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))).
(all x (AtP(x) <-> T(x) & (all y (T(y) & P(y,x) -> y = x)))).
(all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))).
(all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))).
(all x all y all z (T(x) & T(y) & T(z) -> (SUM(z,x,y) <-> (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y))))))).
end_of_list.

% Reading from file test/p9/dolce_taxonomy.p9


formulas(sos).
(all x (ED(x) | PD(x) | Q(x) | AB(x) -> PT(x))).
(all x (PED(x) | NPED(x) | AS(x) -> ED(x))).
(all x (EV(x) | STV(x) -> PD(x))).
(all x (TQ(x) | PQ(x) | AQ(x) -> Q(x))).
(all x (R(x) -> AB(x))).
(all x (M(x) | F(x) | POB(x) -> PED(x))).
(all x (NPOB(x) -> NPED(x))).
(all x (ACH(x) | ACC(x) -> EV(x))).
(all x (ST(x) | PRO(x) -> STV(x))).
(all x (TL(x) -> TQ(x))).
(all x (SL(x) -> PQ(x))).
(all x (TR(x) | PR(x) | AR(x) -> R(x))).
(all x (APO(x) | NAPO(x) -> POB(x))).
(all x (MOB(x) | SOB(x) -> NPOB(x))).
(all x (T(x) -> TR(x))).
(all x (S(x) -> PR(x))).
(all x (ASO(x) | NASO(x) -> SOB(x))).
(all x (SAG(x) | SC(x) -> ASO(x))).
(all x (PT(x) <-> ED(x) | PD(x) | Q(x) | AB(x))).
(all x (ED(x) -> -PD(x) & -Q(x) & -AB(x))).
(all x (PD(x) -> -Q(x) & -AB(x))).
(all x (Q(x) -> -AB(x))).
(all x (ED(x) <-> PED(x) | NPED(x) | AS(x))).
(all x (PED(x) -> -NPED(x) & -AS(x))).
(all x (NPED(x) -> -AS(x))).
(all x (PD(x) <-> EV(x) | STV(x))).
(all x (EV(x) -> -STV(x))).
(all x (Q(x) <-> TQ(x) | PQ(x) | AQ(x))).
(all x (TQ(x) -> -PQ(x) & -AQ(x))).
(all x (PQ(x) -> -AQ(x))).
(all x (PED(x) <-> M(x) | F(x) | POB(x))).
(all x (M(x) -> -F(x) & -POB(x))).
(all x (F(x) -> -POB(x))).
(all x (EV(x) <-> ACH(x) | ACC(x))).
(all x (ACH(x) -> -ACC(x))).
(all x (STV(x) <-> ST(x) | PRO(x))).
(all x (ST(x) -> -PRO(x))).
(all x (R(x) <-> TR(x) | PR(x) | AR(x))).
(all x (TR(x) -> -PR(x) & -AR(x))).
(all x (PR(x) -> -AR(x))).
(all x (POB(x) <-> APO(x) | NAPO(x))).
(all x (APO(x) -> -NAPO(x))).
(all x (NPOB(x) <-> MOB(x) | SOB(x))).
(all x (MOB(x) -> -SOB(x))).
(all x (SOB(x) <-> ASO(x) | NASO(x))).
(all x (ASO(x) -> -NASO(x))).
(all x (ASO(x) <-> SAG(x) | SC(x))).
(all x (SAG(x) -> -SC(x))).
end_of_list.

% Reading from file test/p9/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file test/p9/ex0715_temporary_parthood1_27.p9


formulas(goals).
(all x all y all p1 all p1 (tpart(x,y,p1) & part1(p1,p1) -> tpart(x,y,p1))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y all t (tP(x,y,t) -> ED(x) & ED(y) & T(t))) # label(non_clause).  [assumption].
2 (all x all y all t (tP(x,y,t) -> (PED(x) <-> PED(y)))) # label(non_clause).  [assumption].
3 (all x all y all t (tP(x,y,t) -> (NPED(x) <-> NPED(y)))) # label(non_clause).  [assumption].
4 (all x all y all z all t (tP(x,y,t) & tP(y,z,t) -> tP(x,z,t))) # label(non_clause).  [assumption].
5 (all x all y all z all t (ED(x) & ED(y) & PRE(x,t) & PRE(y,t) & -tP(x,y,t) -> (exists z (tP(z,x,t) & -tO(z,y,t))))) # label(non_clause).  [assumption].
6 (all x all t (ED(x) & PRE(x,t) -> tP(x,x,t))) # label(non_clause).  [assumption].
7 (all x all y all t (tP(x,y,t) -> PRE(x,t) & PRE(y,t))) # label(non_clause).  [assumption].
8 (all x all y all t1 (tP(x,y,t1) -> (all t2 (P(t2,t1) -> tP(x,y,t2))))) # label(non_clause).  [assumption].
9 (all x all y all t (PRE(x,t) & PRE(y,t) & -tP(x,y,t) -> (exists z (tP(z,x,t) & tDJ(z,y,t))))) # label(non_clause).  [assumption].
10 (all x all y all t (tPP(x,y,t) <-> tP(x,y,t) & -tP(y,x,t))) # label(non_clause).  [assumption].
11 (all x all y all t (tO(x,y,t) <-> (exists z (tP(z,x,t) & tP(z,y,t))))) # label(non_clause).  [assumption].
12 (all x all y all t (tDJ(x,y,t) <-> -tO(x,y,t))) # label(non_clause).  [assumption].
13 (all x all y all t (tU(x,y,t) <-> (exists z (tP(x,z,t) & tP(y,z,t))))) # label(non_clause).  [assumption].
14 (all x all t (tAtP(x,t) <-> (all y (tP(y,x,t) -> y = x)))) # label(non_clause).  [assumption].
15 (all x all y all t (tU(x,y,t) -> (exists z all v (tO(v,z,t) <-> tO(v,x,t) | tO(v,y,t))))) # label(non_clause).  [assumption].
16 (all x all y all t (tO(x,y,t) -> (exists z all v (tPP(v,z,t) <-> tPP(v,x,t) & tPP(v,y,t))))) # label(non_clause).  [assumption].
17 (all x all y (part1(x,y) <-> P(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
18 (all x all y (in1(x,y) <-> PRE(x,y) & T(y) & ED(x) | PRE(y,x) & T(x) & ED(y) | x = y & (ED(y) | T(y)))) # label(non_clause).  [assumption].
19 (all x (point1(x) <-> T(x))) # label(non_clause).  [assumption].
20 (all x (line1(x) <-> ED(x))) # label(non_clause).  [assumption].
21 (all x all y all z (tpart1(x,y,z) <-> tP(x,y,z))) # label(non_clause).  [assumption].
22 (all x (L_1(x) <-> ED(x))) # label(non_clause).  [assumption].
23 (all x (L_2(x) <-> PD(x))) # label(non_clause).  [assumption].
24 (all x (L_3(x) <-> Q(x))) # label(non_clause).  [assumption].
25 (all x (L_4(x) <-> PED(x))) # label(non_clause).  [assumption].
26 (all x (L_5(x) <-> NPED(x))) # label(non_clause).  [assumption].
27 (all x all y (ppart(x,y) <-> PP(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
28 (all x all y (overlaps(x,y) <-> O(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
29 (all x all y (underlaps(x,y) <-> U(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
30 (all x all y (disjoint(x,y) <-> DJ(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
31 (all x all y all z (sum(x,y,z) -> SUM(z,x,y) & T(z) & T(x) & T(y))) # label(non_clause).  [assumption].
32 (all x all y all t (tppart(x,y,t) -> tPP(x,y,t))) # label(non_clause).  [assumption].
33 (all x all y all t (toverlaps(x,y,t) -> tO(x,y,t))) # label(non_clause).  [assumption].
34 (all x all y all t (tunderlaps(x,y,t) -> tU(x,y,t))) # label(non_clause).  [assumption].
35 (all x all y all t (tdisjoint(x,y,t) -> tDJ(x,y,t))) # label(non_clause).  [assumption].
36 (all x (ED(x) | PD(x) | Q(x) -> (exists t PRE(x,t)))) # label(non_clause).  [assumption].
37 (all x all t all t1 (PRE(x,t) & P(t1,t) -> PRE(x,t1))) # label(non_clause).  [assumption].
38 (all x all t (PRE(x,t) -> T(t))) # label(non_clause).  [assumption].
39 (all x all t all t1 all t2 (PRE(x,t1) & PRE(x,t2) & SUM(t,t1,t2) -> PRE(x,t))) # label(non_clause).  [assumption].
40 (all x all y (P(x,y) -> T(y) & T(y))) # label(non_clause).  [assumption].
41 (all x all y (P(x,y) -> (T(x) <-> T(y)))) # label(non_clause).  [assumption].
42 (all x all y (T(x) -> P(x,x))) # label(non_clause).  [assumption].
43 (all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)) # label(non_clause).  [assumption].
44 (all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))) # label(non_clause).  [assumption].
45 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))) # label(non_clause).  [assumption].
46 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & DJ(z,y) & T(z))))) # label(non_clause).  [assumption].
47 (all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))) # label(non_clause).  [assumption].
48 (all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))) # label(non_clause).  [assumption].
49 (all x all y (T(x) & T(y) -> (DJ(x,y) <-> -O(x,y)))) # label(non_clause).  [assumption].
50 (all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))) # label(non_clause).  [assumption].
51 (all x (AtP(x) <-> T(x) & (all y (T(y) & P(y,x) -> y = x)))) # label(non_clause).  [assumption].
52 (all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))) # label(non_clause).  [assumption].
53 (all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))) # label(non_clause).  [assumption].
54 (all x all y all z (T(x) & T(y) & T(z) -> (SUM(z,x,y) <-> (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y))))))) # label(non_clause).  [assumption].
55 (all x (ED(x) | PD(x) | Q(x) | AB(x) -> PT(x))) # label(non_clause).  [assumption].
56 (all x (PED(x) | NPED(x) | AS(x) -> ED(x))) # label(non_clause).  [assumption].
57 (all x (EV(x) | STV(x) -> PD(x))) # label(non_clause).  [assumption].
58 (all x (TQ(x) | PQ(x) | AQ(x) -> Q(x))) # label(non_clause).  [assumption].
59 (all x (R(x) -> AB(x))) # label(non_clause).  [assumption].
60 (all x (M(x) | F(x) | POB(x) -> PED(x))) # label(non_clause).  [assumption].
61 (all x (NPOB(x) -> NPED(x))) # label(non_clause).  [assumption].
62 (all x (ACH(x) | ACC(x) -> EV(x))) # label(non_clause).  [assumption].
63 (all x (ST(x) | PRO(x) -> STV(x))) # label(non_clause).  [assumption].
64 (all x (TL(x) -> TQ(x))) # label(non_clause).  [assumption].
65 (all x (SL(x) -> PQ(x))) # label(non_clause).  [assumption].
66 (all x (TR(x) | PR(x) | AR(x) -> R(x))) # label(non_clause).  [assumption].
67 (all x (APO(x) | NAPO(x) -> POB(x))) # label(non_clause).  [assumption].
68 (all x (MOB(x) | SOB(x) -> NPOB(x))) # label(non_clause).  [assumption].
69 (all x (T(x) -> TR(x))) # label(non_clause).  [assumption].
70 (all x (S(x) -> PR(x))) # label(non_clause).  [assumption].
71 (all x (ASO(x) | NASO(x) -> SOB(x))) # label(non_clause).  [assumption].
72 (all x (SAG(x) | SC(x) -> ASO(x))) # label(non_clause).  [assumption].
73 (all x (PT(x) <-> ED(x) | PD(x) | Q(x) | AB(x))) # label(non_clause).  [assumption].
74 (all x (ED(x) -> -PD(x) & -Q(x) & -AB(x))) # label(non_clause).  [assumption].
75 (all x (PD(x) -> -Q(x) & -AB(x))) # label(non_clause).  [assumption].
76 (all x (Q(x) -> -AB(x))) # label(non_clause).  [assumption].
77 (all x (ED(x) <-> PED(x) | NPED(x) | AS(x))) # label(non_clause).  [assumption].
78 (all x (PED(x) -> -NPED(x) & -AS(x))) # label(non_clause).  [assumption].
79 (all x (NPED(x) -> -AS(x))) # label(non_clause).  [assumption].
80 (all x (PD(x) <-> EV(x) | STV(x))) # label(non_clause).  [assumption].
81 (all x (EV(x) -> -STV(x))) # label(non_clause).  [assumption].
82 (all x (Q(x) <-> TQ(x) | PQ(x) | AQ(x))) # label(non_clause).  [assumption].
83 (all x (TQ(x) -> -PQ(x) & -AQ(x))) # label(non_clause).  [assumption].
84 (all x (PQ(x) -> -AQ(x))) # label(non_clause).  [assumption].
85 (all x (PED(x) <-> M(x) | F(x) | POB(x))) # label(non_clause).  [assumption].
86 (all x (M(x) -> -F(x) & -POB(x))) # label(non_clause).  [assumption].
87 (all x (F(x) -> -POB(x))) # label(non_clause).  [assumption].
88 (all x (EV(x) <-> ACH(x) | ACC(x))) # label(non_clause).  [assumption].
89 (all x (ACH(x) -> -ACC(x))) # label(non_clause).  [assumption].
90 (all x (STV(x) <-> ST(x) | PRO(x))) # label(non_clause).  [assumption].
91 (all x (ST(x) -> -PRO(x))) # label(non_clause).  [assumption].
92 (all x (R(x) <-> TR(x) | PR(x) | AR(x))) # label(non_clause).  [assumption].
93 (all x (TR(x) -> -PR(x) & -AR(x))) # label(non_clause).  [assumption].
94 (all x (PR(x) -> -AR(x))) # label(non_clause).  [assumption].
95 (all x (POB(x) <-> APO(x) | NAPO(x))) # label(non_clause).  [assumption].
96 (all x (APO(x) -> -NAPO(x))) # label(non_clause).  [assumption].
97 (all x (NPOB(x) <-> MOB(x) | SOB(x))) # label(non_clause).  [assumption].
98 (all x (MOB(x) -> -SOB(x))) # label(non_clause).  [assumption].
99 (all x (SOB(x) <-> ASO(x) | NASO(x))) # label(non_clause).  [assumption].
100 (all x (ASO(x) -> -NASO(x))) # label(non_clause).  [assumption].
101 (all x (ASO(x) <-> SAG(x) | SC(x))) # label(non_clause).  [assumption].
102 (all x (SAG(x) -> -SC(x))) # label(non_clause).  [assumption].
103 (all x all y all p1 all p1 (tpart(x,y,p1) & part1(p1,p1) -> tpart(x,y,p1))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating tDJ/3
104 -tDJ(x,y,z) | -tO(x,y,z).  [clausify(12)].
105 -PRE(x,y) | -PRE(z,y) | tP(x,z,y) | tDJ(f2(x,z,y),z,y).  [clausify(9)].
106 tDJ(x,y,z) | tO(x,y,z).  [clausify(12)].
107 -tdisjoint(x,y,z) | tDJ(x,y,z).  [clausify(35)].

Eliminating tU/3
108 tU(x,y,z) | -tP(x,u,z) | -tP(y,u,z).  [clausify(13)].
109 -tU(x,y,z) | tP(x,f4(x,y,z),z).  [clausify(13)].
110 -tU(x,y,z) | tP(y,f4(x,y,z),z).  [clausify(13)].
111 -tU(x,y,z) | -tO(u,f6(x,y,z),z) | tO(u,x,z) | tO(u,y,z).  [clausify(15)].
112 -tU(x,y,z) | tO(u,f6(x,y,z),z) | -tO(u,x,z).  [clausify(15)].
113 -tU(x,y,z) | tO(u,f6(x,y,z),z) | -tO(u,y,z).  [clausify(15)].
114 -tunderlaps(x,y,z) | tU(x,y,z).  [clausify(34)].

Eliminating tAtP/2
115 tAtP(x,y) | tP(f5(x,y),x,y).  [clausify(14)].
116 -tAtP(x,y) | -tP(z,x,y) | z = x.  [clausify(14)].
117 tAtP(x,y) | f5(x,y) != x.  [clausify(14)].

Eliminating part1/2
118 part1(x,y) | -P(x,y) | -T(x) | -T(y).  [clausify(17)].
119 -part1(x,y) | P(x,y).  [clausify(17)].
120 -part1(x,y) | T(x).  [clausify(17)].
121 -part1(x,y) | T(y).  [clausify(17)].

Eliminating in1/2
122 in1(x,y) | -PRE(x,y) | -T(y) | -ED(x).  [clausify(18)].
123 -in1(x,y) | PRE(x,y) | PRE(y,x) | y = x.  [clausify(18)].
124 -in1(x,y) | PRE(x,y) | T(x) | y = x.  [clausify(18)].
125 -in1(x,y) | PRE(x,y) | ED(y) | y = x.  [clausify(18)].
126 -in1(x,y) | T(y) | PRE(y,x) | y = x.  [clausify(18)].
127 -in1(x,y) | T(y) | T(x) | y = x.  [clausify(18)].
128 -in1(x,y) | T(y) | ED(y).  [clausify(18)].
129 -in1(x,y) | ED(x) | PRE(y,x) | y = x.  [clausify(18)].
130 -in1(x,y) | ED(x) | T(x) | y = x.  [clausify(18)].
131 -in1(x,y) | ED(x) | ED(y) | y = x.  [clausify(18)].
132 in1(x,y) | -PRE(y,x) | -T(x) | -ED(y).  [clausify(18)].
133 in1(x,y) | y != x | -ED(y).  [clausify(18)].
134 in1(x,y) | y != x | -T(y).  [clausify(18)].

Eliminating point1/1
135 point1(x) | -T(x).  [clausify(19)].
136 -point1(x) | T(x).  [clausify(19)].

Eliminating line1/1
137 line1(x) | -ED(x).  [clausify(20)].
138 -line1(x) | ED(x).  [clausify(20)].

Eliminating tpart1/3
139 tpart1(x,y,z) | -tP(x,y,z).  [clausify(21)].
140 -tpart1(x,y,z) | tP(x,y,z).  [clausify(21)].

Eliminating L_1/1
141 L_1(x) | -ED(x).  [clausify(22)].
142 -L_1(x) | ED(x).  [clausify(22)].

Eliminating L_2/1
143 L_2(x) | -PD(x).  [clausify(23)].
144 -L_2(x) | PD(x).  [clausify(23)].

Eliminating L_3/1
145 L_3(x) | -Q(x).  [clausify(24)].
146 -L_3(x) | Q(x).  [clausify(24)].

Eliminating L_4/1
147 L_4(x) | -PED(x).  [clausify(25)].
148 -L_4(x) | PED(x).  [clausify(25)].

Eliminating L_5/1
149 L_5(x) | -NPED(x).  [clausify(26)].
150 -L_5(x) | NPED(x).  [clausify(26)].

Eliminating ppart/2
151 ppart(x,y) | -PP(x,y) | -T(x) | -T(y).  [clausify(27)].
152 -ppart(x,y) | PP(x,y).  [clausify(27)].
153 -ppart(x,y) | T(x).  [clausify(27)].
154 -ppart(x,y) | T(y).  [clausify(27)].

Eliminating overlaps/2
155 overlaps(x,y) | -O(x,y) | -T(x) | -T(y).  [clausify(28)].
156 -overlaps(x,y) | O(x,y).  [clausify(28)].
157 -overlaps(x,y) | T(x).  [clausify(28)].
158 -overlaps(x,y) | T(y).  [clausify(28)].

Eliminating underlaps/2
159 underlaps(x,y) | -U(x,y) | -T(x) | -T(y).  [clausify(29)].
160 -underlaps(x,y) | U(x,y).  [clausify(29)].
161 -underlaps(x,y) | T(x).  [clausify(29)].
162 -underlaps(x,y) | T(y).  [clausify(29)].

Eliminating disjoint/2
163 disjoint(x,y) | -DJ(x,y) | -T(x) | -T(y).  [clausify(30)].
164 -disjoint(x,y) | DJ(x,y).  [clausify(30)].
165 -disjoint(x,y) | T(x).  [clausify(30)].
166 -disjoint(x,y) | T(y).  [clausify(30)].

Eliminating sum/3

Eliminating tppart/3

Eliminating toverlaps/3

Eliminating PD/1
167 -EV(x) | PD(x).  [clausify(57)].
168 -PD(x) | PRE(x,f8(x)).  [clausify(36)].
169 -PD(x) | PT(x).  [clausify(55)].
170 -STV(x) | PD(x).  [clausify(57)].
171 -PT(x) | ED(x) | PD(x) | Q(x) | AB(x).  [clausify(73)].
172 PT(x) | -PD(x).  [clausify(73)].
173 -ED(x) | -PD(x).  [clausify(74)].
174 -PD(x) | -Q(x).  [clausify(75)].
175 -PD(x) | -AB(x).  [clausify(75)].
176 -PD(x) | EV(x) | STV(x).  [clausify(80)].
177 PD(x) | -EV(x).  [clausify(80)].
178 PD(x) | -STV(x).  [clausify(80)].

Eliminating Q/1
179 -TQ(x) | Q(x).  [clausify(58)].
180 -Q(x) | PRE(x,f8(x)).  [clausify(36)].
181 -Q(x) | PT(x).  [clausify(55)].
182 -PQ(x) | Q(x).  [clausify(58)].
183 -AQ(x) | Q(x).  [clausify(58)].
184 PT(x) | -Q(x).  [clausify(73)].
185 -ED(x) | -Q(x).  [clausify(74)].
186 -Q(x) | -AB(x).  [clausify(76)].
187 -Q(x) | TQ(x) | PQ(x) | AQ(x).  [clausify(82)].
188 Q(x) | -TQ(x).  [clausify(82)].
189 Q(x) | -PQ(x).  [clausify(82)].
190 Q(x) | -AQ(x).  [clausify(82)].

Eliminating SUM/3
191 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | T(f16(x,y,z)).  [clausify(54)].
192 -PRE(x,y) | -PRE(x,z) | -SUM(u,y,z) | PRE(x,u).  [clausify(39)].
193 -T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [clausify(54)].
194 -T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | O(u,z) | -O(u,x).  [clausify(54)].
195 -T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | O(u,z) | -O(u,y).  [clausify(54)].
196 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | O(f16(x,y,z),z) | O(f16(x,y,z),x) | O(f16(x,y,z),y).  [clausify(54)].
197 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | -O(f16(x,y,z),z) | -O(f16(x,y,z),x).  [clausify(54)].
198 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | -O(f16(x,y,z),z) | -O(f16(x,y,z),y).  [clausify(54)].

Eliminating DJ/2
199 -T(x) | -T(y) | -DJ(x,y) | -O(x,y).  [clausify(49)].
200 -T(x) | -T(y) | P(x,y) | DJ(f10(x,y),y).  [clausify(46)].
201 -T(x) | -T(y) | DJ(x,y) | O(x,y).  [clausify(49)].

Eliminating U/2
202 -T(x) | -T(y) | U(x,y) | -P(x,z) | -P(y,z) | -T(z).  [clausify(50)].
203 -T(x) | -T(y) | -U(x,y) | P(x,f12(x,y)).  [clausify(50)].
204 -T(x) | -T(y) | -U(x,y) | P(y,f12(x,y)).  [clausify(50)].
205 -T(x) | -T(y) | -U(x,y) | T(f12(x,y)).  [clausify(50)].
206 -T(x) | -T(y) | -U(x,y) | T(f14(x,y)).  [clausify(52)].
207 -T(x) | -T(y) | -U(x,y) | -T(z) | -O(z,f14(x,y)) | O(z,x) | O(z,y).  [clausify(52)].
208 -T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f14(x,y)) | -O(z,x).  [clausify(52)].
209 -T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f14(x,y)) | -O(z,y).  [clausify(52)].

Eliminating AtP/1
210 AtP(x) | -T(x) | T(f13(x)).  [clausify(51)].
211 -AtP(x) | T(x).  [clausify(51)].
212 -AtP(x) | -T(y) | -P(y,x) | y = x.  [clausify(51)].
213 AtP(x) | -T(x) | P(f13(x),x).  [clausify(51)].
214 AtP(x) | -T(x) | f13(x) != x.  [clausify(51)].

Eliminating PT/1

Eliminating AS/1
215 -ED(x) | PED(x) | NPED(x) | AS(x).  [clausify(77)].
216 -AS(x) | ED(x).  [clausify(56)].
217 ED(x) | -AS(x).  [clausify(77)].
218 -PED(x) | -AS(x).  [clausify(78)].
219 -NPED(x) | -AS(x).  [clausify(79)].

Eliminating R/1
220 -TR(x) | R(x).  [clausify(66)].
221 -R(x) | AB(x).  [clausify(59)].
222 -PR(x) | R(x).  [clausify(66)].
223 -AR(x) | R(x).  [clausify(66)].
224 -R(x) | TR(x) | PR(x) | AR(x).  [clausify(92)].
225 R(x) | -TR(x).  [clausify(92)].
226 R(x) | -PR(x).  [clausify(92)].
227 R(x) | -AR(x).  [clausify(92)].

Eliminating M/1
228 -PED(x) | M(x) | F(x) | POB(x).  [clausify(85)].
229 -M(x) | PED(x).  [clausify(60)].
230 PED(x) | -M(x).  [clausify(85)].
231 -M(x) | -F(x).  [clausify(86)].
232 -M(x) | -POB(x).  [clausify(86)].

Eliminating F/1

Eliminating POB/1
233 -APO(x) | POB(x).  [clausify(67)].
234 -POB(x) | PED(x).  [clausify(60)].
235 -NAPO(x) | POB(x).  [clausify(67)].
236 PED(x) | -POB(x).  [clausify(85)].
237 -POB(x) | APO(x) | NAPO(x).  [clausify(95)].
238 POB(x) | -APO(x).  [clausify(95)].
239 POB(x) | -NAPO(x).  [clausify(95)].

Eliminating NPOB/1
240 -MOB(x) | NPOB(x).  [clausify(68)].
241 -NPOB(x) | NPED(x).  [clausify(61)].
242 -SOB(x) | NPOB(x).  [clausify(68)].
243 -NPOB(x) | MOB(x) | SOB(x).  [clausify(97)].
244 NPOB(x) | -MOB(x).  [clausify(97)].
245 NPOB(x) | -SOB(x).  [clausify(97)].

Eliminating ACH/1
246 -EV(x) | ACH(x) | ACC(x).  [clausify(88)].
247 -ACH(x) | EV(x).  [clausify(62)].
248 EV(x) | -ACH(x).  [clausify(88)].
249 -ACH(x) | -ACC(x).  [clausify(89)].

Eliminating ACC/1

Eliminating ST/1
250 -STV(x) | ST(x) | PRO(x).  [clausify(90)].
251 -ST(x) | STV(x).  [clausify(63)].
252 STV(x) | -ST(x).  [clausify(90)].
253 -ST(x) | -PRO(x).  [clausify(91)].

Eliminating PRO/1

Eliminating TL/1

Eliminating SL/1

Eliminating TR/1
254 -TR(x) | -PR(x).  [clausify(93)].
255 -T(x) | TR(x).  [clausify(69)].
256 -TR(x) | -AR(x).  [clausify(93)].

Eliminating S/1

Eliminating ASO/1
257 -SAG(x) | ASO(x).  [clausify(72)].
258 -ASO(x) | SOB(x).  [clausify(71)].
259 -SC(x) | ASO(x).  [clausify(72)].
260 -SOB(x) | ASO(x) | NASO(x).  [clausify(99)].
261 SOB(x) | -ASO(x).  [clausify(99)].
262 -ASO(x) | -NASO(x).  [clausify(100)].
263 -ASO(x) | SAG(x) | SC(x).  [clausify(101)].
264 ASO(x) | -SAG(x).  [clausify(101)].
265 ASO(x) | -SC(x).  [clausify(101)].

Eliminating NASO/1

Eliminating AB/1

Eliminating EV/1

Eliminating TQ/1

Eliminating PQ/1

Eliminating PR/1

Eliminating APO/1

Eliminating MOB/1

Eliminating SAG/1

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, T, ED, NPED, PED, P, PRE, O, PP, tP, tPP, tO ]).
Function symbol precedence:  function_order([ f9, f10, f11, f15, f8, f2, f3, f7, f1 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== PROOF =================================

% Proof 1 at 0.06 (+ 0.00) seconds.
% Length of proof is 2.
% Level of proof is 1.
% Maximum clause weight is 0.000.
% Given clauses 0.

103 (all x all y all p1 all p1 (tpart(x,y,p1) & part1(p1,p1) -> tpart(x,y,p1))) # label(non_clause) # label(goal).  [goal].
317 $F.  [deny(103)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=0. Generated=55. Kept=51. proofs=1.
Usable=0. Sos=0. Demods=0. Limbo=51, Disabled=248. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=3. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=22. Nonunit_bsub_feature_tests=0.
Megabytes=0.46.
User_CPU=0.06, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 12511 exit (max_proofs) Tue Jul 16 13:11:51 2013
