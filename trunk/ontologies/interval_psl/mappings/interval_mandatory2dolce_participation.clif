/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 3.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/3.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger, Carmen Chui
 *******************************************************************************/
 
(cl-text interval_mandatory2dolce_participation

(cl-comment "Translation definitions for interval_mandatory into dolce_participates.")

(cl-comment "All x and y that participate in z is equivalent to a time interval z that overlays two psl_intervals x and y.")
(forall (x y z t)
	(iff (PC x y z)
		(and
			(object x)
			(activity_occurrence y)
			(timeinterval z)
			(if
				(and (beforeEq (beginof z) t)
					(beforeEq t (endof z)))
					(participates_in x y t)))))

(cl-comment "The concept of parthood in DOLCE is equivalent to the inclusion of time intervals in Interval PSL Core.")
(forall (t1 t2)
	(iff (P t1 t2)
		(and (timeinterval t1)(timeinterval t2)
			(beforeEq (beginof t2) (beginof t1))
			(beforeEq (endof t1) (endof t2)))))

(cl-comment "Lemmas")

(forall (x)
	(if (object x)
		(exists (t) (PRE x t))))

(forall (x)
	(if (activity_occurrence x)
		(exists (t) (PRE x t))))

(forall (x)
	(if (activity_occurrence x)
		(PRE x (between (beginof x)(endof x)))))

(forall (x)
	(if (object x)
		(PRE x (between (beginof x)(endof x)))))

(forall (x t)
	(if (is_occurring_at x t)
		(exists (z)
			(and (beforeEq (beginof z) t)
				(beforeEq t (endof z))
				(PRE x z)))))

(forall (x t)
	(if (exists_at x t)
		(exists (z)
			(and (beforeEq (beginof z) t)
				(beforeEq t (endof z))
				(PRE x z)))))

(forall (x y t)
	(if (participates_in x y t)
		(exists (z)
			(and (beforeEq (beginof z) t)
				(beforeEq t (endof z))
				(PRE x z)
				(PRE y z)))))

(forall (x y t)
	(if (PC x y t)
		(exists (z)
			(and (exists_at x z)
				(beforeEq (beginof t) z)
				(beforeEq z (endof t))))))

(forall (x y t)
	(if (PC x y t)
		(exists (z)
			(and (is_occurring_at y z)
				(beforeEq (beginof t) z)
				(beforeEq z (endof t))))))

)