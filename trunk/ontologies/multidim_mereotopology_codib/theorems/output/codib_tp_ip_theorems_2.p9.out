============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 18006 was started by torsten on stl-ws2,
Tue Oct 23 21:46:32 2012
The command was "prover9 -t 600 -f codib/definitions/input/tp.p9 codib/definitions/input/ip.p9 codib/conversions/codib_down.p9 codib/conversions/codib.p9 codi/conversions/codi_down.p9 codi/conversions/codi_basic_atomic.p9 codib/definitions/input/icont.p9 codib/definitions/input/tcont.p9 codib/definitions/input/closed.p9 codib/conversions/codi_bcont.p9 codi/conversions/codi_int.p9 codi/conversions/codi_basic.p9 codi/definitions/input/ep.p9 codi/definitions/input/min_max_in_dim.p9 codi/conversions/codi.p9 codi/definitions/input/po.p9 codi/definitions/input/inc.p9 codi/definitions/input/sc.p9 codi/theorems/input/po_theorems.p9 codi/theorems/input/inc_theorems.p9 codi/theorems/input/sc_theorems.p9 codi/conversions/codi_linear.p9 zex/input/zex.p9 dim/conversions/dim_basic.p9 cont/conversions/cont_ext.p9 codi/definitions/input/epp.p9 cont/conversions/cont_c.p9 dim/conversions/dim_prime_linear.p9 cont/conversions/cont_basic.p9 dim/conversions/dim_prime_linear_unbounded.p9 codib/theorems/input/options.txt codib/theorems/input/codib_tp_ip_theorems_2.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file codib/definitions/input/tp.p9


formulas(sos).
(all x all y (TP(x,y) <-> P(x,y) & TCont(x,y))).
end_of_list.

% Reading from file codib/definitions/input/ip.p9


formulas(sos).
(all x all y (IP(x,y) <-> P(x,y) & ICont(x,y))).
end_of_list.

% Reading from file codib/conversions/codib_down.p9


formulas(sos).
(all x all y (BCont(x,y) <-> -ZEX(x) & (all z (P(z,x) & Min(z) -> BCont(z,y))))).
end_of_list.

% Reading from file codib/conversions/codib.p9


formulas(sos).
end_of_list.

% Reading from file codi/conversions/codi_down.p9


formulas(sos).
(all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))).
(all x all y (y < x -> x = difference(x,y))).
(all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))).
(all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))).
(all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)).
(all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))).
end_of_list.

% Reading from file codi/conversions/codi_basic_atomic.p9


formulas(sos).
(all x (-ZEX(x) -> (exists y (P(y,x) & Min(y))))).
end_of_list.

% Reading from file codib/definitions/input/icont.p9


formulas(sos).
(all x all y (ICont(x,y) <-> Cont(x,y) & (all z (Cont(z,x) -> -BCont(z,y))))).
end_of_list.

% Reading from file codib/definitions/input/tcont.p9


formulas(sos).
(all x all y (TCont(x,y) <-> Cont(x,y) & (exists z (Cont(z,x) & BCont(z,y))))).
end_of_list.

% Reading from file codib/definitions/input/closed.p9


formulas(sos).
(all x (Closed(x) <-> (all y -BCont(y,x)))).
end_of_list.

% Reading from file codib/conversions/codi_bcont.p9


formulas(sos).
(all x all y (BCont(x,y) -> Cont(x,y) & Inc(x,y))).
(all x all y all v all z (SC(x,y) & Min(x) & P(x,v) & Cont(y,v) & Cont(z,x) & Cont(z,y) -> BCont(z,x))).
(all x all y all z all v (SC(x,y) & P(x,v) & P(y,v) & Cont(z,x) & Cont(z,y) & Covers(v,z) -> -BCont(z,v))).
(all x all y all z (BCont(x,y) & P(y,z) & (all v all w (P(v,z) & -PO(v,y) & P(w,x) -> -Cont(w,v))) -> BCont(x,z))).
(all x all y all z (BCont(x,y) & Cont(z,x) -> BCont(z,y))).
end_of_list.

% Reading from file codi/conversions/codi_int.p9


formulas(sos).
(all x all y (-C(x,y) <-> ZEX(intersection(x,y)))).
(all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))).
(all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))).
(all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))).
end_of_list.

% Reading from file codi/conversions/codi_basic.p9


formulas(sos).
(all x all y (Cont(x,y) -> x < y | EqDim(x,y))).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file codi/definitions/input/min_max_in_dim.p9


formulas(sos).
(all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))).
(all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))).
end_of_list.

% Reading from file codi/conversions/codi.p9


formulas(sos).
end_of_list.

% Reading from file codi/definitions/input/po.p9


formulas(sos).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
end_of_list.

% Reading from file codi/definitions/input/inc.p9


formulas(sos).
(all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))).
end_of_list.

% Reading from file codi/definitions/input/sc.p9


formulas(sos).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))).
end_of_list.

% Reading from file codi/theorems/input/po_theorems.p9


formulas(sos).
(all x (-ZEX(x) -> PO(x,x))).
(all x all y (PO(x,y) -> PO(y,x))).
(all x all y (PO(x,y) -> EqDim(x,y))).
end_of_list.

% Reading from file codi/theorems/input/inc_theorems.p9


formulas(sos).
(all x -Inc(x,x)).
(all x all y (Inc(x,y) -> Inc(y,x))).
(all x all y (EqDim(x,y) -> -Inc(x,y))).
(all x all y (Inc(x,y) -> x < y | y < x)).
(all x all y (Cont(x,y) & x < y -> Inc(x,y))).
(all x all y all z (Inc(x,y) & P(y,z) -> Inc(x,z))).
end_of_list.

% Reading from file codi/theorems/input/sc_theorems.p9


formulas(sos).
(all x all y (SC(x,y) -> C(x,y))).
(all x all y (SC(x,y) -> -(exists z (Cont(z,x) & P(z,y))))).
(all x all y (SC(x,y) -> -(exists z (P(z,x) & Cont(z,y))))).
(all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))).
(all x -SC(x,x)).
(all x all y (SC(x,y) -> SC(y,x))).
(all x all y (SC(x,y) -> (exists z (z < x & z < y & Cont(z,x) & Cont(z,y))))).
end_of_list.

% Reading from file codi/conversions/codi_linear.p9


formulas(sos).
(all x all y (Cont(x,y) -> x < y | EqDim(x,y))).
end_of_list.

% Reading from file zex/input/zex.p9


formulas(sos).
(exists x ZEX(x)).
end_of_list.

% Reading from file dim/conversions/dim_basic.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y < z -> x < z)).
(all x EqDim(x,x)).
(all x all y (EqDim(x,y) -> EqDim(y,x))).
(all x all y all z (EqDim(x,y) & EqDim(y,z) -> EqDim(x,z))).
(all x all y (x < y -> -EqDim(x,y))).
(all x all y all z (EqDim(x,y) -> (z < x -> z < y))).
(all x all y all z (EqDim(x,y) -> (x < z -> y < z))).
(exists x (-ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
end_of_list.

% Reading from file cont/conversions/cont_ext.p9


formulas(sos).
(all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)).
end_of_list.

% Reading from file codi/definitions/input/epp.p9


formulas(sos).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
end_of_list.

% Reading from file cont/conversions/cont_c.p9


formulas(sos).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
end_of_list.

% Reading from file dim/conversions/dim_prime_linear.p9


formulas(sos).
(exists x MinDim(x)).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
end_of_list.

% Reading from file dim/conversions/dim_prime_linear_unbounded.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y <= z -> x < z)).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
(all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x (MaxDim(x) <-> (all y y <= x))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))).
end_of_list.

% Reading from file codib/theorems/input/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file codib/theorems/input/codib_tp_ip_theorems_2.p9


formulas(goals).
(all x (-Closed(x) -> TP(x,x))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (TP(x,y) <-> P(x,y) & TCont(x,y))) # label(non_clause).  [assumption].
2 (all x all y (IP(x,y) <-> P(x,y) & ICont(x,y))) # label(non_clause).  [assumption].
3 (all x all y (BCont(x,y) <-> -ZEX(x) & (all z (P(z,x) & Min(z) -> BCont(z,y))))) # label(non_clause).  [assumption].
4 (all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
5 (all x all y (y < x -> x = difference(x,y))) # label(non_clause).  [assumption].
6 (all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))) # label(non_clause).  [assumption].
7 (all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
8 (all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)) # label(non_clause).  [assumption].
9 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
10 (all x (-ZEX(x) -> (exists y (P(y,x) & Min(y))))) # label(non_clause).  [assumption].
11 (all x all y (ICont(x,y) <-> Cont(x,y) & (all z (Cont(z,x) -> -BCont(z,y))))) # label(non_clause).  [assumption].
12 (all x all y (TCont(x,y) <-> Cont(x,y) & (exists z (Cont(z,x) & BCont(z,y))))) # label(non_clause).  [assumption].
13 (all x (Closed(x) <-> (all y -BCont(y,x)))) # label(non_clause).  [assumption].
14 (all x all y (BCont(x,y) -> Cont(x,y) & Inc(x,y))) # label(non_clause).  [assumption].
15 (all x all y all v all z (SC(x,y) & Min(x) & P(x,v) & Cont(y,v) & Cont(z,x) & Cont(z,y) -> BCont(z,x))) # label(non_clause).  [assumption].
16 (all x all y all z all v (SC(x,y) & P(x,v) & P(y,v) & Cont(z,x) & Cont(z,y) & Covers(v,z) -> -BCont(z,v))) # label(non_clause).  [assumption].
17 (all x all y all z (BCont(x,y) & P(y,z) & (all v all w (P(v,z) & -PO(v,y) & P(w,x) -> -Cont(w,v))) -> BCont(x,z))) # label(non_clause).  [assumption].
18 (all x all y all z (BCont(x,y) & Cont(z,x) -> BCont(z,y))) # label(non_clause).  [assumption].
19 (all x all y (-C(x,y) <-> ZEX(intersection(x,y)))) # label(non_clause).  [assumption].
20 (all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
21 (all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))) # label(non_clause).  [assumption].
22 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
23 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
24 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
25 (all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))) # label(non_clause).  [assumption].
26 (all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))) # label(non_clause).  [assumption].
27 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
28 (all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))) # label(non_clause).  [assumption].
29 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))) # label(non_clause).  [assumption].
30 (all x (-ZEX(x) -> PO(x,x))) # label(non_clause).  [assumption].
31 (all x all y (PO(x,y) -> PO(y,x))) # label(non_clause).  [assumption].
32 (all x all y (PO(x,y) -> EqDim(x,y))) # label(non_clause).  [assumption].
33 (all x -Inc(x,x)) # label(non_clause).  [assumption].
34 (all x all y (Inc(x,y) -> Inc(y,x))) # label(non_clause).  [assumption].
35 (all x all y (EqDim(x,y) -> -Inc(x,y))) # label(non_clause).  [assumption].
36 (all x all y (Inc(x,y) -> x < y | y < x)) # label(non_clause).  [assumption].
37 (all x all y (Cont(x,y) & x < y -> Inc(x,y))) # label(non_clause).  [assumption].
38 (all x all y all z (Inc(x,y) & P(y,z) -> Inc(x,z))) # label(non_clause).  [assumption].
39 (all x all y (SC(x,y) -> C(x,y))) # label(non_clause).  [assumption].
40 (all x all y (SC(x,y) -> -(exists z (Cont(z,x) & P(z,y))))) # label(non_clause).  [assumption].
41 (all x all y (SC(x,y) -> -(exists z (P(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
42 (all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))) # label(non_clause).  [assumption].
43 (all x -SC(x,x)) # label(non_clause).  [assumption].
44 (all x all y (SC(x,y) -> SC(y,x))) # label(non_clause).  [assumption].
45 (all x all y (SC(x,y) -> (exists z (z < x & z < y & Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
46 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
47 (exists x ZEX(x)) # label(non_clause).  [assumption].
48 (all x -(x < x)) # label(non_clause).  [assumption].
49 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
50 (all x all y all z (x < y & y < z -> x < z)) # label(non_clause).  [assumption].
51 (all x EqDim(x,x)) # label(non_clause).  [assumption].
52 (all x all y (EqDim(x,y) -> EqDim(y,x))) # label(non_clause).  [assumption].
53 (all x all y all z (EqDim(x,y) & EqDim(y,z) -> EqDim(x,z))) # label(non_clause).  [assumption].
54 (all x all y (x < y -> -EqDim(x,y))) # label(non_clause).  [assumption].
55 (all x all y all z (EqDim(x,y) -> (z < x -> z < y))) # label(non_clause).  [assumption].
56 (all x all y all z (EqDim(x,y) -> (x < z -> y < z))) # label(non_clause).  [assumption].
57 (exists x (-ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
58 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
59 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
60 (all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)) # label(non_clause).  [assumption].
61 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
62 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
63 (exists x MinDim(x)) # label(non_clause).  [assumption].
64 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
65 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
66 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
67 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
68 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
69 (all x -(x < x)) # label(non_clause).  [assumption].
70 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
71 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
72 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
73 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
74 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
75 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
76 (all x (MaxDim(x) <-> (all y y <= x))) # label(non_clause).  [assumption].
77 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
78 (all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))) # label(non_clause).  [assumption].
79 (all x (-Closed(x) -> TP(x,x))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating TCont/2
80 TP(x,y) | -P(x,y) | -TCont(x,y).  [clausify(1)].
81 -TP(x,y) | TCont(x,y).  [clausify(1)].
82 -TCont(x,y) | Cont(x,y).  [clausify(12)].
Derived: Cont(x,y) | -TP(x,y).  [resolve(82,a,81,b)].
83 -TCont(x,y) | Cont(f4(x,y),x).  [clausify(12)].
Derived: Cont(f4(x,y),x) | -TP(x,y).  [resolve(83,a,81,b)].
84 -TCont(x,y) | BCont(f4(x,y),y).  [clausify(12)].
Derived: BCont(f4(x,y),y) | -TP(x,y).  [resolve(84,a,81,b)].
85 TCont(x,y) | -Cont(x,y) | -Cont(z,x) | -BCont(z,y).  [clausify(12)].
Derived: -Cont(x,y) | -Cont(z,x) | -BCont(z,y) | TP(x,y) | -P(x,y).  [resolve(85,a,80,c)].
Derived: -Cont(x,y) | -Cont(z,x) | -BCont(z,y) | Cont(f4(x,y),x).  [resolve(85,a,83,a)].
Derived: -Cont(x,y) | -Cont(z,x) | -BCont(z,y) | BCont(f4(x,y),y).  [resolve(85,a,84,a)].

Eliminating IP/2
86 IP(x,y) | -P(x,y) | -ICont(x,y).  [clausify(2)].
87 -IP(x,y) | P(x,y).  [clausify(2)].
88 -IP(x,y) | ICont(x,y).  [clausify(2)].

Eliminating Min/1
89 BCont(x,y) | ZEX(x) | Min(f1(x,y)).  [clausify(3)].
90 -BCont(x,y) | -P(z,x) | -Min(z) | BCont(z,y).  [clausify(3)].
Derived: BCont(x,y) | ZEX(x) | -BCont(z,u) | -P(f1(x,y),z) | BCont(f1(x,y),u).  [resolve(89,c,90,c)].
91 ZEX(x) | Min(f2(x)).  [clausify(10)].
Derived: ZEX(x) | -BCont(y,z) | -P(f2(x),y) | BCont(f2(x),z).  [resolve(91,b,90,c)].
92 -SC(x,y) | -Min(x) | -P(x,z) | -Cont(y,z) | -Cont(u,x) | -Cont(u,y) | BCont(u,x).  [clausify(15)].
Derived: -SC(f1(x,y),z) | -P(f1(x,y),u) | -Cont(z,u) | -Cont(w,f1(x,y)) | -Cont(w,z) | BCont(w,f1(x,y)) | BCont(x,y) | ZEX(x).  [resolve(92,b,89,c)].
Derived: -SC(f2(x),y) | -P(f2(x),z) | -Cont(y,z) | -Cont(u,f2(x)) | -Cont(u,y) | BCont(u,f2(x)) | ZEX(x).  [resolve(92,b,91,b)].
93 -Min(x) | -ZEX(x).  [clausify(26)].
Derived: -ZEX(f1(x,y)) | BCont(x,y) | ZEX(x).  [resolve(93,a,89,c)].
Derived: -ZEX(f2(x)) | ZEX(x).  [resolve(93,a,91,b)].
94 -Min(x) | -PP(y,x).  [clausify(26)].
Derived: -PP(x,f1(y,z)) | BCont(y,z) | ZEX(y).  [resolve(94,a,89,c)].
Derived: -PP(x,f2(y)) | ZEX(y).  [resolve(94,a,91,b)].
95 Min(x) | ZEX(x) | PP(f9(x),x).  [clausify(26)].
Derived: ZEX(x) | PP(f9(x),x) | -BCont(y,z) | -P(x,y) | BCont(x,z).  [resolve(95,a,90,c)].
Derived: ZEX(x) | PP(f9(x),x) | -SC(x,y) | -P(x,z) | -Cont(y,z) | -Cont(u,x) | -Cont(u,y) | BCont(u,x).  [resolve(95,a,92,b)].
Derived: ZEX(x) | PP(f9(x),x) | -PP(y,x).  [resolve(95,a,94,a)].

Eliminating ICont/2
96 ICont(x,y) | -Cont(x,y) | Cont(f3(x,y),x).  [clausify(11)].
97 -ICont(x,y) | Cont(x,y).  [clausify(11)].
98 -ICont(x,y) | -Cont(z,x) | -BCont(z,y).  [clausify(11)].
Derived: -Cont(x,y) | Cont(f3(x,y),x) | -Cont(z,x) | -BCont(z,y).  [resolve(96,a,98,a)].
99 ICont(x,y) | -Cont(x,y) | BCont(f3(x,y),y).  [clausify(11)].
Derived: -Cont(x,y) | BCont(f3(x,y),y) | -Cont(z,x) | -BCont(z,y).  [resolve(99,a,98,a)].

Eliminating Covers/2
100 Covers(x,y) | -(y < x) | y < f21(x,y).  [clausify(78)].
101 -SC(x,y) | -P(x,z) | -P(y,z) | -Cont(u,x) | -Cont(u,y) | -Covers(z,u) | -BCont(u,z).  [clausify(16)].
102 -Covers(x,y) | y < x.  [clausify(78)].
103 -Covers(x,y) | -(y < z) | -(z < x).  [clausify(78)].
Derived: -(x < y) | x < f21(y,x) | -SC(z,u) | -P(z,y) | -P(u,y) | -Cont(x,z) | -Cont(x,u) | -BCont(x,y).  [resolve(100,a,101,f)].
Derived: -(x < y) | x < f21(y,x) | -(x < z) | -(z < y).  [resolve(100,a,103,a)].
104 Covers(x,y) | -(y < x) | f21(x,y) < x.  [clausify(78)].
Derived: -(x < y) | f21(y,x) < y | -SC(z,u) | -P(z,y) | -P(u,y) | -Cont(x,z) | -Cont(x,u) | -BCont(x,y).  [resolve(104,a,101,f)].
Derived: -(x < y) | f21(y,x) < y | -(x < z) | -(z < y).  [resolve(104,a,103,a)].

Eliminating C/2
105 -C(x,y) | -ZEX(intersection(x,y)).  [clausify(19)].
106 C(x,y) | ZEX(intersection(x,y)).  [clausify(19)].
107 -SC(x,y) | C(x,y).  [clausify(39)].
Derived: -SC(x,y) | -ZEX(intersection(x,y)).  [resolve(107,b,105,a)].
108 -C(x,y) | Cont(f15(x,y),x) | SC(x,y).  [clausify(42)].
Derived: Cont(f15(x,y),x) | SC(x,y) | ZEX(intersection(x,y)).  [resolve(108,a,106,a)].
109 -C(x,y) | Cont(f15(x,y),y) | SC(x,y).  [clausify(42)].
Derived: Cont(f15(x,y),y) | SC(x,y) | ZEX(intersection(x,y)).  [resolve(109,a,106,a)].
110 -C(x,y) | P(f15(x,y),x) | P(f15(x,y),y) | SC(x,y).  [clausify(42)].
Derived: P(f15(x,y),x) | P(f15(x,y),y) | SC(x,y) | ZEX(intersection(x,y)).  [resolve(110,a,106,a)].
111 -C(x,y) | Cont(f18(x,y),x).  [clausify(62)].
Derived: Cont(f18(x,y),x) | ZEX(intersection(x,y)).  [resolve(111,a,106,a)].
Derived: Cont(f18(x,y),x) | -SC(x,y).  [resolve(111,a,107,b)].
112 -C(x,y) | Cont(f18(x,y),y).  [clausify(62)].
Derived: Cont(f18(x,y),y) | ZEX(intersection(x,y)).  [resolve(112,a,106,a)].
Derived: Cont(f18(x,y),y) | -SC(x,y).  [resolve(112,a,107,b)].
113 C(x,y) | -Cont(z,x) | -Cont(z,y).  [clausify(62)].
Derived: -Cont(x,y) | -Cont(x,z) | -ZEX(intersection(y,z)).  [resolve(113,a,105,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f15(y,z),y) | SC(y,z).  [resolve(113,a,108,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f15(y,z),z) | SC(y,z).  [resolve(113,a,109,a)].
Derived: -Cont(x,y) | -Cont(x,z) | P(f15(y,z),y) | P(f15(y,z),z) | SC(y,z).  [resolve(113,a,110,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f18(y,z),y).  [resolve(113,a,111,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f18(y,z),z).  [resolve(113,a,112,a)].

Eliminating Max/1
114 Max(x) | ZEX(x) | PP(x,f8(x)).  [clausify(25)].
115 -Max(x) | -ZEX(x).  [clausify(25)].
116 -Max(x) | -PP(x,y).  [clausify(25)].
Derived: ZEX(x) | PP(x,f8(x)) | -PP(x,y).  [resolve(114,a,116,a)].

Eliminating MinDim/1
117 -MinDim(x) | -ZEX(x).  [clausify(77)].
118 MinDim(c3).  [clausify(63)].
Derived: -ZEX(c3).  [resolve(117,a,118,a)].
119 -MinDim(x) | -(y < x) | ZEX(y).  [clausify(77)].
Derived: -(x < c3) | ZEX(x).  [resolve(119,a,118,a)].
120 MinDim(x) | ZEX(x) | f20(x) < x.  [clausify(77)].
Derived: ZEX(x) | f20(x) < x | -(y < x) | ZEX(y).  [resolve(120,a,119,a)].
121 MinDim(x) | ZEX(x) | -ZEX(f20(x)).  [clausify(77)].
Derived: ZEX(x) | -ZEX(f20(x)) | -(y < x) | ZEX(y).  [resolve(121,a,119,a)].

Eliminating MaxDim/1
122 MaxDim(x) | -(f19(x) <= x).  [clausify(76)].
123 -MaxDim(x) | y <= x.  [clausify(76)].
Derived: -(f19(x) <= x) | y <= x.  [resolve(122,a,123,a)].

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, ZEX, Closed, Cont, <, P, BCont, SC, EqDim, Inc, <=, PP, PO, TP ]).
Function symbol precedence:  function_order([ c1, c2, c3, c4, intersection, difference, f1, f3, f4, f10, f11, f12, f13, f14, f15, f16, f17, f18, f21, f2, f5, f8, f9, f19, f20, f6, f7 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.02 seconds.

NOTE: Back_subsumption disabled, ratio of kept to back_subsumed is 171 (0.00 of 0.22 sec).

Low Water (keep): wt=28.000, iters=7083

Low Water (keep): wt=25.000, iters=6705

Low Water (keep): wt=24.000, iters=6728

Low Water (keep): wt=23.000, iters=6737

Low Water (keep): wt=22.000, iters=6732

Low Water (keep): wt=21.000, iters=6737

Low Water (keep): wt=19.000, iters=6966

Low Water (keep): wt=18.000, iters=6813

Low Water (keep): wt=17.000, iters=6729

Low Water (keep): wt=16.000, iters=6689

Low Water (keep): wt=15.000, iters=6671

Low Water (keep): wt=14.000, iters=6666

Low Water (keep): wt=13.000, iters=6688

Low Water (keep): wt=12.000, iters=6672

Low Water (keep): wt=11.000, iters=6667

Low Water (keep): wt=10.000, iters=6667

Low Water (displace): id=9170, wt=64.000

Low Water (displace): id=8956, wt=62.000

Low Water (displace): id=8875, wt=61.000

Low Water (displace): id=7552, wt=58.000

Low Water (displace): id=9176, wt=57.000

Low Water (displace): id=7519, wt=56.000

Low Water (displace): id=9173, wt=55.000

Low Water (displace): id=8942, wt=54.000

Low Water (displace): id=9944, wt=53.000

Low Water (displace): id=8969, wt=52.000

Low Water (displace): id=8876, wt=51.000

Low Water (displace): id=9036, wt=49.000

Low Water (displace): id=9317, wt=48.000

Low Water (displace): id=12891, wt=47.000

Low Water (displace): id=9950, wt=46.000

Low Water (displace): id=9310, wt=45.000

Low Water (displace): id=9947, wt=44.000

Low Water (displace): id=33021, wt=11.000

Low Water (displace): id=33042, wt=10.000

Low Water (displace): id=33043, wt=9.000

============================== PROOF =================================

% Proof 1 at 63.96 (+ 0.32) seconds.
% Length of proof is 62.
% Level of proof is 11.
% Maximum clause weight is 15.000.
% Given clauses 24232.

1 (all x all y (TP(x,y) <-> P(x,y) & TCont(x,y))) # label(non_clause).  [assumption].
3 (all x all y (BCont(x,y) <-> -ZEX(x) & (all z (P(z,x) & Min(z) -> BCont(z,y))))) # label(non_clause).  [assumption].
7 (all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
9 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
12 (all x all y (TCont(x,y) <-> Cont(x,y) & (exists z (Cont(z,x) & BCont(z,y))))) # label(non_clause).  [assumption].
13 (all x (Closed(x) <-> (all y -BCont(y,x)))) # label(non_clause).  [assumption].
14 (all x all y (BCont(x,y) -> Cont(x,y) & Inc(x,y))) # label(non_clause).  [assumption].
24 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
47 (exists x ZEX(x)) # label(non_clause).  [assumption].
51 (all x EqDim(x,x)) # label(non_clause).  [assumption].
58 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
60 (all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)) # label(non_clause).  [assumption].
64 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
67 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
75 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
79 (all x (-Closed(x) -> TP(x,x))) # label(non_clause) # label(goal).  [goal].
80 TP(x,y) | -P(x,y) | -TCont(x,y).  [clausify(1)].
85 TCont(x,y) | -Cont(x,y) | -Cont(z,x) | -BCont(z,y).  [clausify(12)].
125 -BCont(x,y) | -ZEX(x).  [clausify(3)].
131 -(x <= y) | -Cont(z,difference(x,y)) | Cont(z,x).  [clausify(7)].
133 -ZEX(difference(x,y)) | ZEX(x) | Cont(x,y).  [clausify(9)].
135 ZEX(difference(x,y)) | -Cont(x,y).  [clausify(9)].
138 Closed(x) | BCont(f5(x),x).  [clausify(13)].
139 -BCont(x,y) | Cont(x,y).  [clausify(14)].
155 P(x,y) | -Cont(x,y) | -EqDim(x,y).  [clausify(24)].
194 ZEX(c1).  [clausify(47)].
198 EqDim(x,x).  [clausify(51)].
206 -ZEX(x) | -ZEX(y) | y = x.  [clausify(58)].
208 Cont(f17(x,y),x) | Cont(f17(x,y),y) | y = x.  [clausify(60)].
213 ZEX(x) | Cont(x,x).  [clausify(64)].
217 -ZEX(x) | -Cont(y,x).  [clausify(67)].
224 x <= y | -EqDim(x,y).  [clausify(75)].
225 -Closed(c4).  [deny(79)].
226 -TP(c4,c4).  [deny(79)].
230 -Cont(x,y) | -Cont(z,x) | -BCont(z,y) | TP(x,y) | -P(x,y).  [resolve(85,a,80,c)].
293 Closed(x) | -ZEX(f5(x)).  [resolve(138,b,125,a)].
294 Cont(f5(x),x) | Closed(x).  [resolve(139,a,138,b)].
325 P(x,x) | -Cont(x,x).  [resolve(198,a,155,c)].
334 -ZEX(x) | c1 = x.  [resolve(206,a,194,a),flip(b)].
359 ZEX(x) | ZEX(difference(x,x)).  [resolve(213,b,135,b)].
385 x <= x.  [resolve(224,b,198,a)].
387 -Cont(x,y) | -Cont(f5(y),x) | TP(x,y) | -P(x,y) | Closed(y).  [resolve(230,c,138,b)].
638 -Cont(x,difference(y,y)) | Cont(x,y).  [resolve(385,a,131,a)].
675 Closed(x) | -ZEX(x).  [resolve(294,a,217,b)].
686 Closed(x) | ZEX(difference(f5(x),x)).  [resolve(294,a,135,b)].
687 Closed(c1).  [resolve(675,b,194,a)].
742 P(x,x) | ZEX(x).  [resolve(325,b,213,b)].
748 ZEX(x) | difference(x,x) = c1.  [resolve(359,b,334,a),flip(b)].
1084 ZEX(difference(f5(c4),c4)).  [resolve(686,a,225,a)].
1091 ZEX(f5(c4)) | Cont(f5(c4),c4).  [resolve(1084,a,133,a)].
1125 difference(x,x) = c1 | Closed(x).  [resolve(748,a,675,b)].
1948 difference(c4,c4) = c1.  [resolve(1125,b,225,a)].
2243 -Cont(x,c1) | Cont(x,c4).  [para(1948(a,1),638(a,2))].
2258 Cont(f17(x,c1),c4) | Cont(f17(x,c1),x) | c1 = x.  [resolve(2243,a,208,b)].
2260 Cont(f17(c4,c1),c4) | c4 = c1.  [factor(2258,a,b),flip(b)].
4349 -Cont(x,x) | -Cont(f5(x),x) | TP(x,x) | Closed(x) | ZEX(x).  [resolve(387,d,742,a)].
10528 c4 = c1 | -ZEX(c4).  [resolve(2260,a,217,b)].
51208 -Cont(c4,c4) | ZEX(c4) | ZEX(f5(c4)).  [resolve(4349,b,1091,b),unit_del(b,226),unit_del(c,225)].
51211 ZEX(c4) | ZEX(f5(c4)).  [resolve(51208,a,213,b),merge(c)].
51225 ZEX(c4).  [resolve(51211,b,293,b),unit_del(b,225)].
51233 c4 = c1.  [back_unit_del(10528),unit_del(b,51225)].
51290 $F.  [back_rewrite(225),rewrite([51233(1)]),unit_del(a,687)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=24232. Generated=981239. Kept=51166. proofs=1.
Usable=18907. Sos=17152. Demods=806. Limbo=57, Disabled=15247. Hints=0.
Kept_by_rule=0, Deleted_by_rule=27.
Forward_subsumed=189188. Back_subsumed=14.
Sos_limit_deleted=740857. Sos_displaced=763. Sos_removed=0.
New_demodulators=1275 (0 lex), Back_demodulated=13382. Back_unit_deleted=891.
Demod_attempts=19031064. Demod_rewrites=146276.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=343263. Nonunit_bsub_feature_tests=7515.
Megabytes=73.62.
User_CPU=63.96, System_CPU=0.32, Wall_clock=65.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 18006 exit (max_proofs) Tue Oct 23 21:47:37 2012
