============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 17848 was started by torsten on stl-ws2,
Tue Oct 23 21:44:47 2012
The command was "prover9 -t 600 -f codib/definitions/input/io.p9 codib/definitions/input/ibc.p9 codib/definitions/input/bo.p9 codib/conversions/codib_down.p9 codib/definitions/input/icont.p9 codib/conversions/codib.p9 codi/conversions/codi_down.p9 codi/conversions/codi_basic_atomic.p9 codib/definitions/input/tcont.p9 codib/definitions/input/closed.p9 codib/conversions/codi_bcont.p9 codi/conversions/codi_int.p9 codi/conversions/codi_basic.p9 codi/definitions/input/ep.p9 codi/definitions/input/min_max_in_dim.p9 codi/conversions/codi.p9 codi/definitions/input/po.p9 codi/definitions/input/inc.p9 codi/definitions/input/sc.p9 codi/theorems/input/po_theorems.p9 codi/theorems/input/inc_theorems.p9 codi/theorems/input/sc_theorems.p9 codi/conversions/codi_linear.p9 zex/input/zex.p9 dim/conversions/dim_basic.p9 cont/conversions/cont_ext.p9 codi/definitions/input/epp.p9 cont/conversions/cont_c.p9 dim/conversions/dim_prime_linear.p9 cont/conversions/cont_basic.p9 dim/conversions/dim_prime_linear_unbounded.p9 codib/theorems/input/options.txt codib/theorems/input/codib_down_9intersection_theorems_4.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file codib/definitions/input/io.p9


formulas(sos).
(all x all y (IO(x,y) <-> (exists z (ICont(z,x) & ICont(z,y))))).
end_of_list.

% Reading from file codib/definitions/input/ibc.p9


formulas(sos).
(all x all y (IBC(x,y) <-> (exists z (Cont(z,x) & -BCont(z,x) & BCont(z,y))))).
end_of_list.

% Reading from file codib/definitions/input/bo.p9


formulas(sos).
(all x all y (BO(x,y) <-> (exists z (BCont(z,x) & BCont(z,y))))).
end_of_list.

% Reading from file codib/conversions/codib_down.p9


formulas(sos).
(all x all y (BCont(x,y) <-> -ZEX(x) & (all z (P(z,x) & Min(z) -> BCont(z,y))))).
end_of_list.

% Reading from file codib/definitions/input/icont.p9


formulas(sos).
(all x all y (ICont(x,y) <-> Cont(x,y) & (all z (Cont(z,x) -> -BCont(z,y))))).
end_of_list.

% Reading from file codib/conversions/codib.p9


formulas(sos).
end_of_list.

% Reading from file codi/conversions/codi_down.p9


formulas(sos).
(all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))).
(all x all y (y < x -> x = difference(x,y))).
(all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))).
(all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))).
(all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)).
(all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))).
end_of_list.

% Reading from file codi/conversions/codi_basic_atomic.p9


formulas(sos).
(all x (-ZEX(x) -> (exists y (P(y,x) & Min(y))))).
end_of_list.

% Reading from file codib/definitions/input/tcont.p9


formulas(sos).
(all x all y (TCont(x,y) <-> Cont(x,y) & (exists z (Cont(z,x) & BCont(z,y))))).
end_of_list.

% Reading from file codib/definitions/input/closed.p9


formulas(sos).
(all x (Closed(x) <-> (all y -BCont(y,x)))).
end_of_list.

% Reading from file codib/conversions/codi_bcont.p9


formulas(sos).
(all x all y (BCont(x,y) -> Cont(x,y) & Inc(x,y))).
(all x all y all v all z (SC(x,y) & Min(x) & P(x,v) & Cont(y,v) & Cont(z,x) & Cont(z,y) -> BCont(z,x))).
(all x all y all z all v (SC(x,y) & P(x,v) & P(y,v) & Cont(z,x) & Cont(z,y) & Covers(v,z) -> -BCont(z,v))).
(all x all y all z (BCont(x,y) & P(y,z) & (all v all w (P(v,z) & -PO(v,y) & P(w,x) -> -Cont(w,v))) -> BCont(x,z))).
(all x all y all z (BCont(x,y) & Cont(z,x) -> BCont(z,y))).
end_of_list.

% Reading from file codi/conversions/codi_int.p9


formulas(sos).
(all x all y (-C(x,y) <-> ZEX(intersection(x,y)))).
(all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))).
(all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))).
(all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))).
end_of_list.

% Reading from file codi/conversions/codi_basic.p9


formulas(sos).
(all x all y (Cont(x,y) -> x < y | EqDim(x,y))).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file codi/definitions/input/min_max_in_dim.p9


formulas(sos).
(all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))).
(all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))).
end_of_list.

% Reading from file codi/conversions/codi.p9


formulas(sos).
end_of_list.

% Reading from file codi/definitions/input/po.p9


formulas(sos).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
end_of_list.

% Reading from file codi/definitions/input/inc.p9


formulas(sos).
(all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))).
end_of_list.

% Reading from file codi/definitions/input/sc.p9


formulas(sos).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))).
end_of_list.

% Reading from file codi/theorems/input/po_theorems.p9


formulas(sos).
(all x (-ZEX(x) -> PO(x,x))).
(all x all y (PO(x,y) -> PO(y,x))).
(all x all y (PO(x,y) -> EqDim(x,y))).
end_of_list.

% Reading from file codi/theorems/input/inc_theorems.p9


formulas(sos).
(all x -Inc(x,x)).
(all x all y (Inc(x,y) -> Inc(y,x))).
(all x all y (EqDim(x,y) -> -Inc(x,y))).
(all x all y (Inc(x,y) -> x < y | y < x)).
(all x all y (Cont(x,y) & x < y -> Inc(x,y))).
(all x all y all z (Inc(x,y) & P(y,z) -> Inc(x,z))).
end_of_list.

% Reading from file codi/theorems/input/sc_theorems.p9


formulas(sos).
(all x all y (SC(x,y) -> C(x,y))).
(all x all y (SC(x,y) -> -(exists z (Cont(z,x) & P(z,y))))).
(all x all y (SC(x,y) -> -(exists z (P(z,x) & Cont(z,y))))).
(all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))).
(all x -SC(x,x)).
(all x all y (SC(x,y) -> SC(y,x))).
(all x all y (SC(x,y) -> (exists z (z < x & z < y & Cont(z,x) & Cont(z,y))))).
end_of_list.

% Reading from file codi/conversions/codi_linear.p9


formulas(sos).
(all x all y (Cont(x,y) -> x < y | EqDim(x,y))).
end_of_list.

% Reading from file zex/input/zex.p9


formulas(sos).
(exists x ZEX(x)).
end_of_list.

% Reading from file dim/conversions/dim_basic.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y < z -> x < z)).
(all x EqDim(x,x)).
(all x all y (EqDim(x,y) -> EqDim(y,x))).
(all x all y all z (EqDim(x,y) & EqDim(y,z) -> EqDim(x,z))).
(all x all y (x < y -> -EqDim(x,y))).
(all x all y all z (EqDim(x,y) -> (z < x -> z < y))).
(all x all y all z (EqDim(x,y) -> (x < z -> y < z))).
(exists x (-ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
end_of_list.

% Reading from file cont/conversions/cont_ext.p9


formulas(sos).
(all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)).
end_of_list.

% Reading from file codi/definitions/input/epp.p9


formulas(sos).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
end_of_list.

% Reading from file cont/conversions/cont_c.p9


formulas(sos).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
end_of_list.

% Reading from file dim/conversions/dim_prime_linear.p9


formulas(sos).
(exists x MinDim(x)).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
end_of_list.

% Reading from file dim/conversions/dim_prime_linear_unbounded.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y <= z -> x < z)).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
(all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x (MaxDim(x) <-> (all y y <= x))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))).
end_of_list.

% Reading from file codib/theorems/input/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file codib/theorems/input/codib_down_9intersection_theorems_4.p9


formulas(goals).
(all x all y (IBC(y,x) -> C(x,y))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (IO(x,y) <-> (exists z (ICont(z,x) & ICont(z,y))))) # label(non_clause).  [assumption].
2 (all x all y (IBC(x,y) <-> (exists z (Cont(z,x) & -BCont(z,x) & BCont(z,y))))) # label(non_clause).  [assumption].
3 (all x all y (BO(x,y) <-> (exists z (BCont(z,x) & BCont(z,y))))) # label(non_clause).  [assumption].
4 (all x all y (BCont(x,y) <-> -ZEX(x) & (all z (P(z,x) & Min(z) -> BCont(z,y))))) # label(non_clause).  [assumption].
5 (all x all y (ICont(x,y) <-> Cont(x,y) & (all z (Cont(z,x) -> -BCont(z,y))))) # label(non_clause).  [assumption].
6 (all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
7 (all x all y (y < x -> x = difference(x,y))) # label(non_clause).  [assumption].
8 (all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))) # label(non_clause).  [assumption].
9 (all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
10 (all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)) # label(non_clause).  [assumption].
11 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
12 (all x (-ZEX(x) -> (exists y (P(y,x) & Min(y))))) # label(non_clause).  [assumption].
13 (all x all y (TCont(x,y) <-> Cont(x,y) & (exists z (Cont(z,x) & BCont(z,y))))) # label(non_clause).  [assumption].
14 (all x (Closed(x) <-> (all y -BCont(y,x)))) # label(non_clause).  [assumption].
15 (all x all y (BCont(x,y) -> Cont(x,y) & Inc(x,y))) # label(non_clause).  [assumption].
16 (all x all y all v all z (SC(x,y) & Min(x) & P(x,v) & Cont(y,v) & Cont(z,x) & Cont(z,y) -> BCont(z,x))) # label(non_clause).  [assumption].
17 (all x all y all z all v (SC(x,y) & P(x,v) & P(y,v) & Cont(z,x) & Cont(z,y) & Covers(v,z) -> -BCont(z,v))) # label(non_clause).  [assumption].
18 (all x all y all z (BCont(x,y) & P(y,z) & (all v all w (P(v,z) & -PO(v,y) & P(w,x) -> -Cont(w,v))) -> BCont(x,z))) # label(non_clause).  [assumption].
19 (all x all y all z (BCont(x,y) & Cont(z,x) -> BCont(z,y))) # label(non_clause).  [assumption].
20 (all x all y (-C(x,y) <-> ZEX(intersection(x,y)))) # label(non_clause).  [assumption].
21 (all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
22 (all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))) # label(non_clause).  [assumption].
23 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
24 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
25 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
26 (all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))) # label(non_clause).  [assumption].
27 (all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))) # label(non_clause).  [assumption].
28 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
29 (all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))) # label(non_clause).  [assumption].
30 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))) # label(non_clause).  [assumption].
31 (all x (-ZEX(x) -> PO(x,x))) # label(non_clause).  [assumption].
32 (all x all y (PO(x,y) -> PO(y,x))) # label(non_clause).  [assumption].
33 (all x all y (PO(x,y) -> EqDim(x,y))) # label(non_clause).  [assumption].
34 (all x -Inc(x,x)) # label(non_clause).  [assumption].
35 (all x all y (Inc(x,y) -> Inc(y,x))) # label(non_clause).  [assumption].
36 (all x all y (EqDim(x,y) -> -Inc(x,y))) # label(non_clause).  [assumption].
37 (all x all y (Inc(x,y) -> x < y | y < x)) # label(non_clause).  [assumption].
38 (all x all y (Cont(x,y) & x < y -> Inc(x,y))) # label(non_clause).  [assumption].
39 (all x all y all z (Inc(x,y) & P(y,z) -> Inc(x,z))) # label(non_clause).  [assumption].
40 (all x all y (SC(x,y) -> C(x,y))) # label(non_clause).  [assumption].
41 (all x all y (SC(x,y) -> -(exists z (Cont(z,x) & P(z,y))))) # label(non_clause).  [assumption].
42 (all x all y (SC(x,y) -> -(exists z (P(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
43 (all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))) # label(non_clause).  [assumption].
44 (all x -SC(x,x)) # label(non_clause).  [assumption].
45 (all x all y (SC(x,y) -> SC(y,x))) # label(non_clause).  [assumption].
46 (all x all y (SC(x,y) -> (exists z (z < x & z < y & Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
47 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
48 (exists x ZEX(x)) # label(non_clause).  [assumption].
49 (all x -(x < x)) # label(non_clause).  [assumption].
50 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
51 (all x all y all z (x < y & y < z -> x < z)) # label(non_clause).  [assumption].
52 (all x EqDim(x,x)) # label(non_clause).  [assumption].
53 (all x all y (EqDim(x,y) -> EqDim(y,x))) # label(non_clause).  [assumption].
54 (all x all y all z (EqDim(x,y) & EqDim(y,z) -> EqDim(x,z))) # label(non_clause).  [assumption].
55 (all x all y (x < y -> -EqDim(x,y))) # label(non_clause).  [assumption].
56 (all x all y all z (EqDim(x,y) -> (z < x -> z < y))) # label(non_clause).  [assumption].
57 (all x all y all z (EqDim(x,y) -> (x < z -> y < z))) # label(non_clause).  [assumption].
58 (exists x (-ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
59 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
60 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
61 (all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)) # label(non_clause).  [assumption].
62 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
63 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
64 (exists x MinDim(x)) # label(non_clause).  [assumption].
65 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
66 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
67 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
68 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
69 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
70 (all x -(x < x)) # label(non_clause).  [assumption].
71 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
72 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
73 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
74 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
75 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
76 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
77 (all x (MaxDim(x) <-> (all y y <= x))) # label(non_clause).  [assumption].
78 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
79 (all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))) # label(non_clause).  [assumption].
80 (all x all y (IBC(y,x) -> C(x,y))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating IO/2
81 IO(x,y) | -ICont(z,x) | -ICont(z,y).  [clausify(1)].
82 -IO(x,y) | ICont(f1(x,y),x).  [clausify(1)].
83 -IO(x,y) | ICont(f1(x,y),y).  [clausify(1)].
Derived: -ICont(x,y) | -ICont(x,z) | ICont(f1(y,z),y).  [resolve(81,a,82,a)].
Derived: -ICont(x,y) | -ICont(x,z) | ICont(f1(y,z),z).  [resolve(81,a,83,a)].

Eliminating IBC/2
84 IBC(x,y) | -Cont(z,x) | BCont(z,x) | -BCont(z,y).  [clausify(2)].
85 -IBC(x,y) | Cont(f2(x,y),x).  [clausify(2)].
86 -IBC(x,y) | -BCont(f2(x,y),x).  [clausify(2)].
87 -IBC(x,y) | BCont(f2(x,y),y).  [clausify(2)].
Derived: -Cont(x,y) | BCont(x,y) | -BCont(x,z) | Cont(f2(y,z),y).  [resolve(84,a,85,a)].
Derived: -Cont(x,y) | BCont(x,y) | -BCont(x,z) | -BCont(f2(y,z),y).  [resolve(84,a,86,a)].
Derived: -Cont(x,y) | BCont(x,y) | -BCont(x,z) | BCont(f2(y,z),z).  [resolve(84,a,87,a)].
88 IBC(c5,c4).  [deny(80)].
Derived: Cont(f2(c5,c4),c5).  [resolve(88,a,85,a)].
Derived: -BCont(f2(c5,c4),c5).  [resolve(88,a,86,a)].
Derived: BCont(f2(c5,c4),c4).  [resolve(88,a,87,a)].

Eliminating BO/2
89 BO(x,y) | -BCont(z,x) | -BCont(z,y).  [clausify(3)].
90 -BO(x,y) | BCont(f3(x,y),x).  [clausify(3)].
91 -BO(x,y) | BCont(f3(x,y),y).  [clausify(3)].
Derived: -BCont(x,y) | -BCont(x,z) | BCont(f3(y,z),y).  [resolve(89,a,90,a)].
Derived: -BCont(x,y) | -BCont(x,z) | BCont(f3(y,z),z).  [resolve(89,a,91,a)].

Eliminating Min/1
92 BCont(x,y) | ZEX(x) | Min(f4(x,y)).  [clausify(4)].
93 -BCont(x,y) | -P(z,x) | -Min(z) | BCont(z,y).  [clausify(4)].
Derived: BCont(x,y) | ZEX(x) | -BCont(z,u) | -P(f4(x,y),z) | BCont(f4(x,y),u).  [resolve(92,c,93,c)].
94 ZEX(x) | Min(f6(x)).  [clausify(12)].
Derived: ZEX(x) | -BCont(y,z) | -P(f6(x),y) | BCont(f6(x),z).  [resolve(94,b,93,c)].
95 -SC(x,y) | -Min(x) | -P(x,z) | -Cont(y,z) | -Cont(u,x) | -Cont(u,y) | BCont(u,x).  [clausify(16)].
Derived: -SC(f4(x,y),z) | -P(f4(x,y),u) | -Cont(z,u) | -Cont(w,f4(x,y)) | -Cont(w,z) | BCont(w,f4(x,y)) | BCont(x,y) | ZEX(x).  [resolve(95,b,92,c)].
Derived: -SC(f6(x),y) | -P(f6(x),z) | -Cont(y,z) | -Cont(u,f6(x)) | -Cont(u,y) | BCont(u,f6(x)) | ZEX(x).  [resolve(95,b,94,b)].
96 -Min(x) | -ZEX(x).  [clausify(27)].
Derived: -ZEX(f4(x,y)) | BCont(x,y) | ZEX(x).  [resolve(96,a,92,c)].
Derived: -ZEX(f6(x)) | ZEX(x).  [resolve(96,a,94,b)].
97 -Min(x) | -PP(y,x).  [clausify(27)].
Derived: -PP(x,f4(y,z)) | BCont(y,z) | ZEX(y).  [resolve(97,a,92,c)].
Derived: -PP(x,f6(y)) | ZEX(y).  [resolve(97,a,94,b)].
98 Min(x) | ZEX(x) | PP(f12(x),x).  [clausify(27)].
Derived: ZEX(x) | PP(f12(x),x) | -BCont(y,z) | -P(x,y) | BCont(x,z).  [resolve(98,a,93,c)].
Derived: ZEX(x) | PP(f12(x),x) | -SC(x,y) | -P(x,z) | -Cont(y,z) | -Cont(u,x) | -Cont(u,y) | BCont(u,x).  [resolve(98,a,95,b)].
Derived: ZEX(x) | PP(f12(x),x) | -PP(y,x).  [resolve(98,a,97,a)].

Eliminating TCont/2
99 TCont(x,y) | -Cont(x,y) | -Cont(z,x) | -BCont(z,y).  [clausify(13)].
100 -TCont(x,y) | Cont(x,y).  [clausify(13)].
101 -TCont(x,y) | Cont(f7(x,y),x).  [clausify(13)].
102 -TCont(x,y) | BCont(f7(x,y),y).  [clausify(13)].
Derived: -Cont(x,y) | -Cont(z,x) | -BCont(z,y) | Cont(f7(x,y),x).  [resolve(99,a,101,a)].
Derived: -Cont(x,y) | -Cont(z,x) | -BCont(z,y) | BCont(f7(x,y),y).  [resolve(99,a,102,a)].

Eliminating Closed/1
103 Closed(x) | BCont(f8(x),x).  [clausify(14)].
104 -Closed(x) | -BCont(y,x).  [clausify(14)].
Derived: BCont(f8(x),x) | -BCont(y,x).  [resolve(103,a,104,a)].

Eliminating Covers/2
105 Covers(x,y) | -(y < x) | y < f24(x,y).  [clausify(79)].
106 -SC(x,y) | -P(x,z) | -P(y,z) | -Cont(u,x) | -Cont(u,y) | -Covers(z,u) | -BCont(u,z).  [clausify(17)].
107 -Covers(x,y) | y < x.  [clausify(79)].
108 -Covers(x,y) | -(y < z) | -(z < x).  [clausify(79)].
Derived: -(x < y) | x < f24(y,x) | -SC(z,u) | -P(z,y) | -P(u,y) | -Cont(x,z) | -Cont(x,u) | -BCont(x,y).  [resolve(105,a,106,f)].
Derived: -(x < y) | x < f24(y,x) | -(x < z) | -(z < y).  [resolve(105,a,108,a)].
109 Covers(x,y) | -(y < x) | f24(x,y) < x.  [clausify(79)].
Derived: -(x < y) | f24(y,x) < y | -SC(z,u) | -P(z,y) | -P(u,y) | -Cont(x,z) | -Cont(x,u) | -BCont(x,y).  [resolve(109,a,106,f)].
Derived: -(x < y) | f24(y,x) < y | -(x < z) | -(z < y).  [resolve(109,a,108,a)].

Eliminating Max/1
110 Max(x) | ZEX(x) | PP(x,f11(x)).  [clausify(26)].
111 -Max(x) | -ZEX(x).  [clausify(26)].
112 -Max(x) | -PP(x,y).  [clausify(26)].
Derived: ZEX(x) | PP(x,f11(x)) | -PP(x,y).  [resolve(110,a,112,a)].

Eliminating MinDim/1
113 -MinDim(x) | -ZEX(x).  [clausify(78)].
114 MinDim(c3).  [clausify(64)].
Derived: -ZEX(c3).  [resolve(113,a,114,a)].
115 -MinDim(x) | -(y < x) | ZEX(y).  [clausify(78)].
Derived: -(x < c3) | ZEX(x).  [resolve(115,a,114,a)].
116 MinDim(x) | ZEX(x) | f23(x) < x.  [clausify(78)].
Derived: ZEX(x) | f23(x) < x | -(y < x) | ZEX(y).  [resolve(116,a,115,a)].
117 MinDim(x) | ZEX(x) | -ZEX(f23(x)).  [clausify(78)].
Derived: ZEX(x) | -ZEX(f23(x)) | -(y < x) | ZEX(y).  [resolve(117,a,115,a)].

Eliminating MaxDim/1
118 MaxDim(x) | -(f22(x) <= x).  [clausify(77)].
119 -MaxDim(x) | y <= x.  [clausify(77)].
Derived: -(f22(x) <= x) | y <= x.  [resolve(118,a,119,a)].

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, ZEX, Cont, <, BCont, P, SC, EqDim, Inc, <=, PP, ICont, C, PO ]).
Function symbol precedence:  function_order([ c1, c2, c3, c4, c5, intersection, difference, f1, f2, f3, f4, f5, f7, f13, f14, f15, f16, f17, f18, f19, f20, f21, f24, f6, f8, f11, f12, f22, f23, f9, f10 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.03 seconds.

NOTE: Back_subsumption disabled, ratio of kept to back_subsumed is 227 (0.00 of 0.13 sec).

============================== PROOF =================================

% Proof 1 at 0.29 (+ 0.01) seconds.
% Length of proof is 15.
% Level of proof is 4.
% Maximum clause weight is 9.000.
% Given clauses 921.

2 (all x all y (IBC(x,y) <-> (exists z (Cont(z,x) & -BCont(z,x) & BCont(z,y))))) # label(non_clause).  [assumption].
15 (all x all y (BCont(x,y) -> Cont(x,y) & Inc(x,y))) # label(non_clause).  [assumption].
63 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
80 (all x all y (IBC(y,x) -> C(x,y))) # label(non_clause) # label(goal).  [goal].
85 -IBC(x,y) | Cont(f2(x,y),x).  [clausify(2)].
87 -IBC(x,y) | BCont(f2(x,y),y).  [clausify(2)].
88 IBC(c5,c4).  [deny(80)].
136 -BCont(x,y) | Cont(x,y).  [clausify(15)].
218 C(x,y) | -Cont(z,x) | -Cont(z,y).  [clausify(63)].
231 -C(c4,c5).  [deny(80)].
237 Cont(f2(c5,c4),c5).  [resolve(88,a,85,a)].
239 BCont(f2(c5,c4),c4).  [resolve(88,a,87,a)].
410 C(x,c5) | -Cont(f2(c5,c4),x).  [resolve(237,a,218,c)].
427 Cont(f2(c5,c4),c4).  [resolve(239,a,136,a)].
6171 $F.  [resolve(410,b,427,a),unit_del(a,231)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=921. Generated=8419. Kept=6051. proofs=1.
Usable=894. Sos=4682. Demods=327. Limbo=0, Disabled=667. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=2367. Back_subsumed=9.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=327 (0 lex), Back_demodulated=111. Back_unit_deleted=355.
Demod_attempts=91081. Demod_rewrites=775.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=27762. Nonunit_bsub_feature_tests=5238.
Megabytes=12.99.
User_CPU=0.29, System_CPU=0.01, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 17848 exit (max_proofs) Tue Oct 23 21:44:47 2012
