============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 9779 was started by torsten on stl-ws2,
Wed Aug  7 17:18:00 2013
The command was "mace4 -v0 -t300 -s60 -n2 -N40 -f /stl/torsten/git/macleod/qs/multidim_mereotopology_cont/definitions/p9/c.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_cont/p9/cont_c_ext.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/sc.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/point.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/consistency/p9/curve_segment_nonsimple_all_weak_nontrivial.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/curve_segment.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/min_max_dim.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_cont/p9/cont_basic.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/inc.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/p9/dim_basic.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/endpoint.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/p9/dim_prime_linear.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/curve.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/p9/dim_prime_linear_unbounded.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/p9/codib_curve_endpoints.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_cont/p9/cont_ext.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/simple_curve_segment.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/theorems/p9/po_theorems.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/p9/codib.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/dim_defs.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/p9/codi.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/branchpoint.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/p9/codi_bcont.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/atomic_curve_segment.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/dim_basic_defs.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/closed.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/min_max_in_dim.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/atomic_loop_curve.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/p9/codi_linear.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/covers.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/po.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/ep.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/epp.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/atomic_ray_curve.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/atomic_curve.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/p9/codib_atomic_curves.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/theorems/p9/inc_theorems.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/p9/codi_basic.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/p9/codi_atomic_points.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/eq_dim.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/theorems/p9/sc_theorems.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_cont/definitions/p9/c.p9


formulas(sos).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_cont/p9/cont_c_ext.p9


formulas(sos).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/sc.p9


formulas(sos).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/point.p9


formulas(sos).
(all x (Point(x) <-> Max(x) & MinDim(x))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/consistency/p9/curve_segment_nonsimple_all_weak_nontrivial.p9


formulas(sos).
(exists x0 exists x1 (Endpoint(x0,x1) & x0 != x1)).
(exists x0 exists x1 (-Endpoint(x0,x1) & x0 != x1)).
(exists x0 exists x1 (Endpoint(x0,x1) & x1 != x0)).
(exists x0 exists x1 (-Endpoint(x0,x1) & x1 != x0)).
(exists x0 exists x1 (x0 <= x1 & x0 != x1)).
(exists x0 exists x1 (-(x0 <= x1) & x0 != x1)).
(exists x0 exists x1 (x0 <= x1 & x1 != x0)).
(exists x0 exists x1 (-(x0 <= x1) & x1 != x0)).
(exists x0 AtomicCurveSegment(x0)).
(exists x0 -AtomicCurveSegment(x0)).
(exists x0 AtomicRayCurve(x0)).
(exists x0 -AtomicRayCurve(x0)).
(exists x0 exists x1 (x0 > x1 & x0 != x1)).
(exists x0 exists x1 (-(x0 > x1) & x0 != x1)).
(exists x0 exists x1 (x0 > x1 & x1 != x0)).
(exists x0 exists x1 (-(x0 > x1) & x1 != x0)).
(exists x0 (CurveSegment(x0) & -SimpleCurveSegment(x0))).
(exists x0 -CurveSegment(x0)).
(exists x0 exists x1 (P(x0,x1) & x0 != x1)).
(exists x0 exists x1 (-P(x0,x1) & x0 != x1)).
(exists x0 exists x1 (P(x0,x1) & x1 != x0)).
(exists x0 exists x1 (-P(x0,x1) & x1 != x0)).
(exists x0 MaxDim(x0)).
(exists x0 -MaxDim(x0)).
(exists x0 Max(x0)).
(exists x0 -Max(x0)).
(exists x0 Point(x0)).
(exists x0 -Point(x0)).
(exists x0 AtomicLoopCurve(x0)).
(exists x0 -AtomicLoopCurve(x0)).
(exists x0 exists x1 (SC(x0,x1) & x0 != x1)).
(exists x0 exists x1 (-SC(x0,x1) & x0 != x1)).
(exists x0 exists x1 (SC(x0,x1) & x1 != x0)).
(exists x0 exists x1 (-SC(x0,x1) & x1 != x0)).
(exists x0 exists x1 (x0 < x1 & x0 != x1)).
(exists x0 exists x1 (-(x0 < x1) & x0 != x1)).
(exists x0 exists x1 (x0 < x1 & x1 != x0)).
(exists x0 exists x1 (-(x0 < x1) & x1 != x0)).
(exists x0 AtomicCurve(x0)).
(exists x0 -AtomicCurve(x0)).
(exists x0 Curve(x0)).
(exists x0 -Curve(x0)).
(exists x0 exists x1 (Cont(x0,x1) & x0 != x1)).
(exists x0 exists x1 (-Cont(x0,x1) & x0 != x1)).
(exists x0 exists x1 (Cont(x0,x1) & x1 != x0)).
(exists x0 exists x1 (-Cont(x0,x1) & x1 != x0)).
(exists x0 ZEX(x0)).
(exists x0 -ZEX(x0)).
(exists x0 Min(x0)).
(exists x0 -Min(x0)).
(exists x0 exists x1 (Inc(x0,x1) & x0 != x1)).
(exists x0 exists x1 (-Inc(x0,x1) & x0 != x1)).
(exists x0 exists x1 (Inc(x0,x1) & x1 != x0)).
(exists x0 exists x1 (-Inc(x0,x1) & x1 != x0)).
(exists x0 exists x1 (PP(x0,x1) & x0 != x1)).
(exists x0 exists x1 (-PP(x0,x1) & x0 != x1)).
(exists x0 exists x1 (PP(x0,x1) & x1 != x0)).
(exists x0 exists x1 (-PP(x0,x1) & x1 != x0)).
(exists x0 MinDim(x0)).
(exists x0 -MinDim(x0)).
(exists x0 exists x1 (BCont(x0,x1) & x0 != x1)).
(exists x0 exists x1 (-BCont(x0,x1) & x0 != x1)).
(exists x0 exists x1 (BCont(x0,x1) & x1 != x0)).
(exists x0 exists x1 (-BCont(x0,x1) & x1 != x0)).
(exists x0 exists x1 (Covers(x0,x1) & x0 != x1)).
(exists x0 exists x1 (-Covers(x0,x1) & x0 != x1)).
(exists x0 exists x1 (Covers(x0,x1) & x1 != x0)).
(exists x0 exists x1 (-Covers(x0,x1) & x1 != x0)).
(exists x0 exists x1 (EqDim(x0,x1) & x0 != x1)).
(exists x0 exists x1 (-EqDim(x0,x1) & x0 != x1)).
(exists x0 exists x1 (EqDim(x0,x1) & x1 != x0)).
(exists x0 exists x1 (-EqDim(x0,x1) & x1 != x0)).
(exists x0 exists x1 (PO(x0,x1) & x0 != x1)).
(exists x0 exists x1 (-PO(x0,x1) & x0 != x1)).
(exists x0 exists x1 (PO(x0,x1) & x1 != x0)).
(exists x0 exists x1 (-PO(x0,x1) & x1 != x0)).
(exists x0 exists x1 (C(x0,x1) & x0 != x1)).
(exists x0 exists x1 (-C(x0,x1) & x0 != x1)).
(exists x0 exists x1 (C(x0,x1) & x1 != x0)).
(exists x0 exists x1 (-C(x0,x1) & x1 != x0)).
(exists x0 Closed(x0)).
(exists x0 -Closed(x0)).
(exists x0 exists x1 (x0 >= x1 & x0 != x1)).
(exists x0 exists x1 (-(x0 >= x1) & x0 != x1)).
(exists x0 exists x1 (x0 >= x1 & x1 != x0)).
(exists x0 exists x1 (-(x0 >= x1) & x1 != x0)).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/curve_segment.p9


formulas(sos).
(all x (CurveSegment(x) <-> Curve(x) & (all y (P(y,x) -> (exists z (AtomicCurveSegment(z) & PO(y,z))))))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/min_max_dim.p9


formulas(sos).
(all x (MaxDim(x) <-> (all y y <= x))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_cont/p9/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/inc.p9


formulas(sos).
(all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/p9/dim_basic.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y < z -> x < z)).
(all x EqDim(x,x)).
(all x all y (EqDim(x,y) -> EqDim(y,x))).
(all x all y all z (EqDim(x,y) & EqDim(y,z) -> EqDim(x,z))).
(all x all y (x < y -> -EqDim(x,y))).
(all x all y all z (EqDim(x,y) -> (z < x -> z < y))).
(all x all y all z (EqDim(x,y) -> (x < z -> y < z))).
(exists x (-ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/endpoint.p9


formulas(sos).
(all x all y (Endpoint(x,y) <-> Point(x) & Curve(y) & BCont(x,y))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/p9/dim_prime_linear.p9


formulas(sos).
(exists x MinDim(x)).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/curve.p9


formulas(sos).
(all x (Curve(x) <-> (all y (Point(y) -> Covers(x,y))))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/p9/dim_prime_linear_unbounded.p9


formulas(sos).
(all x x <= x).
(all x all y all z (x <= y & y <= z -> x <= z)).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) -> x <= y)).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/p9/codib_curve_endpoints.p9


formulas(sos).
(all x all y (Point(x) & Curve(y) & -AtomicCurveSegment(y) -> (BCont(x,y) <-> (exists s1 (AtomicCurve(s1) & P(s1,y) & BCont(x,s1) & (all s2 (P(s2,y) & AtomicCurve(s2) & BCont(x,s2) -> s1 = s2))))))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_cont/p9/cont_ext.p9


formulas(sos).
(all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/simple_curve_segment.p9


formulas(sos).
(all x (SimpleCurveSegment(x) <-> Curve(x) & (exists p1 exists p2 (p1 != p2 & Endpoint(p1,x) & Endpoint(p2,x) & (all p3 (Endpoint(p3,x) -> p1 = p3 | p2 = p3)))) & -(exists p3 Branchpoint(p3,x)))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/theorems/p9/po_theorems.p9


formulas(sos).
(all x (-ZEX(x) -> PO(x,x))).
(all x all y (PO(x,y) -> PO(y,x))).
(all x all y (PO(x,y) -> EqDim(x,y))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/p9/codib.p9


formulas(sos).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/dim_defs.p9


formulas(sos).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/p9/codi.p9


formulas(sos).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/branchpoint.p9


formulas(sos).
(all x all y (Branchpoint(x,y) <-> Point(x) & Curve(y) & Cont(x,y) & ((exists s1 exists s2 (AtomicCurveSegment(s1) & AtomicLoopCurve(s2) & Cont(s1,y) & Cont(s2,y) & s1 != s2 & Cont(x,s1) & Cont(x,s2))) | (exists s1 exists s2 exists s3 (AtomicCurveSegment(s1) & AtomicCurveSegment(s2) & AtomicCurveSegment(s3) & Cont(s1,y) & Cont(s2,y) & Cont(s3,y) & s1 != s2 & s1 != s3 & s2 != s3 & Cont(x,s1) & Cont(x,s2) & Cont(x,s3)))))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/p9/codi_bcont.p9


formulas(sos).
(all x all y (BCont(x,y) -> Cont(x,y) & Inc(x,y))).
(all x all y all v all z (SC(x,y) & Min(x) & P(x,v) & Cont(y,v) & Cont(z,x) & Cont(z,y) -> BCont(z,x))).
(all x all y all z all v (SC(x,y) & P(x,v) & P(y,v) & Cont(z,x) & Cont(z,y) & Covers(v,z) -> -BCont(z,v))).
(all x all y all z (BCont(x,y) & P(y,z) & (all v all w (P(v,z) & -PO(v,y) & P(w,x) -> -Cont(w,v))) -> BCont(x,z))).
(all x all y all z (BCont(x,y) & Cont(z,x) -> BCont(z,y))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/atomic_curve_segment.p9


formulas(sos).
(all x (AtomicCurveSegment(x) <-> Curve(x) & (all y -PP(y,x)) & (exists p1 exists p2 (Endpoint(p1,x) & Endpoint(p2,x) & p1 != p2 & (all z (Point(z) & Cont(z,x) -> p1 = z | p2 = z)))))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/dim_basic_defs.p9


formulas(sos).
(all x all y (x > y <-> y < x)).
(all x all y (x >= y <-> y <= x)).
(all x all y (x < y <-> x <= y & -EqDim(x,y))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/closed.p9


formulas(sos).
(all x (Closed(x) <-> (all y -BCont(y,x)))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/min_max_in_dim.p9


formulas(sos).
(all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))).
(all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/atomic_loop_curve.p9


formulas(sos).
(all x (AtomicLoopCurve(x) <-> Curve(x) & (all y -PP(y,x)) & (exists y (Point(y) & Cont(y,x) & (all z (Point(z) & Cont(z,x) -> y = z)))) & -(exists y Endpoint(y,x)))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/p9/codi_linear.p9


formulas(sos).
(all x all y (Cont(x,y) -> x < y | EqDim(x,y))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/covers.p9


formulas(sos).
(all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/po.p9


formulas(sos).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/epp.p9


formulas(sos).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/atomic_ray_curve.p9


formulas(sos).
(all x (AtomicRayCurve(x) <-> Curve(x) & (all y -PP(y,x)) & (exists y (Endpoint(y,x) & (all z (Point(z) & Cont(z,x) -> y = z)))))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/atomic_curve.p9


formulas(sos).
(all x (AtomicCurve(x) <-> AtomicCurveSegment(x) | AtomicLoopCurve(x) | AtomicRayCurve(x))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/p9/codib_atomic_curves.p9


formulas(sos).
(all x all y (AtomicCurve(x) & -AtomicLoopCurve(x) & Cont(y,x) & x != y -> Point(y) & BCont(y,x))).
(all x all p1 all p2 all p3 (AtomicCurve(x) & Point(p1) & Point(p2) & Point(p3) & Cont(p1,x) & Cont(p2,x) & Cont(p3,x) -> p1 = p2 | p1 = p3 | p2 = p3)).
(all x all p1 all p2 (AtomicCurve(x) & Point(p1) & Point(p2) & p1 != p2 & Cont(p1,x) & Cont(p2,x) -> -Closed(x))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/theorems/p9/inc_theorems.p9


formulas(sos).
(all x -Inc(x,x)).
(all x all y (Inc(x,y) -> Inc(y,x))).
(all x all y (EqDim(x,y) -> -Inc(x,y))).
(all x all y (Inc(x,y) -> x < y | y < x)).
(all x all y (Cont(x,y) & x < y -> Inc(x,y))).
(all x all y all z (Inc(x,y) & P(y,z) -> Inc(x,z))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/p9/codi_basic.p9


formulas(sos).
(all x all y (Cont(x,y) -> x < y | EqDim(x,y))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/p9/codi_atomic_points.p9


formulas(sos).
(all x (Point(x) -> (all y (Cont(y,x) -> x = y)))).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/eq_dim.p9


formulas(sos).
(all x all y (EqDim(x,y) <-> x <= y & y <= x)).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/theorems/p9/sc_theorems.p9


formulas(sos).
(all x all y (SC(x,y) -> C(x,y))).
(all x all y (SC(x,y) -> -(exists z (Cont(z,x) & P(z,y))))).
(all x all y (SC(x,y) -> -(exists z (P(z,x) & Cont(z,y))))).
(all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))).
(all x -SC(x,x)).
(all x all y (SC(x,y) -> SC(y,x))).
(all x all y (SC(x,y) -> (exists z (z < x & z < y & Cont(z,x) & Cont(z,y))))).
end_of_list.

% From the command line: clear(verbose).

% From the command line: assign(max_seconds, 300).

% From the command line: assign(max_seconds_per, 60).
    % assign(domain_size, 2) -> assign(start_size, 2).
    % assign(domain_size, 2) -> assign(end_size, 2).

% From the command line: assign(domain_size, 2).

% From the command line: assign(end_size, 40).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
2 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))) # label(non_clause).  [assumption].
3 (all x (Point(x) <-> Max(x) & MinDim(x))) # label(non_clause).  [assumption].
4 (exists x0 exists x1 (Endpoint(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
5 (exists x0 exists x1 (-Endpoint(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
6 (exists x0 exists x1 (Endpoint(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
7 (exists x0 exists x1 (-Endpoint(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
8 (exists x0 exists x1 (x0 <= x1 & x0 != x1)) # label(non_clause).  [assumption].
9 (exists x0 exists x1 (-(x0 <= x1) & x0 != x1)) # label(non_clause).  [assumption].
10 (exists x0 exists x1 (x0 <= x1 & x1 != x0)) # label(non_clause).  [assumption].
11 (exists x0 exists x1 (-(x0 <= x1) & x1 != x0)) # label(non_clause).  [assumption].
12 (exists x0 AtomicCurveSegment(x0)) # label(non_clause).  [assumption].
13 (exists x0 -AtomicCurveSegment(x0)) # label(non_clause).  [assumption].
14 (exists x0 AtomicRayCurve(x0)) # label(non_clause).  [assumption].
15 (exists x0 -AtomicRayCurve(x0)) # label(non_clause).  [assumption].
16 (exists x0 exists x1 (x0 > x1 & x0 != x1)) # label(non_clause).  [assumption].
17 (exists x0 exists x1 (-(x0 > x1) & x0 != x1)) # label(non_clause).  [assumption].
18 (exists x0 exists x1 (x0 > x1 & x1 != x0)) # label(non_clause).  [assumption].
19 (exists x0 exists x1 (-(x0 > x1) & x1 != x0)) # label(non_clause).  [assumption].
20 (exists x0 (CurveSegment(x0) & -SimpleCurveSegment(x0))) # label(non_clause).  [assumption].
21 (exists x0 -CurveSegment(x0)) # label(non_clause).  [assumption].
22 (exists x0 exists x1 (P(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
23 (exists x0 exists x1 (-P(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
24 (exists x0 exists x1 (P(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
25 (exists x0 exists x1 (-P(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
26 (exists x0 MaxDim(x0)) # label(non_clause).  [assumption].
27 (exists x0 -MaxDim(x0)) # label(non_clause).  [assumption].
28 (exists x0 Max(x0)) # label(non_clause).  [assumption].
29 (exists x0 -Max(x0)) # label(non_clause).  [assumption].
30 (exists x0 Point(x0)) # label(non_clause).  [assumption].
31 (exists x0 -Point(x0)) # label(non_clause).  [assumption].
32 (exists x0 AtomicLoopCurve(x0)) # label(non_clause).  [assumption].
33 (exists x0 -AtomicLoopCurve(x0)) # label(non_clause).  [assumption].
34 (exists x0 exists x1 (SC(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
35 (exists x0 exists x1 (-SC(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
36 (exists x0 exists x1 (SC(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
37 (exists x0 exists x1 (-SC(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
38 (exists x0 exists x1 (x0 < x1 & x0 != x1)) # label(non_clause).  [assumption].
39 (exists x0 exists x1 (-(x0 < x1) & x0 != x1)) # label(non_clause).  [assumption].
40 (exists x0 exists x1 (x0 < x1 & x1 != x0)) # label(non_clause).  [assumption].
41 (exists x0 exists x1 (-(x0 < x1) & x1 != x0)) # label(non_clause).  [assumption].
42 (exists x0 AtomicCurve(x0)) # label(non_clause).  [assumption].
43 (exists x0 -AtomicCurve(x0)) # label(non_clause).  [assumption].
44 (exists x0 Curve(x0)) # label(non_clause).  [assumption].
45 (exists x0 -Curve(x0)) # label(non_clause).  [assumption].
46 (exists x0 exists x1 (Cont(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
47 (exists x0 exists x1 (-Cont(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
48 (exists x0 exists x1 (Cont(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
49 (exists x0 exists x1 (-Cont(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
50 (exists x0 ZEX(x0)) # label(non_clause).  [assumption].
51 (exists x0 -ZEX(x0)) # label(non_clause).  [assumption].
52 (exists x0 Min(x0)) # label(non_clause).  [assumption].
53 (exists x0 -Min(x0)) # label(non_clause).  [assumption].
54 (exists x0 exists x1 (Inc(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
55 (exists x0 exists x1 (-Inc(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
56 (exists x0 exists x1 (Inc(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
57 (exists x0 exists x1 (-Inc(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
58 (exists x0 exists x1 (PP(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
59 (exists x0 exists x1 (-PP(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
60 (exists x0 exists x1 (PP(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
61 (exists x0 exists x1 (-PP(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
62 (exists x0 MinDim(x0)) # label(non_clause).  [assumption].
63 (exists x0 -MinDim(x0)) # label(non_clause).  [assumption].
64 (exists x0 exists x1 (BCont(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
65 (exists x0 exists x1 (-BCont(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
66 (exists x0 exists x1 (BCont(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
67 (exists x0 exists x1 (-BCont(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
68 (exists x0 exists x1 (Covers(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
69 (exists x0 exists x1 (-Covers(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
70 (exists x0 exists x1 (Covers(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
71 (exists x0 exists x1 (-Covers(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
72 (exists x0 exists x1 (EqDim(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
73 (exists x0 exists x1 (-EqDim(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
74 (exists x0 exists x1 (EqDim(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
75 (exists x0 exists x1 (-EqDim(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
76 (exists x0 exists x1 (PO(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
77 (exists x0 exists x1 (-PO(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
78 (exists x0 exists x1 (PO(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
79 (exists x0 exists x1 (-PO(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
80 (exists x0 exists x1 (C(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
81 (exists x0 exists x1 (-C(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
82 (exists x0 exists x1 (C(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
83 (exists x0 exists x1 (-C(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
84 (exists x0 Closed(x0)) # label(non_clause).  [assumption].
85 (exists x0 -Closed(x0)) # label(non_clause).  [assumption].
86 (exists x0 exists x1 (x0 >= x1 & x0 != x1)) # label(non_clause).  [assumption].
87 (exists x0 exists x1 (-(x0 >= x1) & x0 != x1)) # label(non_clause).  [assumption].
88 (exists x0 exists x1 (x0 >= x1 & x1 != x0)) # label(non_clause).  [assumption].
89 (exists x0 exists x1 (-(x0 >= x1) & x1 != x0)) # label(non_clause).  [assumption].
90 (all x (CurveSegment(x) <-> Curve(x) & (all y (P(y,x) -> (exists z (AtomicCurveSegment(z) & PO(y,z))))))) # label(non_clause).  [assumption].
91 (all x (MaxDim(x) <-> (all y y <= x))) # label(non_clause).  [assumption].
92 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
93 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
94 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
95 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
96 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
97 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
98 (all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))) # label(non_clause).  [assumption].
99 (all x -(x < x)) # label(non_clause).  [assumption].
100 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
101 (all x all y all z (x < y & y < z -> x < z)) # label(non_clause).  [assumption].
102 (all x EqDim(x,x)) # label(non_clause).  [assumption].
103 (all x all y (EqDim(x,y) -> EqDim(y,x))) # label(non_clause).  [assumption].
104 (all x all y all z (EqDim(x,y) & EqDim(y,z) -> EqDim(x,z))) # label(non_clause).  [assumption].
105 (all x all y (x < y -> -EqDim(x,y))) # label(non_clause).  [assumption].
106 (all x all y all z (EqDim(x,y) -> (z < x -> z < y))) # label(non_clause).  [assumption].
107 (all x all y all z (EqDim(x,y) -> (x < z -> y < z))) # label(non_clause).  [assumption].
108 (exists x (-ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
109 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
110 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
111 (all x all y (Endpoint(x,y) <-> Point(x) & Curve(y) & BCont(x,y))) # label(non_clause).  [assumption].
112 (exists x MinDim(x)) # label(non_clause).  [assumption].
113 (all x (Curve(x) <-> (all y (Point(y) -> Covers(x,y))))) # label(non_clause).  [assumption].
114 (all x x <= x) # label(non_clause).  [assumption].
115 (all x all y all z (x <= y & y <= z -> x <= z)) # label(non_clause).  [assumption].
116 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
117 (all x all y (ZEX(x) -> x <= y)) # label(non_clause).  [assumption].
118 (all x all y (Point(x) & Curve(y) & -AtomicCurveSegment(y) -> (BCont(x,y) <-> (exists s1 (AtomicCurve(s1) & P(s1,y) & BCont(x,s1) & (all s2 (P(s2,y) & AtomicCurve(s2) & BCont(x,s2) -> s1 = s2))))))) # label(non_clause).  [assumption].
119 (all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)) # label(non_clause).  [assumption].
120 (all x (SimpleCurveSegment(x) <-> Curve(x) & (exists p1 exists p2 (p1 != p2 & Endpoint(p1,x) & Endpoint(p2,x) & (all p3 (Endpoint(p3,x) -> p1 = p3 | p2 = p3)))) & -(exists p3 Branchpoint(p3,x)))) # label(non_clause).  [assumption].
121 (all x (-ZEX(x) -> PO(x,x))) # label(non_clause).  [assumption].
122 (all x all y (PO(x,y) -> PO(y,x))) # label(non_clause).  [assumption].
123 (all x all y (PO(x,y) -> EqDim(x,y))) # label(non_clause).  [assumption].
124 (all x all y (Branchpoint(x,y) <-> Point(x) & Curve(y) & Cont(x,y) & ((exists s1 exists s2 (AtomicCurveSegment(s1) & AtomicLoopCurve(s2) & Cont(s1,y) & Cont(s2,y) & s1 != s2 & Cont(x,s1) & Cont(x,s2))) | (exists s1 exists s2 exists s3 (AtomicCurveSegment(s1) & AtomicCurveSegment(s2) & AtomicCurveSegment(s3) & Cont(s1,y) & Cont(s2,y) & Cont(s3,y) & s1 != s2 & s1 != s3 & s2 != s3 & Cont(x,s1) & Cont(x,s2) & Cont(x,s3)))))) # label(non_clause).  [assumption].
125 (all x all y (BCont(x,y) -> Cont(x,y) & Inc(x,y))) # label(non_clause).  [assumption].
126 (all x all y all v all z (SC(x,y) & Min(x) & P(x,v) & Cont(y,v) & Cont(z,x) & Cont(z,y) -> BCont(z,x))) # label(non_clause).  [assumption].
127 (all x all y all z all v (SC(x,y) & P(x,v) & P(y,v) & Cont(z,x) & Cont(z,y) & Covers(v,z) -> -BCont(z,v))) # label(non_clause).  [assumption].
128 (all x all y all z (BCont(x,y) & P(y,z) & (all v all w (P(v,z) & -PO(v,y) & P(w,x) -> -Cont(w,v))) -> BCont(x,z))) # label(non_clause).  [assumption].
129 (all x all y all z (BCont(x,y) & Cont(z,x) -> BCont(z,y))) # label(non_clause).  [assumption].
130 (all x (AtomicCurveSegment(x) <-> Curve(x) & (all y -PP(y,x)) & (exists p1 exists p2 (Endpoint(p1,x) & Endpoint(p2,x) & p1 != p2 & (all z (Point(z) & Cont(z,x) -> p1 = z | p2 = z)))))) # label(non_clause).  [assumption].
131 (all x all y (x > y <-> y < x)) # label(non_clause).  [assumption].
132 (all x all y (x >= y <-> y <= x)) # label(non_clause).  [assumption].
133 (all x all y (x < y <-> x <= y & -EqDim(x,y))) # label(non_clause).  [assumption].
134 (all x (Closed(x) <-> (all y -BCont(y,x)))) # label(non_clause).  [assumption].
135 (all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))) # label(non_clause).  [assumption].
136 (all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))) # label(non_clause).  [assumption].
137 (all x (AtomicLoopCurve(x) <-> Curve(x) & (all y -PP(y,x)) & (exists y (Point(y) & Cont(y,x) & (all z (Point(z) & Cont(z,x) -> y = z)))) & -(exists y Endpoint(y,x)))) # label(non_clause).  [assumption].
138 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
139 (all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))) # label(non_clause).  [assumption].
140 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
141 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
142 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
143 (all x (AtomicRayCurve(x) <-> Curve(x) & (all y -PP(y,x)) & (exists y (Endpoint(y,x) & (all z (Point(z) & Cont(z,x) -> y = z)))))) # label(non_clause).  [assumption].
144 (all x (AtomicCurve(x) <-> AtomicCurveSegment(x) | AtomicLoopCurve(x) | AtomicRayCurve(x))) # label(non_clause).  [assumption].
145 (all x all y (AtomicCurve(x) & -AtomicLoopCurve(x) & Cont(y,x) & x != y -> Point(y) & BCont(y,x))) # label(non_clause).  [assumption].
146 (all x all p1 all p2 all p3 (AtomicCurve(x) & Point(p1) & Point(p2) & Point(p3) & Cont(p1,x) & Cont(p2,x) & Cont(p3,x) -> p1 = p2 | p1 = p3 | p2 = p3)) # label(non_clause).  [assumption].
147 (all x all p1 all p2 (AtomicCurve(x) & Point(p1) & Point(p2) & p1 != p2 & Cont(p1,x) & Cont(p2,x) -> -Closed(x))) # label(non_clause).  [assumption].
148 (all x -Inc(x,x)) # label(non_clause).  [assumption].
149 (all x all y (Inc(x,y) -> Inc(y,x))) # label(non_clause).  [assumption].
150 (all x all y (EqDim(x,y) -> -Inc(x,y))) # label(non_clause).  [assumption].
151 (all x all y (Inc(x,y) -> x < y | y < x)) # label(non_clause).  [assumption].
152 (all x all y (Cont(x,y) & x < y -> Inc(x,y))) # label(non_clause).  [assumption].
153 (all x all y all z (Inc(x,y) & P(y,z) -> Inc(x,z))) # label(non_clause).  [assumption].
154 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
155 (all x (Point(x) -> (all y (Cont(y,x) -> x = y)))) # label(non_clause).  [assumption].
156 (all x all y (EqDim(x,y) <-> x <= y & y <= x)) # label(non_clause).  [assumption].
157 (all x all y (SC(x,y) -> C(x,y))) # label(non_clause).  [assumption].
158 (all x all y (SC(x,y) -> -(exists z (Cont(z,x) & P(z,y))))) # label(non_clause).  [assumption].
159 (all x all y (SC(x,y) -> -(exists z (P(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
160 (all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))) # label(non_clause).  [assumption].
161 (all x -SC(x,x)) # label(non_clause).  [assumption].
162 (all x all y (SC(x,y) -> SC(y,x))) # label(non_clause).  [assumption].
163 (all x all y (SC(x,y) -> (exists z (z < x & z < y & Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-C(x,y) | Cont(f1(x,y),x).
-C(x,y) | Cont(f1(x,y),y).
C(x,y) | -Cont(z,x) | -Cont(z,y).
-SC(x,y) | Cont(f2(x,y),x).
-SC(x,y) | Cont(f2(x,y),y).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | z < x.
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | z < y.
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f3(x,y),x).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f3(x,y),y).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | -(f3(x,y) < x) | -(f3(x,y) < y).
-Point(x) | Max(x).
-Point(x) | MinDim(x).
Point(x) | -Max(x) | -MinDim(x).
Endpoint(c1,c2).
c2 != c1.
-Endpoint(c3,c4).
c4 != c3.
Endpoint(c5,c6).
c6 != c5.
-Endpoint(c7,c8).
c8 != c7.
c9 <= c10.
c10 != c9.
-(c11 <= c12).
c12 != c11.
c13 <= c14.
c14 != c13.
-(c15 <= c16).
c16 != c15.
AtomicCurveSegment(c17).
-AtomicCurveSegment(c18).
AtomicRayCurve(c19).
-AtomicRayCurve(c20).
c21 > c22.
c22 != c21.
-(c23 > c24).
c24 != c23.
c25 > c26.
c26 != c25.
-(c27 > c28).
c28 != c27.
CurveSegment(c29).
-SimpleCurveSegment(c29).
-CurveSegment(c30).
P(c31,c32).
c32 != c31.
-P(c33,c34).
c34 != c33.
P(c35,c36).
c36 != c35.
-P(c37,c38).
c38 != c37.
MaxDim(c39).
-MaxDim(c40).
Max(c41).
-Max(c42).
Point(c43).
-Point(c44).
AtomicLoopCurve(c45).
-AtomicLoopCurve(c46).
SC(c47,c48).
c48 != c47.
-SC(c49,c50).
c50 != c49.
SC(c51,c52).
c52 != c51.
-SC(c53,c54).
c54 != c53.
c55 < c56.
c56 != c55.
-(c57 < c58).
c58 != c57.
c59 < c60.
c60 != c59.
-(c61 < c62).
c62 != c61.
AtomicCurve(c63).
-AtomicCurve(c64).
Curve(c65).
-Curve(c66).
Cont(c67,c68).
c68 != c67.
-Cont(c69,c70).
c70 != c69.
Cont(c71,c72).
c72 != c71.
-Cont(c73,c74).
c74 != c73.
ZEX(c75).
-ZEX(c76).
Min(c77).
-Min(c78).
Inc(c79,c80).
c80 != c79.
-Inc(c81,c82).
c82 != c81.
Inc(c83,c84).
c84 != c83.
-Inc(c85,c86).
c86 != c85.
PP(c87,c88).
c88 != c87.
-PP(c89,c90).
c90 != c89.
PP(c91,c92).
c92 != c91.
-PP(c93,c94).
c94 != c93.
MinDim(c95).
-MinDim(c96).
BCont(c97,c98).
c98 != c97.
-BCont(c99,c100).
c100 != c99.
BCont(c101,c102).
c102 != c101.
-BCont(c103,c104).
c104 != c103.
Covers(c105,c106).
c106 != c105.
-Covers(c107,c108).
c108 != c107.
Covers(c109,c110).
c110 != c109.
-Covers(c111,c112).
c112 != c111.
EqDim(c113,c114).
c114 != c113.
-EqDim(c115,c116).
c116 != c115.
EqDim(c117,c118).
c118 != c117.
-EqDim(c119,c120).
c120 != c119.
PO(c121,c122).
c122 != c121.
-PO(c123,c124).
c124 != c123.
PO(c125,c126).
c126 != c125.
-PO(c127,c128).
c128 != c127.
C(c129,c130).
c130 != c129.
-C(c131,c132).
c132 != c131.
C(c133,c134).
c134 != c133.
-C(c135,c136).
c136 != c135.
Closed(c137).
-Closed(c138).
c139 >= c140.
c140 != c139.
-(c141 >= c142).
c142 != c141.
c143 >= c144.
c144 != c143.
-(c145 >= c146).
c146 != c145.
-CurveSegment(x) | Curve(x).
-CurveSegment(x) | -P(y,x) | AtomicCurveSegment(f4(x,y)).
-CurveSegment(x) | -P(y,x) | PO(y,f4(x,y)).
CurveSegment(x) | -Curve(x) | P(f5(x),x).
CurveSegment(x) | -Curve(x) | -AtomicCurveSegment(y) | -PO(f5(x),y).
-MaxDim(x) | y <= x.
MaxDim(x) | -(f6(x) <= x).
-MinDim(x) | -ZEX(x).
-MinDim(x) | -(y < x) | ZEX(y).
MinDim(x) | ZEX(x) | f7(x) < x.
MinDim(x) | ZEX(x) | -ZEX(f7(x)).
ZEX(x) | Cont(x,x).
-ZEX(x) | -Cont(x,x).
-Cont(x,y) | -Cont(y,x) | y = x.
-Cont(x,y) | -Cont(y,z) | Cont(x,z).
-ZEX(x) | -Cont(y,x).
-ZEX(x) | -Cont(x,y).
-ZEX(x) | -ZEX(y) | y = x.
-Inc(x,y) | f8(x,y) < x | f9(x,y) < y.
-Inc(x,y) | f8(x,y) < x | Cont(f9(x,y),y).
-Inc(x,y) | f8(x,y) < x | P(f9(x,y),x).
-Inc(x,y) | Cont(f8(x,y),x) | f9(x,y) < y.
-Inc(x,y) | Cont(f8(x,y),x) | Cont(f9(x,y),y).
-Inc(x,y) | Cont(f8(x,y),x) | P(f9(x,y),x).
-Inc(x,y) | P(f8(x,y),y) | f9(x,y) < y.
-Inc(x,y) | P(f8(x,y),y) | Cont(f9(x,y),y).
-Inc(x,y) | P(f8(x,y),y) | P(f9(x,y),x).
Inc(x,y) | -(z < x) | -Cont(z,x) | -P(z,y).
Inc(x,y) | -(z < y) | -Cont(z,y) | -P(z,x).
-(x < x).
-(x < y) | -(y < x).
-(x < y) | -(y < z) | x < z.
EqDim(x,x).
-EqDim(x,y) | EqDim(y,x).
-EqDim(x,y) | -EqDim(y,z) | EqDim(x,z).
-(x < y) | -EqDim(x,y).
-EqDim(x,y) | -(z < x) | z < y.
-EqDim(x,y) | -(x < z) | y < z.
-ZEX(c147).
-(x < c147) | ZEX(x).
-ZEX(x) | -ZEX(y) | y = x.
-ZEX(x) | ZEX(y) | x < y.
-Endpoint(x,y) | Point(x).
-Endpoint(x,y) | Curve(y).
-Endpoint(x,y) | BCont(x,y).
Endpoint(x,y) | -Point(x) | -Curve(y) | -BCont(x,y).
MinDim(c148).
-Curve(x) | -Point(y) | Covers(x,y).
Curve(x) | Point(f10(x)).
Curve(x) | -Covers(x,f10(x)).
x <= x.
-(x <= y) | -(y <= z) | x <= z.
-ZEX(x) | -ZEX(y) | y = x.
-ZEX(x) | x <= y.
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | -BCont(x,y) | AtomicCurve(f11(x,y)).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | -BCont(x,y) | P(f11(x,y),y).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | -BCont(x,y) | BCont(x,f11(x,y)).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | -BCont(x,y) | -P(z,y) | -AtomicCurve(z) | -BCont(x,z) | z = f11(x,y).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | BCont(x,y) | -AtomicCurve(z) | -P(z,y) | -BCont(x,z) | P(f12(x,y,z),y).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | BCont(x,y) | -AtomicCurve(z) | -P(z,y) | -BCont(x,z) | AtomicCurve(f12(x,y,z)).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | BCont(x,y) | -AtomicCurve(z) | -P(z,y) | -BCont(x,z) | BCont(x,f12(x,y,z)).
-Point(x) | -Curve(y) | AtomicCurveSegment(y) | BCont(x,y) | -AtomicCurve(z) | -P(z,y) | -BCont(x,z) | f12(x,y,z) != z.
Cont(f13(x,y),x) | Cont(f13(x,y),y) | y = x.
-Cont(f13(x,y),x) | -Cont(f13(x,y),y) | y = x.
-SimpleCurveSegment(x) | Curve(x).
-SimpleCurveSegment(x) | f15(x) != f14(x).
-SimpleCurveSegment(x) | Endpoint(f14(x),x).
-SimpleCurveSegment(x) | Endpoint(f15(x),x).
-SimpleCurveSegment(x) | -Endpoint(y,x) | y = f14(x) | y = f15(x).
-SimpleCurveSegment(x) | -Branchpoint(y,x).
SimpleCurveSegment(x) | -Curve(x) | y = z | -Endpoint(z,x) | -Endpoint(y,x) | Endpoint(f16(x,z,y),x) | Branchpoint(f17(x),x).
SimpleCurveSegment(x) | -Curve(x) | y = z | -Endpoint(z,x) | -Endpoint(y,x) | f16(x,z,y) != z | Branchpoint(f17(x),x).
SimpleCurveSegment(x) | -Curve(x) | y = z | -Endpoint(z,x) | -Endpoint(y,x) | f16(x,z,y) != y | Branchpoint(f17(x),x).
ZEX(x) | PO(x,x).
-PO(x,y) | PO(y,x).
-PO(x,y) | EqDim(x,y).
-Branchpoint(x,y) | Point(x).
-Branchpoint(x,y) | Curve(y).
-Branchpoint(x,y) | Cont(x,y).
-Branchpoint(x,y) | AtomicCurveSegment(f18(x,y)) | AtomicCurveSegment(f20(x,y)).
-Branchpoint(x,y) | AtomicCurveSegment(f18(x,y)) | AtomicCurveSegment(f21(x,y)).
-Branchpoint(x,y) | AtomicCurveSegment(f18(x,y)) | AtomicCurveSegment(f22(x,y)).
-Branchpoint(x,y) | AtomicCurveSegment(f18(x,y)) | Cont(f20(x,y),y).
-Branchpoint(x,y) | AtomicCurveSegment(f18(x,y)) | Cont(f21(x,y),y).
-Branchpoint(x,y) | AtomicCurveSegment(f18(x,y)) | Cont(f22(x,y),y).
-Branchpoint(x,y) | AtomicCurveSegment(f18(x,y)) | f21(x,y) != f20(x,y).
-Branchpoint(x,y) | AtomicCurveSegment(f18(x,y)) | f22(x,y) != f20(x,y).
-Branchpoint(x,y) | AtomicCurveSegment(f18(x,y)) | f22(x,y) != f21(x,y).
-Branchpoint(x,y) | AtomicCurveSegment(f18(x,y)) | Cont(x,f20(x,y)).
-Branchpoint(x,y) | AtomicCurveSegment(f18(x,y)) | Cont(x,f21(x,y)).
-Branchpoint(x,y) | AtomicCurveSegment(f18(x,y)) | Cont(x,f22(x,y)).
-Branchpoint(x,y) | AtomicLoopCurve(f19(x,y)) | AtomicCurveSegment(f20(x,y)).
-Branchpoint(x,y) | AtomicLoopCurve(f19(x,y)) | AtomicCurveSegment(f21(x,y)).
-Branchpoint(x,y) | AtomicLoopCurve(f19(x,y)) | AtomicCurveSegment(f22(x,y)).
-Branchpoint(x,y) | AtomicLoopCurve(f19(x,y)) | Cont(f20(x,y),y).
-Branchpoint(x,y) | AtomicLoopCurve(f19(x,y)) | Cont(f21(x,y),y).
-Branchpoint(x,y) | AtomicLoopCurve(f19(x,y)) | Cont(f22(x,y),y).
-Branchpoint(x,y) | AtomicLoopCurve(f19(x,y)) | f21(x,y) != f20(x,y).
-Branchpoint(x,y) | AtomicLoopCurve(f19(x,y)) | f22(x,y) != f20(x,y).
-Branchpoint(x,y) | AtomicLoopCurve(f19(x,y)) | f22(x,y) != f21(x,y).
-Branchpoint(x,y) | AtomicLoopCurve(f19(x,y)) | Cont(x,f20(x,y)).
-Branchpoint(x,y) | AtomicLoopCurve(f19(x,y)) | Cont(x,f21(x,y)).
-Branchpoint(x,y) | AtomicLoopCurve(f19(x,y)) | Cont(x,f22(x,y)).
-Branchpoint(x,y) | Cont(f18(x,y),y) | AtomicCurveSegment(f20(x,y)).
-Branchpoint(x,y) | Cont(f18(x,y),y) | AtomicCurveSegment(f21(x,y)).
-Branchpoint(x,y) | Cont(f18(x,y),y) | AtomicCurveSegment(f22(x,y)).
-Branchpoint(x,y) | Cont(f18(x,y),y) | Cont(f20(x,y),y).
-Branchpoint(x,y) | Cont(f18(x,y),y) | Cont(f21(x,y),y).
-Branchpoint(x,y) | Cont(f18(x,y),y) | Cont(f22(x,y),y).
-Branchpoint(x,y) | Cont(f18(x,y),y) | f21(x,y) != f20(x,y).
-Branchpoint(x,y) | Cont(f18(x,y),y) | f22(x,y) != f20(x,y).
-Branchpoint(x,y) | Cont(f18(x,y),y) | f22(x,y) != f21(x,y).
-Branchpoint(x,y) | Cont(f18(x,y),y) | Cont(x,f20(x,y)).
-Branchpoint(x,y) | Cont(f18(x,y),y) | Cont(x,f21(x,y)).
-Branchpoint(x,y) | Cont(f18(x,y),y) | Cont(x,f22(x,y)).
-Branchpoint(x,y) | Cont(f19(x,y),y) | AtomicCurveSegment(f20(x,y)).
-Branchpoint(x,y) | Cont(f19(x,y),y) | AtomicCurveSegment(f21(x,y)).
-Branchpoint(x,y) | Cont(f19(x,y),y) | AtomicCurveSegment(f22(x,y)).
-Branchpoint(x,y) | Cont(f19(x,y),y) | Cont(f20(x,y),y).
-Branchpoint(x,y) | Cont(f19(x,y),y) | Cont(f21(x,y),y).
-Branchpoint(x,y) | Cont(f19(x,y),y) | Cont(f22(x,y),y).
-Branchpoint(x,y) | Cont(f19(x,y),y) | f21(x,y) != f20(x,y).
-Branchpoint(x,y) | Cont(f19(x,y),y) | f22(x,y) != f20(x,y).
-Branchpoint(x,y) | Cont(f19(x,y),y) | f22(x,y) != f21(x,y).
-Branchpoint(x,y) | Cont(f19(x,y),y) | Cont(x,f20(x,y)).
-Branchpoint(x,y) | Cont(f19(x,y),y) | Cont(x,f21(x,y)).
-Branchpoint(x,y) | Cont(f19(x,y),y) | Cont(x,f22(x,y)).
-Branchpoint(x,y) | f19(x,y) != f18(x,y) | AtomicCurveSegment(f20(x,y)).
-Branchpoint(x,y) | f19(x,y) != f18(x,y) | AtomicCurveSegment(f21(x,y)).
-Branchpoint(x,y) | f19(x,y) != f18(x,y) | AtomicCurveSegment(f22(x,y)).
-Branchpoint(x,y) | f19(x,y) != f18(x,y) | Cont(f20(x,y),y).
-Branchpoint(x,y) | f19(x,y) != f18(x,y) | Cont(f21(x,y),y).
-Branchpoint(x,y) | f19(x,y) != f18(x,y) | Cont(f22(x,y),y).
-Branchpoint(x,y) | f19(x,y) != f18(x,y) | f21(x,y) != f20(x,y).
-Branchpoint(x,y) | f19(x,y) != f18(x,y) | f22(x,y) != f20(x,y).
-Branchpoint(x,y) | f19(x,y) != f18(x,y) | f22(x,y) != f21(x,y).
-Branchpoint(x,y) | f19(x,y) != f18(x,y) | Cont(x,f20(x,y)).
-Branchpoint(x,y) | f19(x,y) != f18(x,y) | Cont(x,f21(x,y)).
-Branchpoint(x,y) | f19(x,y) != f18(x,y) | Cont(x,f22(x,y)).
-Branchpoint(x,y) | Cont(x,f18(x,y)) | AtomicCurveSegment(f20(x,y)).
-Branchpoint(x,y) | Cont(x,f18(x,y)) | AtomicCurveSegment(f21(x,y)).
-Branchpoint(x,y) | Cont(x,f18(x,y)) | AtomicCurveSegment(f22(x,y)).
-Branchpoint(x,y) | Cont(x,f18(x,y)) | Cont(f20(x,y),y).
-Branchpoint(x,y) | Cont(x,f18(x,y)) | Cont(f21(x,y),y).
-Branchpoint(x,y) | Cont(x,f18(x,y)) | Cont(f22(x,y),y).
-Branchpoint(x,y) | Cont(x,f18(x,y)) | f21(x,y) != f20(x,y).
-Branchpoint(x,y) | Cont(x,f18(x,y)) | f22(x,y) != f20(x,y).
-Branchpoint(x,y) | Cont(x,f18(x,y)) | f22(x,y) != f21(x,y).
-Branchpoint(x,y) | Cont(x,f18(x,y)) | Cont(x,f20(x,y)).
-Branchpoint(x,y) | Cont(x,f18(x,y)) | Cont(x,f21(x,y)).
-Branchpoint(x,y) | Cont(x,f18(x,y)) | Cont(x,f22(x,y)).
-Branchpoint(x,y) | Cont(x,f19(x,y)) | AtomicCurveSegment(f20(x,y)).
-Branchpoint(x,y) | Cont(x,f19(x,y)) | AtomicCurveSegment(f21(x,y)).
-Branchpoint(x,y) | Cont(x,f19(x,y)) | AtomicCurveSegment(f22(x,y)).
-Branchpoint(x,y) | Cont(x,f19(x,y)) | Cont(f20(x,y),y).
-Branchpoint(x,y) | Cont(x,f19(x,y)) | Cont(f21(x,y),y).
-Branchpoint(x,y) | Cont(x,f19(x,y)) | Cont(f22(x,y),y).
-Branchpoint(x,y) | Cont(x,f19(x,y)) | f21(x,y) != f20(x,y).
-Branchpoint(x,y) | Cont(x,f19(x,y)) | f22(x,y) != f20(x,y).
-Branchpoint(x,y) | Cont(x,f19(x,y)) | f22(x,y) != f21(x,y).
-Branchpoint(x,y) | Cont(x,f19(x,y)) | Cont(x,f20(x,y)).
-Branchpoint(x,y) | Cont(x,f19(x,y)) | Cont(x,f21(x,y)).
-Branchpoint(x,y) | Cont(x,f19(x,y)) | Cont(x,f22(x,y)).
Branchpoint(x,y) | -Point(x) | -Curve(y) | -Cont(x,y) | -AtomicCurveSegment(z) | -AtomicLoopCurve(u) | -Cont(z,y) | -Cont(u,y) | u = z | -Cont(x,z) | -Cont(x,u).
Branchpoint(x,y) | -Point(x) | -Curve(y) | -Cont(x,y) | -AtomicCurveSegment(z) | -AtomicCurveSegment(u) | -AtomicCurveSegment(w) | -Cont(z,y) | -Cont(u,y) | -Cont(w,y) | u = z | w = z | w = u | -Cont(x,z) | -Cont(x,u) | -Cont(x,w).
-BCont(x,y) | Cont(x,y).
-BCont(x,y) | Inc(x,y).
-SC(x,y) | -Min(x) | -P(x,z) | -Cont(y,z) | -Cont(u,x) | -Cont(u,y) | BCont(u,x).
-SC(x,y) | -P(x,z) | -P(y,z) | -Cont(u,x) | -Cont(u,y) | -Covers(z,u) | -BCont(u,z).
-BCont(x,y) | -P(y,z) | P(f23(x,y,z),z) | BCont(x,z).
-BCont(x,y) | -P(y,z) | -PO(f23(x,y,z),y) | BCont(x,z).
-BCont(x,y) | -P(y,z) | P(f24(x,y,z),x) | BCont(x,z).
-BCont(x,y) | -P(y,z) | Cont(f24(x,y,z),f23(x,y,z)) | BCont(x,z).
-BCont(x,y) | -Cont(z,x) | BCont(z,y).
-AtomicCurveSegment(x) | Curve(x).
-AtomicCurveSegment(x) | -PP(y,x).
-AtomicCurveSegment(x) | Endpoint(f25(x),x).
-AtomicCurveSegment(x) | Endpoint(f26(x),x).
-AtomicCurveSegment(x) | f26(x) != f25(x).
-AtomicCurveSegment(x) | -Point(y) | -Cont(y,x) | f25(x) = y | f26(x) = y.
AtomicCurveSegment(x) | -Curve(x) | PP(f27(x),x) | -Endpoint(y,x) | -Endpoint(z,x) | z = y | Point(f28(x,y,z)).
AtomicCurveSegment(x) | -Curve(x) | PP(f27(x),x) | -Endpoint(y,x) | -Endpoint(z,x) | z = y | Cont(f28(x,y,z),x).
AtomicCurveSegment(x) | -Curve(x) | PP(f27(x),x) | -Endpoint(y,x) | -Endpoint(z,x) | z = y | y != f28(x,y,z).
AtomicCurveSegment(x) | -Curve(x) | PP(f27(x),x) | -Endpoint(y,x) | -Endpoint(z,x) | z = y | z != f28(x,y,z).
-(x > y) | y < x.
x > y | -(y < x).
-(x >= y) | y <= x.
x >= y | -(y <= x).
-(x < y) | x <= y.
-(x < y) | -EqDim(x,y).
x < y | -(x <= y) | EqDim(x,y).
-Closed(x) | -BCont(y,x).
Closed(x) | BCont(f29(x),x).
-Max(x) | -ZEX(x).
-Max(x) | -PP(x,y).
Max(x) | ZEX(x) | PP(x,f30(x)).
-Min(x) | -ZEX(x).
-Min(x) | -PP(y,x).
Min(x) | ZEX(x) | PP(f31(x),x).
-AtomicLoopCurve(x) | Curve(x).
-AtomicLoopCurve(x) | -PP(y,x).
-AtomicLoopCurve(x) | Point(f32(x)).
-AtomicLoopCurve(x) | Cont(f32(x),x).
-AtomicLoopCurve(x) | -Point(y) | -Cont(y,x) | y = f32(x).
-AtomicLoopCurve(x) | -Endpoint(y,x).
AtomicLoopCurve(x) | -Curve(x) | PP(f33(x),x) | -Point(y) | -Cont(y,x) | Point(f34(x,y)) | Endpoint(f35(x),x).
AtomicLoopCurve(x) | -Curve(x) | PP(f33(x),x) | -Point(y) | -Cont(y,x) | Cont(f34(x,y),x) | Endpoint(f35(x),x).
AtomicLoopCurve(x) | -Curve(x) | PP(f33(x),x) | -Point(y) | -Cont(y,x) | f34(x,y) != y | Endpoint(f35(x),x).
-Cont(x,y) | x < y | EqDim(x,y).
-Covers(x,y) | y < x.
-Covers(x,y) | -(y < z) | -(z < x).
Covers(x,y) | -(y < x) | y < f36(x,y).
Covers(x,y) | -(y < x) | f36(x,y) < x.
-PO(x,y) | P(f37(x,y),x).
-PO(x,y) | P(f37(x,y),y).
PO(x,y) | -P(z,x) | -P(z,y).
-P(x,y) | Cont(x,y).
-P(x,y) | EqDim(x,y).
P(x,y) | -Cont(x,y) | -EqDim(x,y).
-PP(x,y) | P(x,y).
-PP(x,y) | y != x.
PP(x,y) | -P(x,y) | y = x.
-AtomicRayCurve(x) | Curve(x).
-AtomicRayCurve(x) | -PP(y,x).
-AtomicRayCurve(x) | Endpoint(f38(x),x).
-AtomicRayCurve(x) | -Point(y) | -Cont(y,x) | y = f38(x).
AtomicRayCurve(x) | -Curve(x) | PP(f39(x),x) | -Endpoint(y,x) | Point(f40(x,y)).
AtomicRayCurve(x) | -Curve(x) | PP(f39(x),x) | -Endpoint(y,x) | Cont(f40(x,y),x).
AtomicRayCurve(x) | -Curve(x) | PP(f39(x),x) | -Endpoint(y,x) | f40(x,y) != y.
-AtomicCurve(x) | AtomicCurveSegment(x) | AtomicLoopCurve(x) | AtomicRayCurve(x).
AtomicCurve(x) | -AtomicCurveSegment(x).
AtomicCurve(x) | -AtomicLoopCurve(x).
AtomicCurve(x) | -AtomicRayCurve(x).
-AtomicCurve(x) | AtomicLoopCurve(x) | -Cont(y,x) | y = x | Point(y).
-AtomicCurve(x) | AtomicLoopCurve(x) | -Cont(y,x) | y = x | BCont(y,x).
-AtomicCurve(x) | -Point(y) | -Point(z) | -Point(u) | -Cont(y,x) | -Cont(z,x) | -Cont(u,x) | z = y | u = y | u = z.
-AtomicCurve(x) | -Point(y) | -Point(z) | z = y | -Cont(y,x) | -Cont(z,x) | -Closed(x).
-Inc(x,x).
-Inc(x,y) | Inc(y,x).
-EqDim(x,y) | -Inc(x,y).
-Inc(x,y) | x < y | y < x.
-Cont(x,y) | -(x < y) | Inc(x,y).
-Inc(x,y) | -P(y,z) | Inc(x,z).
-Cont(x,y) | x < y | EqDim(x,y).
-Point(x) | -Cont(y,x) | y = x.
-EqDim(x,y) | x <= y.
-EqDim(x,y) | y <= x.
EqDim(x,y) | -(x <= y) | -(y <= x).
-SC(x,y) | C(x,y).
-SC(x,y) | -Cont(z,x) | -P(z,y).
-SC(x,y) | -P(z,x) | -Cont(z,y).
-C(x,y) | Cont(f41(x,y),x) | SC(x,y).
-C(x,y) | Cont(f41(x,y),y) | SC(x,y).
-C(x,y) | P(f41(x,y),x) | P(f41(x,y),y) | SC(x,y).
-SC(x,x).
-SC(x,y) | SC(y,x).
-SC(x,y) | f42(x,y) < x.
-SC(x,y) | f42(x,y) < y.
-SC(x,y) | Cont(f42(x,y),x).
-SC(x,y) | Cont(f42(x,y),y).
end_of_list.

============================== end of clauses for search =============

% There are no natural numbers in the input.

============================== DOMAIN SIZE 2 =========================

=== Mace4 starting on domain size 2. ===

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.02 seconds).
Ground clauses: seen=1373, kept=1173.
Selections=1, assignments=1, propagations=58, current_models=0.
Rewrite_terms=15, rewrite_bools=639, indexes=4.
Rules_from_neg_clauses=10, cross_offs=10.

============================== end of statistics =====================

============================== DOMAIN SIZE 3 =========================

=== Mace4 starting on domain size 3. ===

============================== STATISTICS ============================

For domain size 3.

Current CPU time: 0.00 seconds (total CPU time: 0.03 seconds).
Ground clauses: seen=3524, kept=2972.
Selections=2, assignments=3, propagations=152, current_models=0.
Rewrite_terms=39, rewrite_bools=3086, indexes=5.
Rules_from_neg_clauses=14, cross_offs=44.

============================== end of statistics =====================

============================== DOMAIN SIZE 4 =========================

=== Mace4 starting on domain size 4. ===

============================== STATISTICS ============================

For domain size 4.

Current CPU time: 0.00 seconds (total CPU time: 0.05 seconds).
Ground clauses: seen=7725, kept=6421.
Selections=4, assignments=10, propagations=297, current_models=0.
Rewrite_terms=163, rewrite_bools=8318, indexes=6.
Rules_from_neg_clauses=36, cross_offs=147.

============================== end of statistics =====================

============================== DOMAIN SIZE 5 =========================

=== Mace4 starting on domain size 5. ===

============================== STATISTICS ============================

For domain size 5.

Current CPU time: 0.00 seconds (total CPU time: 0.18 seconds).
Ground clauses: seen=15284, kept=12564.
Selections=725, assignments=3615, propagations=10627, current_models=0.
Rewrite_terms=18378, rewrite_bools=124998, indexes=953.
Rules_from_neg_clauses=971, cross_offs=3700.

============================== end of statistics =====================

============================== DOMAIN SIZE 6 =========================

=== Mace4 starting on domain size 6. ===

====== Domain size 6 terminated by max_seconds_per. ======

============================== STATISTICS ============================

For domain size 6.

Current CPU time: 0.00 seconds (total CPU time: 60.19 seconds).
Ground clauses: seen=28085, kept=22949.
Selections=1384590, assignments=8307217, propagations=5993814, current_models=0.
Rewrite_terms=16303399, rewrite_bools=3688491, indexes=20.
Rules_from_neg_clauses=5993229, cross_offs=30905312.

============================== end of statistics =====================

============================== DOMAIN SIZE 7 =========================

=== Mace4 starting on domain size 7. ===
============================= mace4 ================================
execution finished: Wed Aug 07 17:19:50 2013
total CPU time used: 109
The command was "mace4 -v0 -t300 -s60 -n2 -N40 -f /stl/torsten/git/macleod/qs/multidim_mereotopology_cont/definitions/p9/c.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_cont/p9/cont_c_ext.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/sc.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/point.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/consistency/p9/curve_segment_nonsimple_all_weak_nontrivial.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/curve_segment.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/min_max_dim.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_cont/p9/cont_basic.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/inc.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/p9/dim_basic.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/endpoint.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/p9/dim_prime_linear.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/curve.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/p9/dim_prime_linear_unbounded.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/p9/codib_curve_endpoints.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_cont/p9/cont_ext.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/simple_curve_segment.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/theorems/p9/po_theorems.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/p9/codib.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/dim_defs.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/p9/codi.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/branchpoint.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/p9/codi_bcont.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/atomic_curve_segment.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/dim_basic_defs.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/closed.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/min_max_in_dim.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/atomic_loop_curve.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/p9/codi_linear.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/covers.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/po.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/ep.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/definitions/p9/epp.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/atomic_ray_curve.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/definitions/p9/atomic_curve.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codib/p9/codib_atomic_curves.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/theorems/p9/inc_theorems.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/p9/codi_basic.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/p9/codi_atomic_points.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_dim/definitions/p9/eq_dim.p9 /stl/torsten/git/macleod/qs/multidim_mereotopology_codi/theorems/p9/sc_theorems.p9"
Input read from 
============================ end of footer ===========================
