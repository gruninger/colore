============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 10596 was started by torsten on stl-ws2,
Fri Aug  9 14:18:49 2013
The command was "prover9 -t600 -f /stl/torsten/git/macleod/qs/multidim_space_ped/consistency/p9/ped_all_weak_nontrivial.p9 /stl/torsten/git/macleod/qs/multidim_space_ped/p9/ped.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file /stl/torsten/git/macleod/qs/multidim_space_ped/consistency/p9/ped_all_weak_nontrivial.p9


formulas(sos).
(exists x0 M(x0)).
(exists x0 -M(x0)).
(exists x0 POD(x0)).
(exists x0 -POD(x0)).
(exists x0 F(x0)).
(exists x0 -F(x0)).
(exists x0 exists x1 (hosts(x0,x1) & x0 != x1)).
(exists x0 exists x1 (-hosts(x0,x1) & x0 != x1)).
(exists x0 exists x1 (hosts(x0,x1) & x1 != x0)).
(exists x0 exists x1 (-hosts(x0,x1) & x1 != x0)).
(exists x0 DPF(x0)).
(exists x0 -DPF(x0)).
(exists x0 PED(x0)).
(exists x0 -PED(x0)).
(exists x0 RPF(x0)).
(exists x0 -RPF(x0)).
(exists x0 NAPO(x0)).
(exists x0 -NAPO(x0)).
(exists x0 exists x1 (DK1(x0,x1) & x0 != x1)).
(exists x0 exists x1 (-DK1(x0,x1) & x0 != x1)).
(exists x0 exists x1 (DK1(x0,x1) & x1 != x0)).
(exists x0 exists x1 (-DK1(x0,x1) & x1 != x0)).
end_of_list.

% Reading from file /stl/torsten/git/macleod/qs/multidim_space_ped/p9/ped.p9


formulas(sos).
(all x (PED(x) -> POD(x) | M(x) | F(x))).
(all x (POD(x) -> PED(x))).
(all x (M(x) -> PED(x))).
(all x (F(x) -> PED(x))).
(all x (POD(x) -> -M(x))).
(all x (POD(x) -> -F(x))).
(all x (M(x) -> -F(x))).
(all x (NAPO(x) -> POD(x))).
(all x all y (hosts(x,y) -> PED(x) & F(y))).
(all x (F(x) <-> (exists y hosts(y,x)))).
(all x all y (hosts(x,y) -> -hosts(y,x))).
(all x (F(x) <-> RPF(x) | DPF(x))).
(all x (-RPF(x) | -DPF(x))).
(all x all y (DK1(x,y) -> M(x))).
(all x all y (DK1(x,y) -> POD(y) | F(y))).
(all x all y all z (DK1(x,y) & DK1(z,y) -> x = z)).
(all y (POD(y) | RPF(y) -> (exists x DK1(x,y)))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (exists x0 M(x0)) # label(non_clause).  [assumption].
2 (exists x0 -M(x0)) # label(non_clause).  [assumption].
3 (exists x0 POD(x0)) # label(non_clause).  [assumption].
4 (exists x0 -POD(x0)) # label(non_clause).  [assumption].
5 (exists x0 F(x0)) # label(non_clause).  [assumption].
6 (exists x0 -F(x0)) # label(non_clause).  [assumption].
7 (exists x0 exists x1 (hosts(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
8 (exists x0 exists x1 (-hosts(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
9 (exists x0 exists x1 (hosts(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
10 (exists x0 exists x1 (-hosts(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
11 (exists x0 DPF(x0)) # label(non_clause).  [assumption].
12 (exists x0 -DPF(x0)) # label(non_clause).  [assumption].
13 (exists x0 PED(x0)) # label(non_clause).  [assumption].
14 (exists x0 -PED(x0)) # label(non_clause).  [assumption].
15 (exists x0 RPF(x0)) # label(non_clause).  [assumption].
16 (exists x0 -RPF(x0)) # label(non_clause).  [assumption].
17 (exists x0 NAPO(x0)) # label(non_clause).  [assumption].
18 (exists x0 -NAPO(x0)) # label(non_clause).  [assumption].
19 (exists x0 exists x1 (DK1(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
20 (exists x0 exists x1 (-DK1(x0,x1) & x0 != x1)) # label(non_clause).  [assumption].
21 (exists x0 exists x1 (DK1(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
22 (exists x0 exists x1 (-DK1(x0,x1) & x1 != x0)) # label(non_clause).  [assumption].
23 (all x (PED(x) -> POD(x) | M(x) | F(x))) # label(non_clause).  [assumption].
24 (all x (POD(x) -> PED(x))) # label(non_clause).  [assumption].
25 (all x (M(x) -> PED(x))) # label(non_clause).  [assumption].
26 (all x (F(x) -> PED(x))) # label(non_clause).  [assumption].
27 (all x (POD(x) -> -M(x))) # label(non_clause).  [assumption].
28 (all x (POD(x) -> -F(x))) # label(non_clause).  [assumption].
29 (all x (M(x) -> -F(x))) # label(non_clause).  [assumption].
30 (all x (NAPO(x) -> POD(x))) # label(non_clause).  [assumption].
31 (all x all y (hosts(x,y) -> PED(x) & F(y))) # label(non_clause).  [assumption].
32 (all x (F(x) <-> (exists y hosts(y,x)))) # label(non_clause).  [assumption].
33 (all x all y (hosts(x,y) -> -hosts(y,x))) # label(non_clause).  [assumption].
34 (all x (F(x) <-> RPF(x) | DPF(x))) # label(non_clause).  [assumption].
35 (all x (-RPF(x) | -DPF(x))) # label(non_clause).  [assumption].
36 (all x all y (DK1(x,y) -> M(x))) # label(non_clause).  [assumption].
37 (all x all y (DK1(x,y) -> POD(y) | F(y))) # label(non_clause).  [assumption].
38 (all x all y all z (DK1(x,y) & DK1(z,y) -> x = z)) # label(non_clause).  [assumption].
39 (all y (POD(y) | RPF(y) -> (exists x DK1(x,y)))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

% Clauses before input processing:

formulas(usable).
end_of_list.

formulas(sos).
M(c1).  [clausify(1)].
-M(c2).  [clausify(2)].
POD(c3).  [clausify(3)].
-POD(c4).  [clausify(4)].
F(c5).  [clausify(5)].
-F(c6).  [clausify(6)].
hosts(c7,c8).  [clausify(7)].
c8 != c7.  [clausify(7)].
-hosts(c9,c10).  [clausify(8)].
c10 != c9.  [clausify(8)].
hosts(c11,c12).  [clausify(9)].
c12 != c11.  [clausify(9)].
-hosts(c13,c14).  [clausify(10)].
c14 != c13.  [clausify(10)].
DPF(c15).  [clausify(11)].
-DPF(c16).  [clausify(12)].
PED(c17).  [clausify(13)].
-PED(c18).  [clausify(14)].
RPF(c19).  [clausify(15)].
-RPF(c20).  [clausify(16)].
NAPO(c21).  [clausify(17)].
-NAPO(c22).  [clausify(18)].
DK1(c23,c24).  [clausify(19)].
c24 != c23.  [clausify(19)].
-DK1(c25,c26).  [clausify(20)].
c26 != c25.  [clausify(20)].
DK1(c27,c28).  [clausify(21)].
c28 != c27.  [clausify(21)].
-DK1(c29,c30).  [clausify(22)].
c30 != c29.  [clausify(22)].
-PED(x) | POD(x) | M(x) | F(x).  [clausify(23)].
-POD(x) | PED(x).  [clausify(24)].
-M(x) | PED(x).  [clausify(25)].
-F(x) | PED(x).  [clausify(26)].
-POD(x) | -M(x).  [clausify(27)].
-POD(x) | -F(x).  [clausify(28)].
-M(x) | -F(x).  [clausify(29)].
-NAPO(x) | POD(x).  [clausify(30)].
-hosts(x,y) | PED(x).  [clausify(31)].
-hosts(x,y) | F(y).  [clausify(31)].
-F(x) | hosts(f1(x),x).  [clausify(32)].
F(x) | -hosts(y,x).  [clausify(32)].
-hosts(x,y) | -hosts(y,x).  [clausify(33)].
-F(x) | RPF(x) | DPF(x).  [clausify(34)].
F(x) | -RPF(x).  [clausify(34)].
F(x) | -DPF(x).  [clausify(34)].
-RPF(x) | -DPF(x).  [clausify(35)].
-DK1(x,y) | M(x).  [clausify(36)].
-DK1(x,y) | POD(y) | F(y).  [clausify(37)].
-DK1(x,y) | -DK1(z,y) | z = x.  [clausify(38)].
-POD(x) | DK1(f2(x),x).  [clausify(39)].
-RPF(x) | DK1(f2(x),x).  [clausify(39)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== PREDICATE ELIMINATION =================

No predicates eliminated.

============================== end predicate elimination =============

Auto_denials:  (non-Horn, no changes).

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, F, PED, POD, M, RPF, DPF, NAPO, DK1, hosts ]).
Function symbol precedence:  function_order([ c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, f1, f2 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

kept:      40 M(c1).  [clausify(1)].
kept:      41 -M(c2).  [clausify(2)].
kept:      42 POD(c3).  [clausify(3)].
kept:      43 -POD(c4).  [clausify(4)].
kept:      44 F(c5).  [clausify(5)].
kept:      45 -F(c6).  [clausify(6)].
kept:      46 hosts(c7,c8).  [clausify(7)].
kept:      47 c8 != c7.  [clausify(7)].
kept:      48 -hosts(c9,c10).  [clausify(8)].
kept:      49 c10 != c9.  [clausify(8)].
kept:      50 hosts(c11,c12).  [clausify(9)].
kept:      51 c12 != c11.  [clausify(9)].
kept:      52 -hosts(c13,c14).  [clausify(10)].
kept:      53 c14 != c13.  [clausify(10)].
kept:      54 DPF(c15).  [clausify(11)].
kept:      55 -DPF(c16).  [clausify(12)].
kept:      56 PED(c17).  [clausify(13)].
kept:      57 -PED(c18).  [clausify(14)].
kept:      58 RPF(c19).  [clausify(15)].
kept:      59 -RPF(c20).  [clausify(16)].
kept:      60 NAPO(c21).  [clausify(17)].
kept:      61 -NAPO(c22).  [clausify(18)].
kept:      62 DK1(c23,c24).  [clausify(19)].
kept:      63 c24 != c23.  [clausify(19)].
kept:      64 -DK1(c25,c26).  [clausify(20)].
kept:      65 c26 != c25.  [clausify(20)].
kept:      66 DK1(c27,c28).  [clausify(21)].
kept:      67 c28 != c27.  [clausify(21)].
kept:      68 -DK1(c29,c30).  [clausify(22)].
kept:      69 c30 != c29.  [clausify(22)].
kept:      70 -PED(x) | POD(x) | M(x) | F(x).  [clausify(23)].
kept:      71 -POD(x) | PED(x).  [clausify(24)].
kept:      72 -M(x) | PED(x).  [clausify(25)].
kept:      73 -F(x) | PED(x).  [clausify(26)].
kept:      74 -POD(x) | -M(x).  [clausify(27)].
kept:      75 -POD(x) | -F(x).  [clausify(28)].
kept:      76 -M(x) | -F(x).  [clausify(29)].
kept:      77 -NAPO(x) | POD(x).  [clausify(30)].
kept:      78 -hosts(x,y) | PED(x).  [clausify(31)].
kept:      79 -hosts(x,y) | F(y).  [clausify(31)].
kept:      80 -F(x) | hosts(f1(x),x).  [clausify(32)].
kept:      81 -hosts(x,y) | -hosts(y,x).  [clausify(33)].
kept:      82 -F(x) | RPF(x) | DPF(x).  [clausify(34)].
kept:      83 F(x) | -RPF(x).  [clausify(34)].
kept:      84 F(x) | -DPF(x).  [clausify(34)].
kept:      85 -RPF(x) | -DPF(x).  [clausify(35)].
kept:      86 -DK1(x,y) | M(x).  [clausify(36)].
kept:      87 -DK1(x,y) | POD(y) | F(y).  [clausify(37)].
kept:      88 -DK1(x,y) | -DK1(z,y) | z = x.  [clausify(38)].
kept:      89 -POD(x) | DK1(f2(x),x).  [clausify(39)].
kept:      90 -RPF(x) | DK1(f2(x),x).  [clausify(39)].
kept:      91 -hosts(x,x).  [factor(81,a,b)].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

% Clauses after input processing:

formulas(usable).
end_of_list.

formulas(sos).
40 M(c1).  [clausify(1)].
41 -M(c2).  [clausify(2)].
42 POD(c3).  [clausify(3)].
43 -POD(c4).  [clausify(4)].
44 F(c5).  [clausify(5)].
45 -F(c6).  [clausify(6)].
46 hosts(c7,c8).  [clausify(7)].
47 c8 != c7.  [clausify(7)].
48 -hosts(c9,c10).  [clausify(8)].
49 c10 != c9.  [clausify(8)].
50 hosts(c11,c12).  [clausify(9)].
51 c12 != c11.  [clausify(9)].
52 -hosts(c13,c14).  [clausify(10)].
53 c14 != c13.  [clausify(10)].
54 DPF(c15).  [clausify(11)].
55 -DPF(c16).  [clausify(12)].
56 PED(c17).  [clausify(13)].
57 -PED(c18).  [clausify(14)].
58 RPF(c19).  [clausify(15)].
59 -RPF(c20).  [clausify(16)].
60 NAPO(c21).  [clausify(17)].
61 -NAPO(c22).  [clausify(18)].
62 DK1(c23,c24).  [clausify(19)].
63 c24 != c23.  [clausify(19)].
64 -DK1(c25,c26).  [clausify(20)].
65 c26 != c25.  [clausify(20)].
66 DK1(c27,c28).  [clausify(21)].
67 c28 != c27.  [clausify(21)].
68 -DK1(c29,c30).  [clausify(22)].
69 c30 != c29.  [clausify(22)].
70 -PED(x) | POD(x) | M(x) | F(x).  [clausify(23)].
71 -POD(x) | PED(x).  [clausify(24)].
72 -M(x) | PED(x).  [clausify(25)].
73 -F(x) | PED(x).  [clausify(26)].
74 -POD(x) | -M(x).  [clausify(27)].
75 -POD(x) | -F(x).  [clausify(28)].
76 -M(x) | -F(x).  [clausify(29)].
77 -NAPO(x) | POD(x).  [clausify(30)].
78 -hosts(x,y) | PED(x).  [clausify(31)].
79 -hosts(x,y) | F(y).  [clausify(31)].
80 -F(x) | hosts(f1(x),x).  [clausify(32)].
81 -hosts(x,y) | -hosts(y,x).  [clausify(33)].
82 -F(x) | RPF(x) | DPF(x).  [clausify(34)].
83 F(x) | -RPF(x).  [clausify(34)].
84 F(x) | -DPF(x).  [clausify(34)].
85 -RPF(x) | -DPF(x).  [clausify(35)].
86 -DK1(x,y) | M(x).  [clausify(36)].
87 -DK1(x,y) | POD(y) | F(y).  [clausify(37)].
88 -DK1(x,y) | -DK1(z,y) | z = x.  [clausify(38)].
89 -POD(x) | DK1(f2(x),x).  [clausify(39)].
90 -RPF(x) | DK1(f2(x),x).  [clausify(39)].
91 -hosts(x,x).  [factor(81,a,b)].
end_of_list.

formulas(demodulators).
end_of_list.

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

given #1 (I,wt=2): 40 M(c1).  [clausify(1)].

given #2 (I,wt=2): 41 -M(c2).  [clausify(2)].

given #3 (I,wt=2): 42 POD(c3).  [clausify(3)].

given #4 (I,wt=2): 43 -POD(c4).  [clausify(4)].

given #5 (I,wt=2): 44 F(c5).  [clausify(5)].

given #6 (I,wt=2): 45 -F(c6).  [clausify(6)].

given #7 (I,wt=3): 46 hosts(c7,c8).  [clausify(7)].

given #8 (I,wt=3): 47 c8 != c7.  [clausify(7)].

given #9 (I,wt=3): 48 -hosts(c9,c10).  [clausify(8)].

given #10 (I,wt=3): 49 c10 != c9.  [clausify(8)].

given #11 (I,wt=3): 50 hosts(c11,c12).  [clausify(9)].

given #12 (I,wt=3): 51 c12 != c11.  [clausify(9)].

given #13 (I,wt=3): 52 -hosts(c13,c14).  [clausify(10)].

given #14 (I,wt=3): 53 c14 != c13.  [clausify(10)].

given #15 (I,wt=2): 54 DPF(c15).  [clausify(11)].

given #16 (I,wt=2): 55 -DPF(c16).  [clausify(12)].

given #17 (I,wt=2): 56 PED(c17).  [clausify(13)].

given #18 (I,wt=2): 57 -PED(c18).  [clausify(14)].

given #19 (I,wt=2): 58 RPF(c19).  [clausify(15)].

given #20 (I,wt=2): 59 -RPF(c20).  [clausify(16)].

given #21 (I,wt=2): 60 NAPO(c21).  [clausify(17)].

given #22 (I,wt=2): 61 -NAPO(c22).  [clausify(18)].

given #23 (I,wt=3): 62 DK1(c23,c24).  [clausify(19)].

given #24 (I,wt=3): 63 c24 != c23.  [clausify(19)].

given #25 (I,wt=3): 64 -DK1(c25,c26).  [clausify(20)].

given #26 (I,wt=3): 65 c26 != c25.  [clausify(20)].

given #27 (I,wt=3): 66 DK1(c27,c28).  [clausify(21)].

given #28 (I,wt=3): 67 c28 != c27.  [clausify(21)].

given #29 (I,wt=3): 68 -DK1(c29,c30).  [clausify(22)].

given #30 (I,wt=3): 69 c30 != c29.  [clausify(22)].

given #31 (I,wt=8): 70 -PED(x) | POD(x) | M(x) | F(x).  [clausify(23)].

given #32 (I,wt=4): 71 -POD(x) | PED(x).  [clausify(24)].

given #33 (I,wt=4): 72 -M(x) | PED(x).  [clausify(25)].

given #34 (I,wt=4): 73 -F(x) | PED(x).  [clausify(26)].

given #35 (I,wt=4): 74 -POD(x) | -M(x).  [clausify(27)].

given #36 (I,wt=4): 75 -POD(x) | -F(x).  [clausify(28)].

given #37 (I,wt=4): 76 -M(x) | -F(x).  [clausify(29)].

given #38 (I,wt=4): 77 -NAPO(x) | POD(x).  [clausify(30)].

given #39 (I,wt=5): 78 -hosts(x,y) | PED(x).  [clausify(31)].

given #40 (I,wt=5): 79 -hosts(x,y) | F(y).  [clausify(31)].

given #41 (I,wt=6): 80 -F(x) | hosts(f1(x),x).  [clausify(32)].

given #42 (I,wt=6): 81 -hosts(x,y) | -hosts(y,x).  [clausify(33)].

given #43 (I,wt=6): 82 -F(x) | RPF(x) | DPF(x).  [clausify(34)].

given #44 (I,wt=4): 83 F(x) | -RPF(x).  [clausify(34)].

given #45 (I,wt=4): 84 F(x) | -DPF(x).  [clausify(34)].

given #46 (I,wt=4): 85 -RPF(x) | -DPF(x).  [clausify(35)].

given #47 (I,wt=5): 86 -DK1(x,y) | M(x).  [clausify(36)].

given #48 (I,wt=7): 87 -DK1(x,y) | POD(y) | F(y).  [clausify(37)].

given #49 (I,wt=9): 88 -DK1(x,y) | -DK1(z,y) | z = x.  [clausify(38)].

given #50 (I,wt=6): 89 -POD(x) | DK1(f2(x),x).  [clausify(39)].

given #51 (I,wt=6): 90 -RPF(x) | DK1(f2(x),x).  [clausify(39)].

given #52 (I,wt=3): 91 -hosts(x,x).  [factor(81,a,b)].

given #53 (A,wt=6): 92 POD(c17) | M(c17) | F(c17).  [resolve(70,a,56,a)].

given #54 (F,wt=2): 94 -POD(c18).  [ur(71,b,57,a)].

given #55 (F,wt=2): 96 -M(c18).  [ur(72,b,57,a)].

given #56 (F,wt=2): 98 -F(c18).  [ur(73,b,57,a)].

given #57 (F,wt=2): 99 -POD(c1).  [resolve(74,b,40,a)].

given #58 (T,wt=2): 93 PED(c3).  [resolve(71,a,42,a)].

given #59 (T,wt=2): 95 PED(c1).  [resolve(72,a,40,a)].

given #60 (T,wt=2): 97 PED(c5).  [resolve(73,a,44,a)].

given #61 (T,wt=2): 105 POD(c21).  [resolve(77,a,60,a)].

given #62 (A,wt=2): 100 -M(c3).  [ur(74,a,42,a)].

given #63 (F,wt=2): 101 -F(c3).  [resolve(75,a,42,a)].

given #64 (F,wt=2): 102 -POD(c5).  [ur(75,b,44,a)].

given #65 (F,wt=2): 103 -F(c1).  [resolve(76,a,40,a)].

given #66 (F,wt=2): 104 -M(c5).  [ur(76,b,44,a)].

given #67 (T,wt=2): 107 PED(c11).  [resolve(78,a,50,a)].

given #68 (T,wt=2): 108 PED(c7).  [resolve(78,a,46,a)].

given #69 (T,wt=2): 110 F(c12).  [resolve(79,a,50,a)].

given #70 (T,wt=2): 111 F(c8).  [resolve(79,a,46,a)].

given #71 (A,wt=2): 106 -NAPO(c4).  [ur(77,b,43,a)].

given #72 (F,wt=2): 118 -RPF(c6).  [ur(83,a,45,a)].

given #73 (F,wt=2): 120 -DPF(c6).  [ur(84,a,45,a)].

given #74 (F,wt=2): 121 -RPF(c15).  [resolve(85,b,54,a)].

given #75 (F,wt=2): 122 -DPF(c19).  [ur(85,a,58,a)].

given #76 (T,wt=2): 117 F(c19).  [resolve(83,b,58,a)].

given #77 (T,wt=2): 119 F(c15).  [resolve(84,b,54,a)].

given #78 (T,wt=2): 123 M(c27).  [resolve(86,a,66,a)].

given #79 (T,wt=2): 124 M(c23).  [resolve(86,a,62,a)].

given #80 (A,wt=3): 109 -hosts(c18,x).  [ur(78,b,57,a)].

given #81 (F,wt=2): 134 -NAPO(c18).  [ur(77,b,94,a)].

given #82 (F,wt=2): 137 -DPF(c18).  [ur(84,a,98,a)].

given #83 (F,wt=2): 138 -RPF(c18).  [ur(83,a,98,a)].

given #84 (F,wt=2): 140 -NAPO(c1).  [ur(77,b,99,a)].

given #85 (T,wt=2): 143 PED(c21).  [resolve(105,a,71,a)].

given #86 (T,wt=2): 159 PED(c12).  [resolve(110,a,73,a)].

given #87 (T,wt=2): 164 PED(c8).  [resolve(111,a,73,a)].

given #88 (T,wt=2): 168 PED(c19).  [resolve(117,a,73,a)].

given #89 (A,wt=3): 112 -hosts(x,c6).  [ur(79,b,45,a)].

given #90 (F,wt=2): 142 -F(c21).  [resolve(105,a,75,a)].

given #91 (F,wt=2): 144 -M(c21).  [ur(74,a,105,a)].

given #92 (F,wt=2): 146 -DPF(c3).  [ur(84,a,101,a)].

given #93 (F,wt=2): 147 -RPF(c3).  [ur(83,a,101,a)].

given #94 (T,wt=2): 172 PED(c15).  [resolve(119,a,73,a)].

given #95 (T,wt=2): 177 PED(c27).  [resolve(123,a,72,a)].

given #96 (T,wt=2): 180 PED(c23).  [resolve(124,a,72,a)].

given #97 (T,wt=4): 113 hosts(f1(c5),c5).  [resolve(80,a,44,a)].

given #98 (A,wt=3): 114 -hosts(c12,c11).  [resolve(81,a,50,a)].

given #99 (F,wt=2): 149 -NAPO(c5).  [ur(77,b,102,a)].

given #100 (F,wt=2): 151 -DPF(c1).  [ur(84,a,103,a)].

given #101 (F,wt=2): 152 -RPF(c1).  [ur(83,a,103,a)].

given #102 (F,wt=2): 160 -M(c12).  [ur(76,b,110,a)].

given #103 (T,wt=3): 186 PED(f1(c5)).  [resolve(113,a,78,a)].

given #104 (T,wt=4): 116 RPF(c5) | DPF(c5).  [resolve(82,a,44,a)].

given #105 (T,wt=4): 126 POD(c28) | F(c28).  [resolve(87,a,66,a)].

given #106 (T,wt=4): 127 POD(c24) | F(c24).  [resolve(87,a,62,a)].

given #107 (A,wt=3): 115 -hosts(c8,c7).  [resolve(81,a,46,a)].

given #108 (F,wt=2): 161 -POD(c12).  [ur(75,b,110,a)].

given #109 (F,wt=2): 165 -M(c8).  [ur(76,b,111,a)].

given #110 (F,wt=2): 166 -POD(c8).  [ur(75,b,111,a)].

given #111 (F,wt=2): 169 -M(c19).  [ur(76,b,117,a)].

given #112 (T,wt=4): 132 DK1(f2(c3),c3).  [resolve(89,a,42,a)].

given #113 (T,wt=3): 198 M(f2(c3)).  [resolve(132,a,86,a)].

given #114 (T,wt=3): 201 PED(f2(c3)).  [resolve(198,a,72,a)].

given #115 (T,wt=4): 133 DK1(f2(c19),c19).  [resolve(90,a,58,a)].

given #116 (A,wt=3): 125 -DK1(c2,x).  [ur(86,b,41,a)].

given #117 (F,wt=2): 170 -POD(c19).  [ur(75,b,117,a)].

given #118 (F,wt=2): 173 -M(c15).  [ur(76,b,119,a)].

given #119 (F,wt=2): 174 -POD(c15).  [ur(75,b,119,a)].

given #120 (F,wt=2): 175 -F(c27).  [resolve(123,a,76,a)].

given #121 (T,wt=3): 203 M(f2(c19)).  [resolve(133,a,86,a)].

given #122 (T,wt=3): 212 PED(f2(c19)).  [resolve(203,a,72,a)].

given #123 (T,wt=4): 141 DK1(f2(c21),c21).  [resolve(105,a,89,a)].

given #124 (T,wt=3): 214 M(f2(c21)).  [resolve(141,a,86,a)].

given #125 (A,wt=6): 128 -DK1(x,c28) | c27 = x.  [resolve(88,a,66,a),flip(b)].

given #126 (F,wt=2): 176 -POD(c27).  [resolve(123,a,74,b)].

given #127 (F,wt=2): 178 -F(c23).  [resolve(124,a,76,a)].

given #128 (F,wt=2): 179 -POD(c23).  [resolve(124,a,74,b)].

given #129 (F,wt=2): 181 -DPF(c21).  [ur(84,a,142,a)].

given #130 (T,wt=3): 217 PED(f2(c21)).  [resolve(214,a,72,a)].

given #131 (T,wt=4): 157 RPF(c12) | DPF(c12).  [resolve(110,a,82,a)].

given #132 (T,wt=4): 158 hosts(f1(c12),c12).  [resolve(110,a,80,a)].

given #133 (T,wt=3): 226 PED(f1(c12)).  [resolve(158,a,78,a)].

given #134 (A,wt=6): 129 -DK1(x,c24) | c23 = x.  [resolve(88,a,62,a),flip(b)].

given #135 (F,wt=2): 182 -RPF(c21).  [ur(83,a,142,a)].

given #136 (F,wt=2): 193 -NAPO(c12).  [ur(77,b,161,a)].

given #137 (F,wt=2): 195 -NAPO(c8).  [ur(77,b,166,a)].

given #138 (F,wt=2): 204 -NAPO(c19).  [ur(77,b,170,a)].

given #139 (T,wt=4): 162 RPF(c8) | DPF(c8).  [resolve(111,a,82,a)].

given #140 (T,wt=4): 163 hosts(f1(c8),c8).  [resolve(111,a,80,a)].

given #141 (T,wt=3): 229 PED(f1(c8)).  [resolve(163,a,78,a)].

given #142 (T,wt=4): 167 hosts(f1(c19),c19).  [resolve(117,a,80,a)].

given #143 (A,wt=3): 130 -DK1(c28,c28).  [ur(88,b,66,a,c,67,a(flip))].

given #144 (F,wt=2): 206 -NAPO(c15).  [ur(77,b,174,a)].

given #145 (F,wt=2): 207 -DPF(c27).  [ur(84,a,175,a)].

given #146 (F,wt=2): 208 -RPF(c27).  [ur(83,a,175,a)].

given #147 (F,wt=2): 219 -NAPO(c27).  [ur(77,b,176,a)].

given #148 (T,wt=3): 232 PED(f1(c19)).  [resolve(167,a,78,a)].

given #149 (T,wt=4): 171 hosts(f1(c15),c15).  [resolve(119,a,80,a)].

given #150 (T,wt=3): 235 PED(f1(c15)).  [resolve(171,a,78,a)].

given #151 (T,wt=4): 190 F(c28) | PED(c28).  [resolve(126,a,71,a)].

given #152 (A,wt=3): 131 -DK1(c24,c24).  [ur(88,b,62,a,c,63,a(flip))].

given #153 (F,wt=2): 220 -DPF(c23).  [ur(84,a,178,a)].

given #154 (F,wt=2): 221 -RPF(c23).  [ur(83,a,178,a)].

given #155 (F,wt=2): 224 -NAPO(c23).  [ur(77,b,179,a)].

given #156 (F,wt=3): 135 -DK1(c18,x).  [ur(86,b,96,a)].

given #157 (T,wt=4): 192 F(c24) | PED(c24).  [resolve(127,a,71,a)].

given #158 (T,wt=6): 155 POD(c11) | M(c11) | F(c11).  [resolve(107,a,70,a)].

given #159 (T,wt=6): 156 POD(c7) | M(c7) | F(c7).  [resolve(108,a,70,a)].

given #160 (T,wt=6): 189 F(c28) | DK1(f2(c28),c28).  [resolve(126,a,89,a)].

given #161 (A,wt=3): 136 -DK1(x,c18).  [ur(87,b,94,a,c,98,a)].

given #162 (F,wt=3): 139 -hosts(x,c18).  [ur(79,b,98,a)].

given #163 (F,wt=3): 145 -DK1(c3,x).  [ur(86,b,100,a)].

given #164 (F,wt=3): 148 -hosts(x,c3).  [ur(79,b,101,a)].

given #165 (F,wt=3): 150 -DK1(x,c1).  [ur(87,b,99,a,c,103,a)].

given #166 (T,wt=5): 239 F(c28) | M(f2(c28)).  [resolve(189,b,86,a)].

given #167 (T,wt=5): 240 F(c28) | -F(f2(c28)).  [resolve(239,b,76,a)].

given #168 (T,wt=5): 241 F(c28) | -POD(f2(c28)).  [resolve(239,b,74,b)].

given #169 (T,wt=5): 242 F(c28) | PED(f2(c28)).  [resolve(239,b,72,a)].

given #170 (A,wt=3): 153 -hosts(x,c1).  [ur(79,b,103,a)].

given #171 (F,wt=3): 154 -DK1(c5,x).  [ur(86,b,104,a)].

given #172 (F,wt=3): 183 -hosts(x,c21).  [ur(79,b,142,a)].

given #173 (F,wt=3): 184 -DK1(c21,x).  [ur(86,b,144,a)].

given #174 (F,wt=3): 187 -DK1(c12,x).  [ur(86,b,160,a)].

given #175 (T,wt=6): 191 F(c24) | DK1(f2(c24),c24).  [resolve(127,a,89,a)].

given #176 (T,wt=5): 245 F(c24) | M(f2(c24)).  [resolve(191,b,86,a)].

given #177 (T,wt=5): 246 F(c24) | -F(f2(c24)).  [resolve(245,b,76,a)].

given #178 (T,wt=5): 247 F(c24) | -POD(f2(c24)).  [resolve(245,b,74,b)].

given #179 (A,wt=4): 185 -hosts(c5,f1(c5)).  [resolve(113,a,81,b)].

given #180 (F,wt=3): 194 -DK1(c8,x).  [ur(86,b,165,a)].

given #181 (F,wt=3): 196 -DK1(c19,x).  [ur(86,b,169,a)].

given #182 (F,wt=3): 199 -F(f2(c3)).  [resolve(198,a,76,a)].

given #183 (F,wt=3): 200 -POD(f2(c3)).  [resolve(198,a,74,b)].

given #184 (T,wt=5): 248 F(c24) | PED(f2(c24)).  [resolve(245,b,72,a)].

given #185 (T,wt=6): 237 F(c28) | f2(c28) = c27.  [resolve(189,b,128,a),flip(b)].

given #186 (T,wt=6): 243 F(c24) | f2(c24) = c23.  [resolve(191,b,129,a),flip(b)].

given #187 (T,wt=6): 256 f2(c28) = c27 | PED(c28).  [resolve(237,a,73,a)].

given #188 (A,wt=9): 188 POD(f1(c5)) | M(f1(c5)) | F(f1(c5)).  [resolve(186,a,70,a)].

given #189 (F,wt=3): 205 -DK1(c15,x).  [ur(86,b,173,a)].

given #190 (F,wt=3): 209 -hosts(x,c27).  [ur(79,b,175,a)].

given #191 (F,wt=3): 210 -F(f2(c19)).  [resolve(203,a,76,a)].

given #192 (F,wt=3): 211 -POD(f2(c19)).  [resolve(203,a,74,b)].

given #193 (T,wt=6): 259 f2(c24) = c23 | PED(c24).  [resolve(243,a,73,a)].

given #194 (T,wt=7): 197 -DK1(x,c3) | f2(c3) = x.  [resolve(132,a,88,b)].

given #195 (T,wt=7): 202 -DK1(x,c19) | f2(c19) = x.  [resolve(133,a,88,b)].

given #196 (T,wt=7): 213 -DK1(x,c21) | f2(c21) = x.  [resolve(141,a,88,b)].

given #197 (A,wt=3): 215 -F(f2(c21)).  [resolve(214,a,76,a)].

given #198 (F,wt=3): 216 -POD(f2(c21)).  [resolve(214,a,74,b)].

given #199 (F,wt=3): 218 -DK1(x,c27).  [ur(87,b,176,a,c,175,a)].

given #200 (F,wt=3): 222 -hosts(x,c23).  [ur(79,b,178,a)].

given #201 (F,wt=3): 223 -DK1(x,c23).  [ur(87,b,179,a,c,178,a)].

given #202 (T,wt=8): 254 f2(c28) = c27 | RPF(c28) | DPF(c28).  [resolve(237,a,82,a)].

given #203 (T,wt=8): 255 f2(c28) = c27 | hosts(f1(c28),c28).  [resolve(237,a,80,a)].

given #204 (T,wt=7): 271 f2(c28) = c27 | PED(f1(c28)).  [resolve(255,b,78,a)].

given #205 (T,wt=8): 257 f2(c24) = c23 | RPF(c24) | DPF(c24).  [resolve(243,a,82,a)].

given #206 (A,wt=4): 225 -hosts(c12,f1(c12)).  [resolve(158,a,81,b)].

given #207 (F,wt=3): 249 -DPF(f2(c3)).  [ur(84,a,199,a)].

given #208 (F,wt=3): 250 -RPF(f2(c3)).  [ur(83,a,199,a)].

given #209 (F,wt=3): 253 -NAPO(f2(c3)).  [ur(77,b,200,a)].

given #210 (F,wt=3): 260 -DPF(f2(c19)).  [ur(84,a,210,a)].

given #211 (T,wt=8): 258 f2(c24) = c23 | hosts(f1(c24),c24).  [resolve(243,a,80,a)].

given #212 (T,wt=7): 274 f2(c24) = c23 | PED(f1(c24)).  [resolve(258,b,78,a)].

given #213 (T,wt=8): 270 f2(c28) = c27 | -hosts(c28,f1(c28)).  [resolve(255,b,81,b)].

given #214 (T,wt=8): 273 f2(c24) = c23 | -hosts(c24,f1(c24)).  [resolve(258,b,81,b)].

given #215 (A,wt=9): 227 POD(f1(c12)) | M(f1(c12)) | F(f1(c12)).  [resolve(226,a,70,a)].

given #216 (F,wt=3): 261 -RPF(f2(c19)).  [ur(83,a,210,a)].

given #217 (F,wt=3): 264 -NAPO(f2(c19)).  [ur(77,b,211,a)].

given #218 (F,wt=3): 265 -DPF(f2(c21)).  [ur(84,a,215,a)].

given #219 (F,wt=3): 266 -RPF(f2(c21)).  [ur(83,a,215,a)].

given #220 (T,wt=9): 230 POD(f1(c8)) | M(f1(c8)) | F(f1(c8)).  [resolve(229,a,70,a)].

given #221 (T,wt=9): 233 POD(f1(c19)) | M(f1(c19)) | F(f1(c19)).  [resolve(232,a,70,a)].

given #222 (T,wt=9): 236 POD(f1(c15)) | M(f1(c15)) | F(f1(c15)).  [resolve(235,a,70,a)].

given #223 (T,wt=9): 238 F(c28) | -DK1(x,c28) | f2(c28) = x.  [resolve(189,b,88,b)].

given #224 (A,wt=4): 228 -hosts(c8,f1(c8)).  [resolve(163,a,81,b)].

given #225 (F,wt=3): 269 -NAPO(f2(c21)).  [ur(77,b,216,a)].

given #226 (F,wt=4): 231 -hosts(c19,f1(c19)).  [resolve(167,a,81,b)].

given #227 (F,wt=4): 234 -hosts(c15,f1(c15)).  [resolve(171,a,81,b)].

given #228 (F,wt=4): 251 -hosts(x,f2(c3)).  [ur(79,b,199,a)].

given #229 (T,wt=9): 244 F(c24) | -DK1(x,c24) | f2(c24) = x.  [resolve(191,b,88,b)].

given #230 (T,wt=13): 272 f2(c28) = c27 | POD(f1(c28)) | M(f1(c28)) | F(f1(c28)).  [resolve(271,b,70,a)].

given #231 (T,wt=13): 275 f2(c24) = c23 | POD(f1(c24)) | M(f1(c24)) | F(f1(c24)).  [resolve(274,b,70,a)].

given #232 (A,wt=4): 252 -DK1(x,f2(c3)).  [ur(87,b,200,a,c,199,a)].

given #233 (F,wt=4): 262 -hosts(x,f2(c19)).  [ur(79,b,210,a)].

given #234 (F,wt=4): 263 -DK1(x,f2(c19)).  [ur(87,b,211,a,c,210,a)].

given #235 (F,wt=4): 267 -hosts(x,f2(c21)).  [ur(79,b,215,a)].

given #236 (F,wt=4): 268 -DK1(x,f2(c21)).  [ur(87,b,216,a,c,215,a)].

============================== STATISTICS ============================

Given=236. Generated=406. Kept=236. proofs=0.
Usable=236. Sos=0. Demods=0. Limbo=0, Disabled=52. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=170. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=40. Nonunit_bsub_feature_tests=70.
Megabytes=0.46.
User_CPU=0.02, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

SEARCH FAILED

SEARCH FAILED

Exiting with failure.

------ process 10596 exit (sos_empty) ------

Process 10596 exit (sos_empty) Fri Aug  9 14:18:49 2013
============================= prover9 ================================
execution finished: Fri Aug 09 14:18:50 2013
total CPU time used: 0
The command was "prover9 -t600 -f /stl/torsten/git/macleod/qs/multidim_space_ped/consistency/p9/ped_all_weak_nontrivial.p9 /stl/torsten/git/macleod/qs/multidim_space_ped/p9/ped.p9"
Input read from 
============================ end of footer ===========================
