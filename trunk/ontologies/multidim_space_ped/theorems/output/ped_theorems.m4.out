============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 13346 was started by torsten on stl-ws2,
Tue Oct 23 18:43:46 2012
The command was "mace4 -c -t 600 -s 60 -n 2 -N 20 -f multidim_space_ped/theorems/input/ped_theorems.p9  multidim_space_ped/input/ped.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file multidim_space_ped/theorems/input/ped_theorems.p9


formulas(sos).
(all x -DK1(x,x)).
(all x all y (DK1(x,y) -> -DK1(y,x))).
end_of_list.

% Reading from file  multidim_space_ped/input/ped.p9


formulas(sos).
(all x (PED(x) -> POD(x) | M(x) | F(x))).
(all x (POD(x) -> PED(x))).
(all x (M(x) -> PED(x))).
(all x (F(x) -> PED(x))).
(all x (POD(x) -> -M(x))).
(all x (POD(x) -> -F(x))).
(all x (M(x) -> -F(x))).
(all x (NAPO(x) -> POD(x))).
(all x all y (hosts(x,y) -> PED(x) & F(y))).
(all x (F(x) <-> (exists y hosts(y,x)))).
(all x all y (hosts(x,y) -> -hosts(y,x))).
(all x (F(x) <-> RPF(x) | DPF(x))).
(all x (-RPF(x) | -DPF(x))).
(all x all y (DK1(x,y) -> M(x))).
(all x all y (DK1(x,y) -> POD(y) | F(y))).
(all x all y all z (DK1(x,y) & DK1(z,y) -> x = z)).
(all y (POD(y) | RPF(y) -> (exists x DK1(x,y)))).
end_of_list.

% From the command line: assign(max_seconds, 600).

% From the command line: assign(max_seconds_per, 60).
    % assign(domain_size, 2) -> assign(start_size, 2).
    % assign(domain_size, 2) -> assign(end_size, 2).

% From the command line: assign(domain_size, 2).

% From the command line: assign(end_size, 20).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x -DK1(x,x)) # label(non_clause).  [assumption].
2 (all x all y (DK1(x,y) -> -DK1(y,x))) # label(non_clause).  [assumption].
3 (all x (PED(x) -> POD(x) | M(x) | F(x))) # label(non_clause).  [assumption].
4 (all x (POD(x) -> PED(x))) # label(non_clause).  [assumption].
5 (all x (M(x) -> PED(x))) # label(non_clause).  [assumption].
6 (all x (F(x) -> PED(x))) # label(non_clause).  [assumption].
7 (all x (POD(x) -> -M(x))) # label(non_clause).  [assumption].
8 (all x (POD(x) -> -F(x))) # label(non_clause).  [assumption].
9 (all x (M(x) -> -F(x))) # label(non_clause).  [assumption].
10 (all x (NAPO(x) -> POD(x))) # label(non_clause).  [assumption].
11 (all x all y (hosts(x,y) -> PED(x) & F(y))) # label(non_clause).  [assumption].
12 (all x (F(x) <-> (exists y hosts(y,x)))) # label(non_clause).  [assumption].
13 (all x all y (hosts(x,y) -> -hosts(y,x))) # label(non_clause).  [assumption].
14 (all x (F(x) <-> RPF(x) | DPF(x))) # label(non_clause).  [assumption].
15 (all x (-RPF(x) | -DPF(x))) # label(non_clause).  [assumption].
16 (all x all y (DK1(x,y) -> M(x))) # label(non_clause).  [assumption].
17 (all x all y (DK1(x,y) -> POD(y) | F(y))) # label(non_clause).  [assumption].
18 (all x all y all z (DK1(x,y) & DK1(z,y) -> x = z)) # label(non_clause).  [assumption].
19 (all y (POD(y) | RPF(y) -> (exists x DK1(x,y)))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-DK1(x,x).
-DK1(x,y) | -DK1(y,x).
-PED(x) | POD(x) | M(x) | F(x).
-POD(x) | PED(x).
-M(x) | PED(x).
-F(x) | PED(x).
-POD(x) | -M(x).
-POD(x) | -F(x).
-M(x) | -F(x).
-NAPO(x) | POD(x).
-hosts(x,y) | PED(x).
-hosts(x,y) | F(y).
-F(x) | hosts(f1(x),x).
F(x) | -hosts(y,x).
-hosts(x,y) | -hosts(y,x).
-F(x) | RPF(x) | DPF(x).
F(x) | -RPF(x).
F(x) | -DPF(x).
-RPF(x) | -DPF(x).
-DK1(x,y) | M(x).
-DK1(x,y) | POD(y) | F(y).
-DK1(x,y) | -DK1(z,y) | z = x.
-POD(x) | DK1(f2(x),x).
-RPF(x) | DK1(f2(x),x).
end_of_list.

============================== end of clauses for search =============

% There are no natural numbers in the input.

============================== DOMAIN SIZE 2 =========================

============================== MODEL =================================

interpretation( 2, [number=1, seconds=0], [

        function(f1(_), [ 0, 0 ]),

        function(f2(_), [ 0, 0 ]),

        relation(DPF(_), [ 0, 0 ]),

        relation(F(_), [ 0, 0 ]),

        relation(M(_), [ 0, 0 ]),

        relation(NAPO(_), [ 0, 0 ]),

        relation(PED(_), [ 0, 0 ]),

        relation(POD(_), [ 0, 0 ]),

        relation(RPF(_), [ 0, 0 ]),

        relation(DK1(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(hosts(_,_), [
			   0, 0,
			   0, 0 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=68, kept=54.
Selections=6, assignments=6, propagations=20, current_models=1.
Rewrite_terms=6, rewrite_bools=76, indexes=0.
Rules_from_neg_clauses=0, cross_offs=0.

============================== end of statistics =====================

User_CPU=0.01, System_CPU=0.00, Wall_clock=0.

Exiting with 1 model.

Process 13346 exit (max_models) Tue Oct 23 18:43:46 2012
The process finished Tue Oct 23 18:43:46 2012
