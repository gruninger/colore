============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 10616 was started by torsten on stl-ws2,
Thu Oct 20 21:25:44 2011
The command was "prover9 -t 600 -f codi/conversions/codi_basic.p9 codi/definitions/input/ep.p9 codi/definitions/input/sc.p9 dim/conversions/dim_basic.p9 cont/conversions/cont_c_ext.p9 cont/conversions/cont_c.p9 cont/conversions/cont_ext.p9 cont/conversions/cont_basic.p9 codi/theorems/input/options.txt codi/theorems/generated/sc_theorems_relevance1.order codi/theorems/input/sc_theorems_6.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file codi/conversions/codi_basic.p9


formulas(sos).
(all x all y (Cont(x,y) -> x < y | EqDim(x,y))).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file codi/definitions/input/sc.p9


formulas(sos).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))).
end_of_list.

% Reading from file dim/conversions/dim_basic.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y < z -> x < z)).
(all x EqDim(x,x)).
(all x all y (EqDim(x,y) -> EqDim(y,x))).
(all x all y all z (EqDim(x,y) & EqDim(y,z) -> EqDim(x,z))).
(all x all y (x < y -> -EqDim(x,y))).
(all x all y all z (EqDim(x,y) -> (z < x -> z < y))).
(all x all y all z (EqDim(x,y) -> (x < z -> y < z))).
(exists x (-ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
end_of_list.

% Reading from file cont/conversions/cont_c_ext.p9


formulas(sos).
end_of_list.

% Reading from file cont/conversions/cont_c.p9


formulas(sos).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
(all x all y (-ZEX(x) & (all z (C(z,x) -> C(z,y))) & (exists z (C(z,y) & -C(z,x))) -> Cont(x,y))).
end_of_list.

% Reading from file cont/conversions/cont_ext.p9


formulas(sos).
(all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
end_of_list.

% Reading from file codi/theorems/input/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file codi/theorems/generated/sc_theorems_relevance1.order

predicate_order([=,C,ZEX,P,SC,EqDim,Cont,<]).
set(inverse_order).
assign(order,kbo).

% Reading from file codi/theorems/input/sc_theorems_6.p9


formulas(goals).
(all x all y (SC(x,y) -> SC(y,x))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
2 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
3 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))) # label(non_clause).  [assumption].
4 (all x -(x < x)) # label(non_clause).  [assumption].
5 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
6 (all x all y all z (x < y & y < z -> x < z)) # label(non_clause).  [assumption].
7 (all x EqDim(x,x)) # label(non_clause).  [assumption].
8 (all x all y (EqDim(x,y) -> EqDim(y,x))) # label(non_clause).  [assumption].
9 (all x all y all z (EqDim(x,y) & EqDim(y,z) -> EqDim(x,z))) # label(non_clause).  [assumption].
10 (all x all y (x < y -> -EqDim(x,y))) # label(non_clause).  [assumption].
11 (all x all y all z (EqDim(x,y) -> (z < x -> z < y))) # label(non_clause).  [assumption].
12 (all x all y all z (EqDim(x,y) -> (x < z -> y < z))) # label(non_clause).  [assumption].
13 (exists x (-ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
14 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
15 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
16 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
18 (all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)) # label(non_clause).  [assumption].
19 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
20 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
21 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
22 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
23 (all x all y (SC(x,y) -> SC(y,x))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating P/2
24 P(x,y) | -Cont(x,y) | -EqDim(x,y).  [clausify(2)].
25 -P(x,y) | Cont(x,y).  [clausify(2)].
26 -P(x,y) | EqDim(x,y).  [clausify(2)].

============================== end predicate elimination =============

Term ordering decisions:
Function symbol KB weights:  c1=1. c2=1. c3=1. f1=1. f2=1. f3=1. f4=1. f5=1.
Predicate symbol precedence:  predicate_order([ =, C, ZEX, SC, EqDim, Cont, < ]).
Function symbol precedence:  function_order([ c1, c2, c3, f1, f2, f3, f4, f5 ]).
Skipping inverse_order, because term ordering is KBO.
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

NOTE: Back_subsumption disabled, ratio of kept to back_subsumed is 109 (0.00 of 0.16 sec).

Low Water (keep): wt=34.000, iters=6688

Low Water (keep): wt=33.000, iters=6667

Low Water (keep): wt=31.000, iters=6689

Low Water (keep): wt=28.000, iters=6684

Low Water (keep): wt=25.000, iters=6701

Low Water (keep): wt=24.000, iters=6683

Low Water (keep): wt=23.000, iters=6705

Low Water (keep): wt=22.000, iters=6701

Low Water (keep): wt=21.000, iters=6676

Low Water (keep): wt=20.000, iters=6769

Low Water (keep): wt=19.000, iters=6669

Low Water (keep): wt=18.000, iters=6671

Low Water (keep): wt=17.000, iters=6679

Low Water (keep): wt=16.000, iters=6715

Low Water (keep): wt=15.000, iters=6694

Low Water (keep): wt=13.000, iters=6675

Low Water (displace): id=9926, wt=47.000

Low Water (displace): id=18517, wt=17.000

Low Water (displace): id=21078, wt=16.000

Low Water (displace): id=23135, wt=15.000

Low Water (displace): id=24254, wt=14.000

Low Water (displace): id=25160, wt=13.000

Low Water (keep): wt=11.000, iters=6667

============================== PROOF =================================

% Proof 1 at 106.62 (+ 0.13) seconds.
% Length of proof is 54.
% Level of proof is 14.
% Maximum clause weight is 19.000.
% Given clauses 14134.

3 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))) # label(non_clause).  [assumption].
4 (all x -(x < x)) # label(non_clause).  [assumption].
16 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
19 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
21 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
22 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
23 (all x all y (SC(x,y) -> SC(y,x))) # label(non_clause) # label(goal).  [goal].
28 -SC(x,y) | Cont(f1(x,y),x).  [clausify(3)].
29 -SC(x,y) | Cont(f1(x,y),y).  [clausify(3)].
30 -SC(x,y) | -Cont(z,x) | -Cont(z,y) | z < x.  [clausify(3)].
31 -SC(x,y) | -Cont(z,x) | -Cont(z,y) | z < y.  [clausify(3)].
32 SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f2(x,y),x).  [clausify(3)].
33 SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f2(x,y),y).  [clausify(3)].
34 SC(x,y) | -Cont(z,x) | -Cont(z,y) | -(f2(x,y) < x) | -(f2(x,y) < y).  [clausify(3)].
35 -(x < x).  [clausify(4)].
48 -C(x,y) | Cont(f3(x,y),x).  [clausify(16)].
49 -C(x,y) | Cont(f3(x,y),y).  [clausify(16)].
50 C(x,y) | -Cont(z,x) | -Cont(z,y).  [clausify(16)].
55 ZEX(x) | Cont(x,x).  [clausify(19)].
58 -Cont(x,y) | -Cont(y,z) | Cont(x,z).  [clausify(21)].
60 -ZEX(x) | -Cont(x,y).  [clausify(22)].
61 SC(c2,c3).  [deny(23)].
62 -SC(c3,c2).  [deny(23)].
91 ZEX(x) | C(x,y) | -Cont(x,y).  [resolve(55,b,50,b)].
93 ZEX(x) | SC(x,y) | -Cont(x,y) | Cont(f2(x,y),y).  [resolve(55,b,33,b)].
95 ZEX(x) | SC(x,y) | -Cont(x,y) | Cont(f2(x,y),x).  [resolve(55,b,32,b)].
98 ZEX(x) | -SC(x,y) | -Cont(x,y).  [resolve(55,b,30,b),unit_del(d,35)].
111 Cont(f1(c2,c3),c3).  [resolve(61,a,29,a)].
112 Cont(f1(c2,c3),c2).  [resolve(61,a,28,a)].
131 C(x,c3) | -Cont(f1(c2,c3),x).  [resolve(111,a,50,c)].
134 SC(c3,x) | -Cont(f1(c2,c3),x) | Cont(f2(c3,x),x).  [resolve(111,a,33,b)].
136 SC(c3,x) | -Cont(f1(c2,c3),x) | Cont(f2(c3,x),c3).  [resolve(111,a,32,b)].
2469 C(c2,c3).  [resolve(131,b,112,a)].
2472 Cont(f3(c2,c3),c3).  [resolve(2469,a,49,a)].
2473 Cont(f3(c2,c3),c2).  [resolve(2469,a,48,a)].
2486 -ZEX(f3(c2,c3)).  [resolve(2472,a,60,b)].
2487 -Cont(x,f3(c2,c3)) | Cont(x,c3).  [resolve(2472,a,58,b)].
2552 -SC(f3(c2,c3),c2).  [resolve(2473,a,98,c),unit_del(a,2486)].
2554 Cont(f2(f3(c2,c3),c2),f3(c2,c3)).  [resolve(2473,a,95,c),unit_del(a,2486),unit_del(b,2552)].
2556 Cont(f2(f3(c2,c3),c2),c2).  [resolve(2473,a,93,c),unit_del(a,2486),unit_del(b,2552)].
2869 ZEX(f2(f3(c2,c3),c2)) | C(f2(f3(c2,c3),c2),c2).  [resolve(2556,a,91,c)].
2871 -ZEX(f2(f3(c2,c3),c2)).  [resolve(2556,a,60,b)].
2889 C(f2(f3(c2,c3),c2),c2).  [back_unit_del(2869),unit_del(a,2871)].
3206 Cont(f3(f2(f3(c2,c3),c2),c2),c2).  [resolve(2889,a,49,a)].
3207 Cont(f3(f2(f3(c2,c3),c2),c2),f2(f3(c2,c3),c2)).  [resolve(2889,a,48,a)].
3312 Cont(f2(c3,c2),c2).  [resolve(134,b,112,a),unit_del(a,62)].
3346 -SC(c2,x) | -Cont(f2(c3,c2),x) | f2(c3,c2) < x.  [resolve(3312,a,31,b)].
3395 Cont(f2(c3,c2),c3).  [resolve(136,b,112,a),unit_del(a,62)].
11788 Cont(f2(f3(c2,c3),c2),c3).  [resolve(2554,a,2487,a)].
11825 -Cont(x,f2(f3(c2,c3),c2)) | Cont(x,c3).  [resolve(11788,a,58,b)].
36644 Cont(f3(f2(f3(c2,c3),c2),c2),c3).  [resolve(3207,a,11825,a)].
37140 f2(c3,c2) < c3.  [resolve(3346,b,3395,a),unit_del(a,61)].
37156 -(f2(c3,c2) < c2).  [ur(34,a,62,a,b,36644,a,c,3206,a,d,37140,a)].
37397 $F.  [ur(30,b,3312,a,c,3395,a,d,37156,a),unit_del(a,61)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=14134. Generated=656122. Kept=37370. proofs=1.
Usable=14122. Sos=19483. Demods=0. Limbo=0, Disabled=3804. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=78710. Back_subsumed=31.
Sos_limit_deleted=540041. Sos_displaced=1122. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=2612.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=428175. Nonunit_bsub_feature_tests=13711.
Megabytes=46.52.
User_CPU=106.62, System_CPU=0.13, Wall_clock=107.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 10616 exit (max_proofs) Thu Oct 20 21:27:31 2011
