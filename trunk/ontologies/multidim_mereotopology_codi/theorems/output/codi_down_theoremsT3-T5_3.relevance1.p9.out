============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 23190 was started by torsten on stl-ws2,
Thu Nov 24 19:59:44 2011
The command was "prover9 -t 600 -f codi/conversions/codi_down.p9 codi/theorems/input/codi_down_theoremsT1-T2.p9 codi/conversions/codi_int.p9 codi/conversions/codi_linear.p9 zex/input/zex.p9 dim/conversions/dim_prime_linear.p9 cont/conversions/cont_c_ext.p9 codi/definitions/input/ep.p9 codi/definitions/input/epp.p9 codi/definitions/input/po.p9 codi/definitions/input/inc.p9 codi/definitions/input/sc.p9 codi/definitions/input/min_max_in_dim.p9 cont/conversions/cont_c.p9 cont/conversions/cont_ext.p9 cont/conversions/cont_basic.p9 codi/theorems/input/options.txt codi/theorems/generated/codi_down_theoremsT3-T5_relevance1.order codi/theorems/input/codi_down_theoremsT3-T5_3.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file codi/conversions/codi_down.p9


formulas(sos).
(all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))).
(all x all y (y < x -> x = difference(x,y))).
(all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))).
(all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))).
(all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)).
(all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))).
end_of_list.

% Reading from file codi/theorems/input/codi_down_theoremsT1-T2.p9


formulas(sos).
(all x all y (-ZEX(difference(x,y)) -> P(difference(x,y),x))).
(all x all y (PP(y,x) & -ZEX(difference(x,y)) & P(difference(x,y),x) -> PP(difference(x,y),x))).
(all x all y (PP(y,x) -> PP(difference(x,y),x))).
end_of_list.

% Reading from file codi/conversions/codi_int.p9


formulas(sos).
(all x all y (-C(x,y) -> ZEX(intersection(x,y)))).
(all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))).
(all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))).
(all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))).
end_of_list.

% Reading from file codi/conversions/codi_linear.p9


formulas(sos).
(all x all y (Cont(x,y) -> x <= y)).
end_of_list.

% Reading from file zex/input/zex.p9


formulas(sos).
(exists x ZEX(x)).
end_of_list.

% Reading from file dim/conversions/dim_prime_linear.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y <= z -> x < z)).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
(exists x MinDim(x)).
(all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x (MaxDim(x) <-> (all y y <= x))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))).
end_of_list.

% Reading from file cont/conversions/cont_c_ext.p9


formulas(sos).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file codi/definitions/input/epp.p9


formulas(sos).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
end_of_list.

% Reading from file codi/definitions/input/po.p9


formulas(sos).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
end_of_list.

% Reading from file codi/definitions/input/inc.p9


formulas(sos).
(all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))).
end_of_list.

% Reading from file codi/definitions/input/sc.p9


formulas(sos).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))).
end_of_list.

% Reading from file codi/definitions/input/min_max_in_dim.p9


formulas(sos).
(all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))).
(all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))).
end_of_list.

% Reading from file cont/conversions/cont_c.p9


formulas(sos).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
(all x all y (-ZEX(x) & (all z (C(z,x) -> C(z,y))) & (exists z (C(z,y) & -C(z,x))) -> Cont(x,y))).
end_of_list.

% Reading from file cont/conversions/cont_ext.p9


formulas(sos).
(all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
end_of_list.

% Reading from file codi/theorems/input/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file codi/theorems/generated/codi_down_theoremsT3-T5_relevance1.order

predicate_order([=,EqDim,ZEX,C,PO,P,PP,<=,ZEX,intersection,<,Cont,difference]).
set(inverse_order).
assign(order,kbo).

% Reading from file codi/theorems/input/codi_down_theoremsT3-T5_3.p9


formulas(goals).
(all x all y all z (P(z,difference(x,y)) -> P(z,x))).
end_of_list.
WARNING, predicate symbols in predicate_order (lex) command not found in formulas: intersection, difference.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
2 (all x all y (y < x -> x = difference(x,y))) # label(non_clause).  [assumption].
3 (all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))) # label(non_clause).  [assumption].
4 (all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
5 (all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)) # label(non_clause).  [assumption].
6 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
7 (all x all y (-ZEX(difference(x,y)) -> P(difference(x,y),x))) # label(non_clause).  [assumption].
8 (all x all y (PP(y,x) & -ZEX(difference(x,y)) & P(difference(x,y),x) -> PP(difference(x,y),x))) # label(non_clause).  [assumption].
9 (all x all y (PP(y,x) -> PP(difference(x,y),x))) # label(non_clause).  [assumption].
10 (all x all y (-C(x,y) -> ZEX(intersection(x,y)))) # label(non_clause).  [assumption].
11 (all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
12 (all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))) # label(non_clause).  [assumption].
13 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
14 (all x all y (Cont(x,y) -> x <= y)) # label(non_clause).  [assumption].
15 (exists x ZEX(x)) # label(non_clause).  [assumption].
16 (all x -(x < x)) # label(non_clause).  [assumption].
17 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
18 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
19 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
20 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
21 (exists x MinDim(x)) # label(non_clause).  [assumption].
22 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
23 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
24 (all x (MaxDim(x) <-> (all y y <= x))) # label(non_clause).  [assumption].
25 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
26 (all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))) # label(non_clause).  [assumption].
27 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
28 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
29 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
30 (all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))) # label(non_clause).  [assumption].
31 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))) # label(non_clause).  [assumption].
32 (all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))) # label(non_clause).  [assumption].
33 (all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))) # label(non_clause).  [assumption].
34 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
36 (all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)) # label(non_clause).  [assumption].
37 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
38 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
39 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
40 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
41 (all x all y all z (P(z,difference(x,y)) -> P(z,x))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating MinDim/1
42 -MinDim(x) | -ZEX(x).  [clausify(25)].
43 MinDim(c2).  [clausify(21)].
Derived: -ZEX(c2).  [resolve(42,a,43,a)].
44 -MinDim(x) | -(y < x) | ZEX(y).  [clausify(25)].
Derived: -(x < c2) | ZEX(x).  [resolve(44,a,43,a)].
45 MinDim(x) | ZEX(x) | f2(x) < x.  [clausify(25)].
Derived: ZEX(x) | f2(x) < x | -(y < x) | ZEX(y).  [resolve(45,a,44,a)].
46 MinDim(x) | ZEX(x) | -ZEX(f2(x)).  [clausify(25)].
Derived: ZEX(x) | -ZEX(f2(x)) | -(y < x) | ZEX(y).  [resolve(46,a,44,a)].

Eliminating MaxDim/1
47 MaxDim(x) | -(f1(x) <= x).  [clausify(24)].
48 -MaxDim(x) | y <= x.  [clausify(24)].
Derived: -(f1(x) <= x) | y <= x.  [resolve(47,a,48,a)].

Eliminating Covers/2
49 Covers(x,y) | -(y < x) | y < f3(x,y).  [clausify(26)].
50 -Covers(x,y) | y < x.  [clausify(26)].
51 -Covers(x,y) | -(y < z) | -(z < x).  [clausify(26)].
Derived: -(x < y) | x < f3(y,x) | -(x < z) | -(z < y).  [resolve(49,a,51,a)].
52 Covers(x,y) | -(y < x) | f3(x,y) < x.  [clausify(26)].
Derived: -(x < y) | f3(y,x) < y | -(x < z) | -(z < y).  [resolve(52,a,51,a)].

Eliminating PO/2
53 PO(x,y) | -P(z,x) | -P(z,y).  [clausify(29)].
54 -PO(x,y) | P(f4(x,y),x).  [clausify(29)].
55 -PO(x,y) | P(f4(x,y),y).  [clausify(29)].
Derived: -P(x,y) | -P(x,z) | P(f4(y,z),y).  [resolve(53,a,54,a)].
Derived: -P(x,y) | -P(x,z) | P(f4(y,z),z).  [resolve(53,a,55,a)].

Eliminating Inc/2
56 Inc(x,y) | -(z < x) | -Cont(z,x) | -P(z,y).  [clausify(30)].
57 -Inc(x,y) | f5(x,y) < x | f6(x,y) < y.  [clausify(30)].
58 -Inc(x,y) | f5(x,y) < x | Cont(f6(x,y),y).  [clausify(30)].
59 -Inc(x,y) | f5(x,y) < x | P(f6(x,y),x).  [clausify(30)].
60 -Inc(x,y) | Cont(f5(x,y),x) | f6(x,y) < y.  [clausify(30)].
61 -Inc(x,y) | Cont(f5(x,y),x) | Cont(f6(x,y),y).  [clausify(30)].
62 -Inc(x,y) | Cont(f5(x,y),x) | P(f6(x,y),x).  [clausify(30)].
63 -Inc(x,y) | P(f5(x,y),y) | f6(x,y) < y.  [clausify(30)].
64 -Inc(x,y) | P(f5(x,y),y) | Cont(f6(x,y),y).  [clausify(30)].
65 -Inc(x,y) | P(f5(x,y),y) | P(f6(x,y),x).  [clausify(30)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f5(y,z) < y | f6(y,z) < z.  [resolve(56,a,57,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f5(y,z) < y | Cont(f6(y,z),z).  [resolve(56,a,58,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f5(y,z) < y | P(f6(y,z),y).  [resolve(56,a,59,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f5(y,z),y) | f6(y,z) < z.  [resolve(56,a,60,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f5(y,z),y) | Cont(f6(y,z),z).  [resolve(56,a,61,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f5(y,z),y) | P(f6(y,z),y).  [resolve(56,a,62,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f5(y,z),z) | f6(y,z) < z.  [resolve(56,a,63,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f5(y,z),z) | Cont(f6(y,z),z).  [resolve(56,a,64,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f5(y,z),z) | P(f6(y,z),y).  [resolve(56,a,65,a)].
66 Inc(x,y) | -(z < y) | -Cont(z,y) | -P(z,x).  [clausify(30)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f5(z,y) < z | f6(z,y) < y.  [resolve(66,a,57,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f5(z,y) < z | Cont(f6(z,y),y).  [resolve(66,a,58,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f5(z,y) < z | P(f6(z,y),z).  [resolve(66,a,59,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f5(z,y),z) | f6(z,y) < y.  [resolve(66,a,60,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f5(z,y),z) | Cont(f6(z,y),y).  [resolve(66,a,61,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f5(z,y),z) | P(f6(z,y),z).  [resolve(66,a,62,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f5(z,y),y) | f6(z,y) < y.  [resolve(66,a,63,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f5(z,y),y) | Cont(f6(z,y),y).  [resolve(66,a,64,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f5(z,y),y) | P(f6(z,y),z).  [resolve(66,a,65,a)].

Eliminating SC/2
67 SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f8(x,y),x).  [clausify(31)].
68 -SC(x,y) | Cont(f7(x,y),x).  [clausify(31)].
69 -SC(x,y) | Cont(f7(x,y),y).  [clausify(31)].
70 -SC(x,y) | -Cont(z,x) | -Cont(z,y) | z < x.  [clausify(31)].
71 -SC(x,y) | -Cont(z,x) | -Cont(z,y) | z < y.  [clausify(31)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),y) | Cont(f7(y,z),y).  [resolve(67,a,68,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),y) | Cont(f7(y,z),z).  [resolve(67,a,69,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),y) | -Cont(u,y) | -Cont(u,z) | u < y.  [resolve(67,a,70,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),y) | -Cont(u,y) | -Cont(u,z) | u < z.  [resolve(67,a,71,a)].
72 SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f8(x,y),y).  [clausify(31)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),z) | Cont(f7(y,z),y).  [resolve(72,a,68,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),z) | Cont(f7(y,z),z).  [resolve(72,a,69,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),z) | -Cont(u,y) | -Cont(u,z) | u < y.  [resolve(72,a,70,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),z) | -Cont(u,y) | -Cont(u,z) | u < z.  [resolve(72,a,71,a)].
73 SC(x,y) | -Cont(z,x) | -Cont(z,y) | -(f8(x,y) < x) | -(f8(x,y) < y).  [clausify(31)].
Derived: -Cont(x,y) | -Cont(x,z) | -(f8(y,z) < y) | -(f8(y,z) < z) | Cont(f7(y,z),y).  [resolve(73,a,68,a)].
Derived: -Cont(x,y) | -Cont(x,z) | -(f8(y,z) < y) | -(f8(y,z) < z) | Cont(f7(y,z),z).  [resolve(73,a,69,a)].
Derived: -Cont(x,y) | -Cont(x,z) | -(f8(y,z) < y) | -(f8(y,z) < z) | -Cont(u,y) | -Cont(u,z) | u < y.  [resolve(73,a,70,a)].
Derived: -Cont(x,y) | -Cont(x,z) | -(f8(y,z) < y) | -(f8(y,z) < z) | -Cont(u,y) | -Cont(u,z) | u < z.  [resolve(73,a,71,a)].

Eliminating Max/1
74 Max(x) | ZEX(x) | PP(x,f9(x)).  [clausify(32)].
75 -Max(x) | -ZEX(x).  [clausify(32)].
76 -Max(x) | -PP(x,y).  [clausify(32)].
Derived: ZEX(x) | PP(x,f9(x)) | -PP(x,y).  [resolve(74,a,76,a)].

Eliminating Min/1
77 Min(x) | ZEX(x) | PP(f10(x),x).  [clausify(33)].
78 -Min(x) | -ZEX(x).  [clausify(33)].
79 -Min(x) | -PP(y,x).  [clausify(33)].
Derived: ZEX(x) | PP(f10(x),x) | -PP(y,x).  [resolve(77,a,79,a)].

============================== end predicate elimination =============

Term ordering decisions:
Function symbol KB weights:  c1=1. c2=1. c3=1. c4=1. c5=1. difference=1. intersection=1. f3=1. f4=1. f5=1. f6=1. f7=1. f8=1. f11=1. f12=1. f13=1. f1=1. f2=1. f9=1. f10=1.
Predicate symbol precedence:  predicate_order([ =, EqDim, ZEX, C, P, PP, <=, <, Cont ]).
Function symbol precedence:  function_order([ c1, c2, c3, c4, c5, difference, intersection, f3, f4, f5, f6, f7, f8, f11, f12, f13, f1, f2, f9, f10 ]).
Skipping inverse_order, because term ordering is KBO.
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

============================== PROOF =================================

% Proof 1 at 0.06 (+ 0.00) seconds.
% Length of proof is 66.
% Level of proof is 14.
% Maximum clause weight is 11.000.
% Given clauses 216.

1 (all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
2 (all x all y (y < x -> x = difference(x,y))) # label(non_clause).  [assumption].
4 (all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
6 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
7 (all x all y (-ZEX(difference(x,y)) -> P(difference(x,y),x))) # label(non_clause).  [assumption].
15 (exists x ZEX(x)) # label(non_clause).  [assumption].
17 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
18 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
20 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
22 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
23 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
27 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
39 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
40 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
41 (all x all y all z (P(z,difference(x,y)) -> P(z,x))) # label(non_clause) # label(goal).  [goal].
80 ZEX(difference(x,y)) | EqDim(x,difference(x,y)).  [clausify(1)].
81 -(x < y) | difference(y,x) = y.  [clausify(2)].
83 -(x <= y) | -Cont(z,difference(x,y)) | Cont(z,x).  [clausify(4)].
86 ZEX(difference(x,y)) | -ZEX(x).  [clausify(6)].
88 ZEX(difference(x,y)) | P(difference(x,y),x).  [clausify(7)].
99 ZEX(c1).  [clausify(15)].
101 -(x < y) | -(y < x).  [clausify(17)].
102 -(x < y) | -(y <= z) | x < z.  [clausify(18)].
104 -ZEX(x) | ZEX(y) | x < y.  [clausify(20)].
105 -EqDim(x,y) | -(x < y).  [clausify(22)].
107 EqDim(x,y) | x < y | y < x.  [clausify(22)].
109 x <= y | -(x < y).  [clausify(23)].
110 x <= y | -EqDim(x,y).  [clausify(23)].
111 -P(x,y) | Cont(x,y).  [clausify(27)].
112 -P(x,y) | EqDim(x,y).  [clausify(27)].
113 P(x,y) | -Cont(x,y) | -EqDim(x,y).  [clausify(27)].
127 -Cont(x,y) | -Cont(y,z) | Cont(x,z).  [clausify(39)].
128 -ZEX(x) | -Cont(y,x).  [clausify(40)].
130 P(c5,difference(c3,c4)).  [deny(41)].
131 -P(c5,c3).  [deny(41)].
206 ZEX(x) | c1 < x.  [resolve(104,a,99,a)].
286 EqDim(c5,difference(c3,c4)).  [resolve(130,a,112,a)].
287 Cont(c5,difference(c3,c4)).  [resolve(130,a,111,a)].
602 ZEX(x) | -EqDim(c1,x).  [resolve(206,b,105,b)].
604 ZEX(x) | -(x < c1).  [resolve(206,b,101,b)].
612 c5 <= difference(c3,c4).  [resolve(286,a,110,b)].
614 -(c5 < difference(c3,c4)).  [ur(105,a,286,a)].
639 -ZEX(difference(c3,c4)).  [resolve(287,a,128,b)].
650 -(c3 <= c4) | Cont(c5,c3).  [resolve(287,a,83,b)].
660 EqDim(c3,difference(c3,c4)).  [resolve(639,a,80,a)].
663 -ZEX(c3).  [ur(86,a,639,a)].
672 -EqDim(c1,c3).  [ur(602,a,663,a)].
686 -(c3 < c1).  [ur(604,a,663,a)].
698 c3 <= difference(c3,c4).  [resolve(660,a,110,b)].
700 -(c3 < difference(c3,c4)).  [ur(105,a,660,a)].
710 c1 < c3.  [resolve(686,a,107,c),unit_del(a,672)].
724 difference(c3,c1) = c3.  [resolve(710,a,81,a)].
746 P(c3,c3).  [para(724(a,1),88(b,1)),rewrite([724(3)]),unit_del(a,663)].
752 Cont(c3,c3).  [resolve(746,a,111,a)].
759 -(c5 < c3).  [ur(102,b,698,a,c,614,a)].
861 EqDim(c5,c3) | c3 < c5.  [resolve(759,a,107,b)].
982 -(c3 < c5).  [ur(102,b,612,a,c,700,a)].
983 EqDim(c5,c3).  [back_unit_del(861),unit_del(b,982)].
1008 -Cont(c5,c3).  [ur(113,a,131,a,c,983,a)].
1009 -(c3 <= c4).  [back_unit_del(650),unit_del(b,1008)].
1019 -Cont(difference(c3,c4),c3).  [ur(127,a,287,a,c,1008,a)].
1025 -EqDim(c3,c4).  [ur(110,a,1009,a)].
1026 -(c3 < c4).  [ur(109,a,1009,a)].
1028 c4 < c3.  [resolve(1026,a,107,b),unit_del(a,1025)].
1045 difference(c3,c4) = c3.  [resolve(1028,a,81,a)].
1046 $F.  [back_rewrite(1019),rewrite([1045(3)]),unit_del(a,752)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=216. Generated=1789. Kept=966. proofs=1.
Usable=208. Sos=675. Demods=10. Limbo=1, Disabled=213. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=822. Back_subsumed=47.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=10 (0 lex), Back_demodulated=32. Back_unit_deleted=3.
Demod_attempts=8174. Demod_rewrites=188.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=4757. Nonunit_bsub_feature_tests=3832.
Megabytes=1.91.
User_CPU=0.06, System_CPU=0.00, Wall_clock=1.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 23190 exit (max_proofs) Thu Nov 24 19:59:45 2011
