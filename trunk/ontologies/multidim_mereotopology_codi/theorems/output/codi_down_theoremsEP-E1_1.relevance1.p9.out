============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 22599 was started by torsten on stl-ws2,
Thu Nov 24 19:40:22 2011
The command was "prover9 -t 600 -f codi/conversions/codi_down.p9 codi/theorems/input/codi_down_theoremsT1-T2.p9 codi/theorems/input/codi_down_theoremsT3-T5.p9 codi/conversions/codi_int.p9 codi/conversions/codi_linear.p9 zex/input/zex.p9 dim/conversions/dim_prime_linear.p9 cont/conversions/cont_c_ext.p9 codi/definitions/input/ep.p9 codi/definitions/input/epp.p9 codi/definitions/input/po.p9 codi/definitions/input/inc.p9 codi/definitions/input/sc.p9 codi/definitions/input/min_max_in_dim.p9 cont/conversions/cont_c.p9 cont/conversions/cont_ext.p9 cont/conversions/cont_basic.p9 codi/theorems/input/options.txt codi/theorems/generated/codi_down_theoremsEP-E1_relevance1.order codi/theorems/input/codi_down_theoremsEP-E1_1.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file codi/conversions/codi_down.p9


formulas(sos).
(all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))).
(all x all y (y < x -> x = difference(x,y))).
(all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))).
(all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))).
(all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)).
(all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))).
end_of_list.

% Reading from file codi/theorems/input/codi_down_theoremsT1-T2.p9


formulas(sos).
(all x all y (-ZEX(difference(x,y)) -> P(difference(x,y),x))).
(all x all y (PP(y,x) & -ZEX(difference(x,y)) & P(difference(x,y),x) -> PP(difference(x,y),x))).
(all x all y (PP(y,x) -> PP(difference(x,y),x))).
end_of_list.

% Reading from file codi/theorems/input/codi_down_theoremsT3-T5.p9


formulas(sos).
(all x all y (-ZEX(y) & -ZEX(difference(x,y)) -> -PO(y,difference(x,y)))).
(all x all y -PO(intersection(x,y),difference(x,y))).
(all x all y all z (P(z,difference(x,y)) -> P(z,x))).
(all x all y all z (P(z,difference(x,y)) -> -PO(z,intersection(x,y)))).
(all x all y all z (P(z,x) & -PO(z,intersection(x,y)) -> P(z,difference(x,y)))).
end_of_list.

% Reading from file codi/conversions/codi_int.p9


formulas(sos).
(all x all y (-C(x,y) -> ZEX(intersection(x,y)))).
(all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))).
(all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))).
(all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))).
end_of_list.

% Reading from file codi/conversions/codi_linear.p9


formulas(sos).
(all x all y (Cont(x,y) -> x <= y)).
end_of_list.

% Reading from file zex/input/zex.p9


formulas(sos).
(exists x ZEX(x)).
end_of_list.

% Reading from file dim/conversions/dim_prime_linear.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y <= z -> x < z)).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
(exists x MinDim(x)).
(all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x (MaxDim(x) <-> (all y y <= x))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))).
end_of_list.

% Reading from file cont/conversions/cont_c_ext.p9


formulas(sos).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file codi/definitions/input/epp.p9


formulas(sos).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
end_of_list.

% Reading from file codi/definitions/input/po.p9


formulas(sos).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
end_of_list.

% Reading from file codi/definitions/input/inc.p9


formulas(sos).
(all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))).
end_of_list.

% Reading from file codi/definitions/input/sc.p9


formulas(sos).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))).
end_of_list.

% Reading from file codi/definitions/input/min_max_in_dim.p9


formulas(sos).
(all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))).
(all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))).
end_of_list.

% Reading from file cont/conversions/cont_c.p9


formulas(sos).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
(all x all y (-ZEX(x) & (all z (C(z,x) -> C(z,y))) & (exists z (C(z,y) & -C(z,x))) -> Cont(x,y))).
end_of_list.

% Reading from file cont/conversions/cont_ext.p9


formulas(sos).
(all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
end_of_list.

% Reading from file codi/theorems/input/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file codi/theorems/generated/codi_down_theoremsEP-E1_relevance1.order

predicate_order([=,PO,EqDim,PO,C,PP,<=,P,ZEX,<,Cont]).
set(inverse_order).
assign(order,kbo).

% Reading from file codi/theorems/input/codi_down_theoremsEP-E1_1.p9


formulas(goals).
(all x all y (PP(x,y) -> (exists z (P(z,y) & -PO(z,x))))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
2 (all x all y (y < x -> x = difference(x,y))) # label(non_clause).  [assumption].
3 (all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))) # label(non_clause).  [assumption].
4 (all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
5 (all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)) # label(non_clause).  [assumption].
6 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
7 (all x all y (-ZEX(difference(x,y)) -> P(difference(x,y),x))) # label(non_clause).  [assumption].
8 (all x all y (PP(y,x) & -ZEX(difference(x,y)) & P(difference(x,y),x) -> PP(difference(x,y),x))) # label(non_clause).  [assumption].
9 (all x all y (PP(y,x) -> PP(difference(x,y),x))) # label(non_clause).  [assumption].
10 (all x all y (-ZEX(y) & -ZEX(difference(x,y)) -> -PO(y,difference(x,y)))) # label(non_clause).  [assumption].
11 (all x all y -PO(intersection(x,y),difference(x,y))) # label(non_clause).  [assumption].
12 (all x all y all z (P(z,difference(x,y)) -> P(z,x))) # label(non_clause).  [assumption].
13 (all x all y all z (P(z,difference(x,y)) -> -PO(z,intersection(x,y)))) # label(non_clause).  [assumption].
14 (all x all y all z (P(z,x) & -PO(z,intersection(x,y)) -> P(z,difference(x,y)))) # label(non_clause).  [assumption].
15 (all x all y (-C(x,y) -> ZEX(intersection(x,y)))) # label(non_clause).  [assumption].
16 (all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
17 (all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))) # label(non_clause).  [assumption].
18 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
19 (all x all y (Cont(x,y) -> x <= y)) # label(non_clause).  [assumption].
20 (exists x ZEX(x)) # label(non_clause).  [assumption].
21 (all x -(x < x)) # label(non_clause).  [assumption].
22 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
23 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
24 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
25 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
26 (exists x MinDim(x)) # label(non_clause).  [assumption].
27 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
28 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
29 (all x (MaxDim(x) <-> (all y y <= x))) # label(non_clause).  [assumption].
30 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
31 (all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))) # label(non_clause).  [assumption].
32 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
33 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
34 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
35 (all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))) # label(non_clause).  [assumption].
36 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))) # label(non_clause).  [assumption].
37 (all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))) # label(non_clause).  [assumption].
38 (all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))) # label(non_clause).  [assumption].
39 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
41 (all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)) # label(non_clause).  [assumption].
42 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
43 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
44 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
45 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
46 (all x all y (PP(x,y) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating MinDim/1
47 -MinDim(x) | -ZEX(x).  [clausify(30)].
48 MinDim(c2).  [clausify(26)].
Derived: -ZEX(c2).  [resolve(47,a,48,a)].
49 -MinDim(x) | -(y < x) | ZEX(y).  [clausify(30)].
Derived: -(x < c2) | ZEX(x).  [resolve(49,a,48,a)].
50 MinDim(x) | ZEX(x) | f2(x) < x.  [clausify(30)].
Derived: ZEX(x) | f2(x) < x | -(y < x) | ZEX(y).  [resolve(50,a,49,a)].
51 MinDim(x) | ZEX(x) | -ZEX(f2(x)).  [clausify(30)].
Derived: ZEX(x) | -ZEX(f2(x)) | -(y < x) | ZEX(y).  [resolve(51,a,49,a)].

Eliminating MaxDim/1
52 MaxDim(x) | -(f1(x) <= x).  [clausify(29)].
53 -MaxDim(x) | y <= x.  [clausify(29)].
Derived: -(f1(x) <= x) | y <= x.  [resolve(52,a,53,a)].

Eliminating Covers/2
54 Covers(x,y) | -(y < x) | y < f3(x,y).  [clausify(31)].
55 -Covers(x,y) | y < x.  [clausify(31)].
56 -Covers(x,y) | -(y < z) | -(z < x).  [clausify(31)].
Derived: -(x < y) | x < f3(y,x) | -(x < z) | -(z < y).  [resolve(54,a,56,a)].
57 Covers(x,y) | -(y < x) | f3(x,y) < x.  [clausify(31)].
Derived: -(x < y) | f3(y,x) < y | -(x < z) | -(z < y).  [resolve(57,a,56,a)].

Eliminating Inc/2
58 Inc(x,y) | -(z < x) | -Cont(z,x) | -P(z,y).  [clausify(35)].
59 -Inc(x,y) | f5(x,y) < x | f6(x,y) < y.  [clausify(35)].
60 -Inc(x,y) | f5(x,y) < x | Cont(f6(x,y),y).  [clausify(35)].
61 -Inc(x,y) | f5(x,y) < x | P(f6(x,y),x).  [clausify(35)].
62 -Inc(x,y) | Cont(f5(x,y),x) | f6(x,y) < y.  [clausify(35)].
63 -Inc(x,y) | Cont(f5(x,y),x) | Cont(f6(x,y),y).  [clausify(35)].
64 -Inc(x,y) | Cont(f5(x,y),x) | P(f6(x,y),x).  [clausify(35)].
65 -Inc(x,y) | P(f5(x,y),y) | f6(x,y) < y.  [clausify(35)].
66 -Inc(x,y) | P(f5(x,y),y) | Cont(f6(x,y),y).  [clausify(35)].
67 -Inc(x,y) | P(f5(x,y),y) | P(f6(x,y),x).  [clausify(35)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f5(y,z) < y | f6(y,z) < z.  [resolve(58,a,59,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f5(y,z) < y | Cont(f6(y,z),z).  [resolve(58,a,60,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f5(y,z) < y | P(f6(y,z),y).  [resolve(58,a,61,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f5(y,z),y) | f6(y,z) < z.  [resolve(58,a,62,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f5(y,z),y) | Cont(f6(y,z),z).  [resolve(58,a,63,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f5(y,z),y) | P(f6(y,z),y).  [resolve(58,a,64,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f5(y,z),z) | f6(y,z) < z.  [resolve(58,a,65,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f5(y,z),z) | Cont(f6(y,z),z).  [resolve(58,a,66,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f5(y,z),z) | P(f6(y,z),y).  [resolve(58,a,67,a)].
68 Inc(x,y) | -(z < y) | -Cont(z,y) | -P(z,x).  [clausify(35)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f5(z,y) < z | f6(z,y) < y.  [resolve(68,a,59,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f5(z,y) < z | Cont(f6(z,y),y).  [resolve(68,a,60,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f5(z,y) < z | P(f6(z,y),z).  [resolve(68,a,61,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f5(z,y),z) | f6(z,y) < y.  [resolve(68,a,62,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f5(z,y),z) | Cont(f6(z,y),y).  [resolve(68,a,63,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f5(z,y),z) | P(f6(z,y),z).  [resolve(68,a,64,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f5(z,y),y) | f6(z,y) < y.  [resolve(68,a,65,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f5(z,y),y) | Cont(f6(z,y),y).  [resolve(68,a,66,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f5(z,y),y) | P(f6(z,y),z).  [resolve(68,a,67,a)].

Eliminating SC/2
69 SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f8(x,y),x).  [clausify(36)].
70 -SC(x,y) | Cont(f7(x,y),x).  [clausify(36)].
71 -SC(x,y) | Cont(f7(x,y),y).  [clausify(36)].
72 -SC(x,y) | -Cont(z,x) | -Cont(z,y) | z < x.  [clausify(36)].
73 -SC(x,y) | -Cont(z,x) | -Cont(z,y) | z < y.  [clausify(36)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),y) | Cont(f7(y,z),y).  [resolve(69,a,70,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),y) | Cont(f7(y,z),z).  [resolve(69,a,71,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),y) | -Cont(u,y) | -Cont(u,z) | u < y.  [resolve(69,a,72,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),y) | -Cont(u,y) | -Cont(u,z) | u < z.  [resolve(69,a,73,a)].
74 SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f8(x,y),y).  [clausify(36)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),z) | Cont(f7(y,z),y).  [resolve(74,a,70,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),z) | Cont(f7(y,z),z).  [resolve(74,a,71,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),z) | -Cont(u,y) | -Cont(u,z) | u < y.  [resolve(74,a,72,a)].
Derived: -Cont(x,y) | -Cont(x,z) | Cont(f8(y,z),z) | -Cont(u,y) | -Cont(u,z) | u < z.  [resolve(74,a,73,a)].
75 SC(x,y) | -Cont(z,x) | -Cont(z,y) | -(f8(x,y) < x) | -(f8(x,y) < y).  [clausify(36)].
Derived: -Cont(x,y) | -Cont(x,z) | -(f8(y,z) < y) | -(f8(y,z) < z) | Cont(f7(y,z),y).  [resolve(75,a,70,a)].
Derived: -Cont(x,y) | -Cont(x,z) | -(f8(y,z) < y) | -(f8(y,z) < z) | Cont(f7(y,z),z).  [resolve(75,a,71,a)].
Derived: -Cont(x,y) | -Cont(x,z) | -(f8(y,z) < y) | -(f8(y,z) < z) | -Cont(u,y) | -Cont(u,z) | u < y.  [resolve(75,a,72,a)].
Derived: -Cont(x,y) | -Cont(x,z) | -(f8(y,z) < y) | -(f8(y,z) < z) | -Cont(u,y) | -Cont(u,z) | u < z.  [resolve(75,a,73,a)].

Eliminating Max/1
76 Max(x) | ZEX(x) | PP(x,f9(x)).  [clausify(37)].
77 -Max(x) | -ZEX(x).  [clausify(37)].
78 -Max(x) | -PP(x,y).  [clausify(37)].
Derived: ZEX(x) | PP(x,f9(x)) | -PP(x,y).  [resolve(76,a,78,a)].

Eliminating Min/1
79 Min(x) | ZEX(x) | PP(f10(x),x).  [clausify(38)].
80 -Min(x) | -ZEX(x).  [clausify(38)].
81 -Min(x) | -PP(y,x).  [clausify(38)].
Derived: ZEX(x) | PP(f10(x),x) | -PP(y,x).  [resolve(79,a,81,a)].

============================== end predicate elimination =============

Term ordering decisions:
Function symbol KB weights:  c1=1. c2=1. c3=1. c4=1. difference=1. intersection=1. f3=1. f4=1. f5=1. f6=1. f7=1. f8=1. f11=1. f12=1. f13=1. f1=1. f2=1. f9=1. f10=1.
Predicate symbol precedence:  predicate_order([ =, PO, EqDim, C, PP, <=, P, ZEX, <, Cont ]).
Function symbol precedence:  function_order([ c1, c2, c3, c4, difference, intersection, f3, f4, f5, f6, f7, f8, f11, f12, f13, f1, f2, f9, f10 ]).
Skipping inverse_order, because term ordering is KBO.
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.02 seconds.

Low Water (keep): wt=42.000, iters=6770

Low Water (keep): wt=37.000, iters=6709

Low Water (keep): wt=34.000, iters=6734

Low Water (keep): wt=33.000, iters=6709

Low Water (keep): wt=31.000, iters=6716

Low Water (keep): wt=29.000, iters=6684

Low Water (keep): wt=27.000, iters=6764

Low Water (keep): wt=26.000, iters=6705

Low Water (keep): wt=24.000, iters=6666

Low Water (keep): wt=23.000, iters=6719

Low Water (keep): wt=22.000, iters=6681

Low Water (keep): wt=21.000, iters=6696

Low Water (keep): wt=20.000, iters=6747

Low Water (keep): wt=19.000, iters=6683

Low Water (keep): wt=18.000, iters=6671

Low Water (keep): wt=17.000, iters=6694

============================== PROOF =================================

% Proof 1 at 1.99 (+ 0.01) seconds.
% Length of proof is 37.
% Level of proof is 8.
% Maximum clause weight is 11.000.
% Given clauses 2247.

6 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
7 (all x all y (-ZEX(difference(x,y)) -> P(difference(x,y),x))) # label(non_clause).  [assumption].
10 (all x all y (-ZEX(y) & -ZEX(difference(x,y)) -> -PO(y,difference(x,y)))) # label(non_clause).  [assumption].
32 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
33 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
34 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
43 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
45 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
46 (all x all y (PP(x,y) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause) # label(goal).  [goal].
87 -ZEX(difference(x,y)) | ZEX(x) | Cont(x,y).  [clausify(6)].
90 ZEX(difference(x,y)) | P(difference(x,y),x).  [clausify(7)].
93 ZEX(x) | ZEX(difference(y,x)) | -PO(x,difference(y,x)).  [clausify(10)].
118 -P(x,y) | Cont(x,y).  [clausify(32)].
121 -PP(x,y) | P(x,y).  [clausify(33)].
122 -PP(x,y) | y != x.  [clausify(33)].
124 -PO(x,y) | P(f4(x,y),x).  [clausify(34)].
125 -PO(x,y) | P(f4(x,y),y).  [clausify(34)].
126 PO(x,y) | -P(z,x) | -P(z,y).  [clausify(34)].
136 -Cont(x,y) | -Cont(y,x) | y = x.  [clausify(43)].
138 -ZEX(x) | -Cont(y,x).  [clausify(45)].
139 -ZEX(x) | -Cont(x,y).  [clausify(45)].
140 PP(c3,c4).  [deny(46)].
141 -P(x,c4) | PO(x,c3).  [deny(46)].
202 P(difference(x,y),x) | ZEX(x) | Cont(x,y).  [resolve(90,a,87,a)].
288 c4 != c3.  [resolve(140,a,122,a)].
289 P(c3,c4).  [resolve(140,a,121,a)].
570 Cont(c3,c4).  [resolve(289,a,118,a)].
600 -ZEX(c3).  [resolve(570,a,139,b)].
601 -ZEX(c4).  [resolve(570,a,138,b)].
604 -Cont(c4,c3).  [resolve(570,a,136,b),flip(b),unit_del(b,288)].
726 P(difference(c4,c3),c4).  [resolve(604,a,202,c),unit_del(b,601)].
731 -ZEX(difference(c4,c3)).  [ur(87,b,601,a,c,604,a)].
876 -PO(c3,difference(c4,c3)).  [ur(93,a,600,a,b,731,a)].
1246 PO(difference(c4,c3),c3).  [resolve(726,a,141,a)].
2004 P(f4(difference(c4,c3),c3),c3).  [resolve(1246,a,125,a)].
2005 P(f4(difference(c4,c3),c3),difference(c4,c3)).  [resolve(1246,a,124,a)].
16082 $F.  [ur(126,a,876,a,b,2004,a),unit_del(a,2005)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=2247. Generated=37154. Kept=16000. proofs=1.
Usable=2072. Sos=11573. Demods=118. Limbo=7, Disabled=2482. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=17231. Back_subsumed=850.
Sos_limit_deleted=3922. Sos_displaced=0. Sos_removed=0.
New_demodulators=123 (0 lex), Back_demodulated=1219. Back_unit_deleted=279.
Demod_attempts=393379. Demod_rewrites=5464.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=103082. Nonunit_bsub_feature_tests=72284.
Megabytes=22.25.
User_CPU=1.99, System_CPU=0.01, Wall_clock=2.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 22599 exit (max_proofs) Thu Nov 24 19:40:24 2011
