============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 2193 was started by torsten on scotus.mie.utoronto.ca,
Thu Mar 15 10:25:50 2012
The command was "prover9 -t 6000 -f codi/definitions/input/icon.p9 codi/conversions/codi_down.p9 codi/definitions/input/con.p9 codi/conversions/codi_int.p9 codi/conversions/codi_down.p9 codi/definitions/input/epp.p9 codi/conversions/codi_linear.p9 zex/input/zex.p9 codi/conversions/codi_int.p9 codi/definitions/input/ep.p9 dim/conversions/dim_prime_linear.p9 cont/conversions/cont_c_ext.p9 codi/definitions/input/epp.p9 codi/definitions/input/po.p9 codi/definitions/input/inc.p9 codi/definitions/input/sc.p9 codi/definitions/input/min_max_in_dim.p9 codi/conversions/codi_linear.p9 zex/input/zex.p9 cont/conversions/cont_c.p9 cont/conversions/cont_ext.p9 codi/definitions/input/ep.p9 codi/definitions/input/epp.p9 dim/conversions/dim_prime_linear.p9 cont/conversions/cont_c_ext.p9 codi/definitions/input/po.p9 codi/definitions/input/inc.p9 codi/definitions/input/sc.p9 codi/definitions/input/min_max_in_dim.p9 cont/conversions/cont_basic.p9 codi/definitions/input/ep.p9 cont/conversions/cont_c.p9 cont/conversions/cont_ext.p9 codi/definitions/input/epp.p9 cont/conversions/cont_basic.p9 codi/definitions/input/ep.p9 codi/theorems/input/options.txt codi/theorems/input/icon_theorems_4.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file codi/definitions/input/icon.p9


formulas(sos).
(all x (ICon(x) <-> Con(x) & (all y (PP(y,x) -> Covers(x,intersection(y,difference(x,y))))))).
(all x (UCon(x) <-> Con(x) & (all y all z (PP(y,x) & Cont(z,y) & Cont(z,difference(x,y)) -> Cont(z,intersection(y,difference(x,y))))))).
end_of_list.

% Reading from file codi/conversions/codi_down.p9


formulas(sos).
(all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))).
(all x all y (y < x -> x = difference(x,y))).
(all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))).
(all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))).
(all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)).
(all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))).
end_of_list.

% Reading from file codi/definitions/input/con.p9


formulas(sos).
(all x (Con(x) <-> (all y (PP(y,x) -> SC(y,difference(x,y)))))).
end_of_list.

% Reading from file codi/conversions/codi_int.p9


formulas(sos).
(all x all y (-C(x,y) -> ZEX(intersection(x,y)))).
(all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))).
(all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))).
(all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))).
end_of_list.

% Reading from file codi/conversions/codi_down.p9


formulas(sos).
(all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))).
(all x all y (y < x -> x = difference(x,y))).
(all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))).
(all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))).
(all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)).
(all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))).
end_of_list.

% Reading from file codi/definitions/input/epp.p9


formulas(sos).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
end_of_list.

% Reading from file codi/conversions/codi_linear.p9


formulas(sos).
(all x all y (Cont(x,y) -> x <= y)).
end_of_list.

% Reading from file zex/input/zex.p9


formulas(sos).
(exists x ZEX(x)).
end_of_list.

% Reading from file codi/conversions/codi_int.p9


formulas(sos).
(all x all y (-C(x,y) -> ZEX(intersection(x,y)))).
(all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))).
(all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))).
(all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file dim/conversions/dim_prime_linear.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y <= z -> x < z)).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
(exists x MinDim(x)).
(all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x (MaxDim(x) <-> (all y y <= x))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))).
end_of_list.

% Reading from file cont/conversions/cont_c_ext.p9


formulas(sos).
end_of_list.

% Reading from file codi/definitions/input/epp.p9


formulas(sos).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
end_of_list.

% Reading from file codi/definitions/input/po.p9


formulas(sos).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
end_of_list.

% Reading from file codi/definitions/input/inc.p9


formulas(sos).
(all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))).
end_of_list.

% Reading from file codi/definitions/input/sc.p9


formulas(sos).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))).
end_of_list.

% Reading from file codi/definitions/input/min_max_in_dim.p9


formulas(sos).
(all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))).
(all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))).
end_of_list.

% Reading from file codi/conversions/codi_linear.p9


formulas(sos).
(all x all y (Cont(x,y) -> x <= y)).
end_of_list.

% Reading from file zex/input/zex.p9


formulas(sos).
(exists x ZEX(x)).
end_of_list.

% Reading from file cont/conversions/cont_c.p9


formulas(sos).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
(all x all y (-ZEX(x) & (all z (C(z,x) -> C(z,y))) & (exists z (C(z,y) & -C(z,x))) -> Cont(x,y))).
end_of_list.

% Reading from file cont/conversions/cont_ext.p9


formulas(sos).
(all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file codi/definitions/input/epp.p9


formulas(sos).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
end_of_list.

% Reading from file dim/conversions/dim_prime_linear.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y <= z -> x < z)).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
(exists x MinDim(x)).
(all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x (MaxDim(x) <-> (all y y <= x))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))).
end_of_list.

% Reading from file cont/conversions/cont_c_ext.p9


formulas(sos).
end_of_list.

% Reading from file codi/definitions/input/po.p9


formulas(sos).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
end_of_list.

% Reading from file codi/definitions/input/inc.p9


formulas(sos).
(all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))).
end_of_list.

% Reading from file codi/definitions/input/sc.p9


formulas(sos).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))).
end_of_list.

% Reading from file codi/definitions/input/min_max_in_dim.p9


formulas(sos).
(all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))).
(all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file cont/conversions/cont_c.p9


formulas(sos).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
(all x all y (-ZEX(x) & (all z (C(z,x) -> C(z,y))) & (exists z (C(z,y) & -C(z,x))) -> Cont(x,y))).
end_of_list.

% Reading from file cont/conversions/cont_ext.p9


formulas(sos).
(all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)).
end_of_list.

% Reading from file codi/definitions/input/epp.p9


formulas(sos).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file codi/theorems/input/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file codi/theorems/input/icon_theorems_4.p9


formulas(goals).
(all x (ZEX(x) -> UCon(x))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 6000).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x (ICon(x) <-> Con(x) & (all y (PP(y,x) -> Covers(x,intersection(y,difference(x,y))))))) # label(non_clause).  [assumption].
2 (all x (UCon(x) <-> Con(x) & (all y all z (PP(y,x) & Cont(z,y) & Cont(z,difference(x,y)) -> Cont(z,intersection(y,difference(x,y))))))) # label(non_clause).  [assumption].
3 (all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
4 (all x all y (y < x -> x = difference(x,y))) # label(non_clause).  [assumption].
5 (all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))) # label(non_clause).  [assumption].
6 (all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
7 (all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)) # label(non_clause).  [assumption].
8 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
9 (all x (Con(x) <-> (all y (PP(y,x) -> SC(y,difference(x,y)))))) # label(non_clause).  [assumption].
10 (all x all y (-C(x,y) -> ZEX(intersection(x,y)))) # label(non_clause).  [assumption].
11 (all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
12 (all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))) # label(non_clause).  [assumption].
13 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
14 (all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
15 (all x all y (y < x -> x = difference(x,y))) # label(non_clause).  [assumption].
16 (all x all y all z (x <= y & Cont(z,x) & intersection(z,y) < z -> Cont(z,difference(x,y)))) # label(non_clause).  [assumption].
17 (all x all y all z (x <= y & Cont(z,difference(x,y)) -> Cont(z,x))) # label(non_clause).  [assumption].
18 (all x all y all z (x <= y & P(z,difference(x,y)) -> intersection(z,y) < z)) # label(non_clause).  [assumption].
19 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
20 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
21 (all x all y (Cont(x,y) -> x <= y)) # label(non_clause).  [assumption].
22 (exists x ZEX(x)) # label(non_clause).  [assumption].
23 (all x all y (-C(x,y) -> ZEX(intersection(x,y)))) # label(non_clause).  [assumption].
24 (all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
25 (all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))) # label(non_clause).  [assumption].
26 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
27 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
28 (all x -(x < x)) # label(non_clause).  [assumption].
29 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
30 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
31 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
32 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
33 (exists x MinDim(x)) # label(non_clause).  [assumption].
34 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
35 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
36 (all x (MaxDim(x) <-> (all y y <= x))) # label(non_clause).  [assumption].
37 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
38 (all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))) # label(non_clause).  [assumption].
39 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
40 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
41 (all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))) # label(non_clause).  [assumption].
42 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))) # label(non_clause).  [assumption].
43 (all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))) # label(non_clause).  [assumption].
44 (all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))) # label(non_clause).  [assumption].
45 (all x all y (Cont(x,y) -> x <= y)) # label(non_clause).  [assumption].
46 (exists x ZEX(x)) # label(non_clause).  [assumption].
47 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
49 (all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)) # label(non_clause).  [assumption].
50 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
51 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
52 (all x -(x < x)) # label(non_clause).  [assumption].
53 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
54 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
55 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
56 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
57 (exists x MinDim(x)) # label(non_clause).  [assumption].
58 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
59 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
60 (all x (MaxDim(x) <-> (all y y <= x))) # label(non_clause).  [assumption].
61 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
62 (all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))) # label(non_clause).  [assumption].
63 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
64 (all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))) # label(non_clause).  [assumption].
65 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))) # label(non_clause).  [assumption].
66 (all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))) # label(non_clause).  [assumption].
67 (all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))) # label(non_clause).  [assumption].
68 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
69 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
70 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
71 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
72 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
73 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
75 (all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)) # label(non_clause).  [assumption].
76 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
77 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
78 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
79 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
80 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
81 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
82 (all x (ZEX(x) -> UCon(x))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating ICon/1
83 ICon(x) | -Con(x) | PP(f1(x),x).  [clausify(1)].
84 -ICon(x) | Con(x).  [clausify(1)].
85 -ICon(x) | -PP(y,x) | Covers(x,intersection(y,difference(x,y))).  [clausify(1)].
Derived: -Con(x) | PP(f1(x),x) | -PP(y,x) | Covers(x,intersection(y,difference(x,y))).  [resolve(83,a,85,a)].
86 ICon(x) | -Con(x) | -Covers(x,intersection(f1(x),difference(x,f1(x)))).  [clausify(1)].
Derived: -Con(x) | -Covers(x,intersection(f1(x),difference(x,f1(x)))) | -PP(y,x) | Covers(x,intersection(y,difference(x,y))).  [resolve(86,a,85,a)].

Eliminating Con/1
87 UCon(x) | -Con(x) | PP(f2(x),x).  [clausify(2)].
88 -UCon(x) | Con(x).  [clausify(2)].
89 UCon(x) | -Con(x) | Cont(f3(x),f2(x)).  [clausify(2)].
90 UCon(x) | -Con(x) | Cont(f3(x),difference(x,f2(x))).  [clausify(2)].
91 UCon(x) | -Con(x) | -Cont(f3(x),intersection(f2(x),difference(x,f2(x)))).  [clausify(2)].
92 -Con(x) | -PP(y,x) | SC(y,difference(x,y)).  [clausify(9)].
Derived: -PP(x,y) | SC(x,difference(y,x)) | -UCon(y).  [resolve(92,a,88,b)].
93 Con(x) | PP(f4(x),x).  [clausify(9)].
Derived: PP(f4(x),x) | UCon(x) | PP(f2(x),x).  [resolve(93,a,87,b)].
Derived: PP(f4(x),x) | UCon(x) | Cont(f3(x),f2(x)).  [resolve(93,a,89,b)].
Derived: PP(f4(x),x) | UCon(x) | Cont(f3(x),difference(x,f2(x))).  [resolve(93,a,90,b)].
Derived: PP(f4(x),x) | UCon(x) | -Cont(f3(x),intersection(f2(x),difference(x,f2(x)))).  [resolve(93,a,91,b)].
Derived: PP(f4(x),x) | -PP(y,x) | SC(y,difference(x,y)).  [resolve(93,a,92,a)].
94 Con(x) | -SC(f4(x),difference(x,f4(x))).  [clausify(9)].
Derived: -SC(f4(x),difference(x,f4(x))) | UCon(x) | PP(f2(x),x).  [resolve(94,a,87,b)].
Derived: -SC(f4(x),difference(x,f4(x))) | UCon(x) | Cont(f3(x),f2(x)).  [resolve(94,a,89,b)].
Derived: -SC(f4(x),difference(x,f4(x))) | UCon(x) | Cont(f3(x),difference(x,f2(x))).  [resolve(94,a,90,b)].
Derived: -SC(f4(x),difference(x,f4(x))) | UCon(x) | -Cont(f3(x),intersection(f2(x),difference(x,f2(x)))).  [resolve(94,a,91,b)].
Derived: -SC(f4(x),difference(x,f4(x))) | -PP(y,x) | SC(y,difference(x,y)).  [resolve(94,a,92,a)].
95 -Con(x) | PP(f1(x),x) | -PP(y,x) | Covers(x,intersection(y,difference(x,y))).  [resolve(83,a,85,a)].
Derived: PP(f1(x),x) | -PP(y,x) | Covers(x,intersection(y,difference(x,y))) | -UCon(x).  [resolve(95,a,88,b)].
Derived: PP(f1(x),x) | -PP(y,x) | Covers(x,intersection(y,difference(x,y))) | PP(f4(x),x).  [resolve(95,a,93,a)].
Derived: PP(f1(x),x) | -PP(y,x) | Covers(x,intersection(y,difference(x,y))) | -SC(f4(x),difference(x,f4(x))).  [resolve(95,a,94,a)].
96 -Con(x) | -Covers(x,intersection(f1(x),difference(x,f1(x)))) | -PP(y,x) | Covers(x,intersection(y,difference(x,y))).  [resolve(86,a,85,a)].
Derived: -Covers(x,intersection(f1(x),difference(x,f1(x)))) | -PP(y,x) | Covers(x,intersection(y,difference(x,y))) | -UCon(x).  [resolve(96,a,88,b)].
Derived: -Covers(x,intersection(f1(x),difference(x,f1(x)))) | -PP(y,x) | Covers(x,intersection(y,difference(x,y))) | PP(f4(x),x).  [resolve(96,a,93,a)].
Derived: -Covers(x,intersection(f1(x),difference(x,f1(x)))) | -PP(y,x) | Covers(x,intersection(y,difference(x,y))) | -SC(f4(x),difference(x,f4(x))).  [resolve(96,a,94,a)].

Eliminating MinDim/1
97 -MinDim(x) | -ZEX(x).  [clausify(37)].
98 MinDim(c2).  [clausify(33)].
Derived: -ZEX(c2).  [resolve(97,a,98,a)].
99 -MinDim(x) | -(y < x) | ZEX(y).  [clausify(37)].
Derived: -(x < c2) | ZEX(x).  [resolve(99,a,98,a)].
100 MinDim(x) | ZEX(x) | f6(x) < x.  [clausify(37)].
Derived: ZEX(x) | f6(x) < x | -(y < x) | ZEX(y).  [resolve(100,a,99,a)].
101 MinDim(x) | ZEX(x) | -ZEX(f6(x)).  [clausify(37)].
Derived: ZEX(x) | -ZEX(f6(x)) | -(y < x) | ZEX(y).  [resolve(101,a,99,a)].
102 MinDim(c4).  [clausify(57)].
Derived: -ZEX(c4).  [resolve(102,a,97,a)].
Derived: -(x < c4) | ZEX(x).  [resolve(102,a,99,a)].
103 -MinDim(x) | -ZEX(x).  [clausify(61)].
104 -MinDim(x) | -(y < x) | ZEX(y).  [clausify(61)].
105 MinDim(x) | ZEX(x) | f19(x) < x.  [clausify(61)].
Derived: ZEX(x) | f19(x) < x | -(y < x) | ZEX(y).  [resolve(105,a,99,a)].
106 MinDim(x) | ZEX(x) | -ZEX(f19(x)).  [clausify(61)].
Derived: ZEX(x) | -ZEX(f19(x)) | -(y < x) | ZEX(y).  [resolve(106,a,99,a)].

Eliminating MaxDim/1
107 MaxDim(x) | -(f5(x) <= x).  [clausify(36)].
108 -MaxDim(x) | y <= x.  [clausify(36)].
Derived: -(f5(x) <= x) | y <= x.  [resolve(107,a,108,a)].
109 -MaxDim(x) | y <= x.  [clausify(60)].
110 MaxDim(x) | -(f18(x) <= x).  [clausify(60)].
Derived: -(f18(x) <= x) | y <= x.  [resolve(110,a,108,a)].

Eliminating PO/2
111 PO(x,y) | -P(z,x) | -P(z,y).  [clausify(40)].
112 -PO(x,y) | P(f8(x,y),x).  [clausify(40)].
113 -PO(x,y) | P(f8(x,y),y).  [clausify(40)].
Derived: -P(x,y) | -P(x,z) | P(f8(y,z),y).  [resolve(111,a,112,a)].
Derived: -P(x,y) | -P(x,z) | P(f8(y,z),z).  [resolve(111,a,113,a)].
114 -PO(x,y) | P(f21(x,y),x).  [clausify(63)].
Derived: P(f21(x,y),x) | -P(z,x) | -P(z,y).  [resolve(114,a,111,a)].
115 -PO(x,y) | P(f21(x,y),y).  [clausify(63)].
Derived: P(f21(x,y),y) | -P(z,x) | -P(z,y).  [resolve(115,a,111,a)].
116 PO(x,y) | -P(z,x) | -P(z,y).  [clausify(63)].

Eliminating Inc/2
117 Inc(x,y) | -(z < x) | -Cont(z,x) | -P(z,y).  [clausify(41)].
118 -Inc(x,y) | f9(x,y) < x | f10(x,y) < y.  [clausify(41)].
119 -Inc(x,y) | f9(x,y) < x | Cont(f10(x,y),y).  [clausify(41)].
120 -Inc(x,y) | f9(x,y) < x | P(f10(x,y),x).  [clausify(41)].
121 -Inc(x,y) | Cont(f9(x,y),x) | f10(x,y) < y.  [clausify(41)].
122 -Inc(x,y) | Cont(f9(x,y),x) | Cont(f10(x,y),y).  [clausify(41)].
123 -Inc(x,y) | Cont(f9(x,y),x) | P(f10(x,y),x).  [clausify(41)].
124 -Inc(x,y) | P(f9(x,y),y) | f10(x,y) < y.  [clausify(41)].
125 -Inc(x,y) | P(f9(x,y),y) | Cont(f10(x,y),y).  [clausify(41)].
126 -Inc(x,y) | P(f9(x,y),y) | P(f10(x,y),x).  [clausify(41)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f9(y,z) < y | f10(y,z) < z.  [resolve(117,a,118,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f9(y,z) < y | Cont(f10(y,z),z).  [resolve(117,a,119,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f9(y,z) < y | P(f10(y,z),y).  [resolve(117,a,120,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f9(y,z),y) | f10(y,z) < z.  [resolve(117,a,121,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f9(y,z),y) | Cont(f10(y,z),z).  [resolve(117,a,122,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f9(y,z),y) | P(f10(y,z),y).  [resolve(117,a,123,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f9(y,z),z) | f10(y,z) < z.  [resolve(117,a,124,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f9(y,z),z) | Cont(f10(y,z),z).  [resolve(117,a,125,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f9(y,z),z) | P(f10(y,z),y).  [resolve(117,a,126,a)].
127 Inc(x,y) | -(z < y) | -Cont(z,y) | -P(z,x).  [clausify(41)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f9(z,y) < z | f10(z,y) < y.  [resolve(127,a,118,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f9(z,y) < z | Cont(f10(z,y),y).  [resolve(127,a,119,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | f9(z,y) < z | P(f10(z,y),z).  [resolve(127,a,120,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f9(z,y),z) | f10(z,y) < y.  [resolve(127,a,121,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f9(z,y),z) | Cont(f10(z,y),y).  [resolve(127,a,122,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | Cont(f9(z,y),z) | P(f10(z,y),z).  [resolve(127,a,123,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f9(z,y),y) | f10(z,y) < y.  [resolve(127,a,124,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f9(z,y),y) | Cont(f10(z,y),y).  [resolve(127,a,125,a)].
Derived: -(x < y) | -Cont(x,y) | -P(x,z) | P(f9(z,y),y) | P(f10(z,y),z).  [resolve(127,a,126,a)].
128 -Inc(x,y) | f22(x,y) < x | f23(x,y) < y.  [clausify(64)].
Derived: f22(x,y) < x | f23(x,y) < y | -(z < x) | -Cont(z,x) | -P(z,y).  [resolve(128,a,117,a)].
Derived: f22(x,y) < x | f23(x,y) < y | -(z < y) | -Cont(z,y) | -P(z,x).  [resolve(128,a,127,a)].
129 -Inc(x,y) | f22(x,y) < x | Cont(f23(x,y),y).  [clausify(64)].
Derived: f22(x,y) < x | Cont(f23(x,y),y) | -(z < x) | -Cont(z,x) | -P(z,y).  [resolve(129,a,117,a)].
Derived: f22(x,y) < x | Cont(f23(x,y),y) | -(z < y) | -Cont(z,y) | -P(z,x).  [resolve(129,a,127,a)].
130 -Inc(x,y) | f22(x,y) < x | P(f23(x,y),x).  [clausify(64)].
Derived: f22(x,y) < x | P(f23(x,y),x) | -(z < x) | -Cont(z,x) | -P(z,y).  [resolve(130,a,117,a)].
Derived: f22(x,y) < x | P(f23(x,y),x) | -(z < y) | -Cont(z,y) | -P(z,x).  [resolve(130,a,127,a)].
131 -Inc(x,y) | Cont(f22(x,y),x) | f23(x,y) < y.  [clausify(64)].
Derived: Cont(f22(x,y),x) | f23(x,y) < y | -(z < x) | -Cont(z,x) | -P(z,y).  [resolve(131,a,117,a)].
Derived: Cont(f22(x,y),x) | f23(x,y) < y | -(z < y) | -Cont(z,y) | -P(z,x).  [resolve(131,a,127,a)].
132 -Inc(x,y) | Cont(f22(x,y),x) | Cont(f23(x,y),y).  [clausify(64)].
Derived: Cont(f22(x,y),x) | Cont(f23(x,y),y) | -(z < x) | -Cont(z,x) | -P(z,y).  [resolve(132,a,117,a)].
Derived: Cont(f22(x,y),x) | Cont(f23(x,y),y) | -(z < y) | -Cont(z,y) | -P(z,x).  [resolve(132,a,127,a)].
133 -Inc(x,y) | Cont(f22(x,y),x) | P(f23(x,y),x).  [clausify(64)].
Derived: Cont(f22(x,y),x) | P(f23(x,y),x) | -(z < x) | -Cont(z,x) | -P(z,y).  [resolve(133,a,117,a)].
Derived: Cont(f22(x,y),x) | P(f23(x,y),x) | -(z < y) | -Cont(z,y) | -P(z,x).  [resolve(133,a,127,a)].
134 -Inc(x,y) | P(f22(x,y),y) | f23(x,y) < y.  [clausify(64)].
Derived: P(f22(x,y),y) | f23(x,y) < y | -(z < x) | -Cont(z,x) | -P(z,y).  [resolve(134,a,117,a)].
Derived: P(f22(x,y),y) | f23(x,y) < y | -(z < y) | -Cont(z,y) | -P(z,x).  [resolve(134,a,127,a)].
135 -Inc(x,y) | P(f22(x,y),y) | Cont(f23(x,y),y).  [clausify(64)].
Derived: P(f22(x,y),y) | Cont(f23(x,y),y) | -(z < x) | -Cont(z,x) | -P(z,y).  [resolve(135,a,117,a)].
Derived: P(f22(x,y),y) | Cont(f23(x,y),y) | -(z < y) | -Cont(z,y) | -P(z,x).  [resolve(135,a,127,a)].
136 -Inc(x,y) | P(f22(x,y),y) | P(f23(x,y),x).  [clausify(64)].
Derived: P(f22(x,y),y) | P(f23(x,y),x) | -(z < x) | -Cont(z,x) | -P(z,y).  [resolve(136,a,117,a)].
Derived: P(f22(x,y),y) | P(f23(x,y),x) | -(z < y) | -Cont(z,y) | -P(z,x).  [resolve(136,a,127,a)].
137 Inc(x,y) | -(z < x) | -Cont(z,x) | -P(z,y).  [clausify(64)].
138 Inc(x,y) | -(z < y) | -Cont(z,y) | -P(z,x).  [clausify(64)].

Eliminating Max/1
139 Max(x) | ZEX(x) | PP(x,f13(x)).  [clausify(43)].
140 -Max(x) | -ZEX(x).  [clausify(43)].
141 -Max(x) | -PP(x,y).  [clausify(43)].
Derived: ZEX(x) | PP(x,f13(x)) | -PP(x,y).  [resolve(139,a,141,a)].
142 -Max(x) | -ZEX(x).  [clausify(66)].
143 -Max(x) | -PP(x,y).  [clausify(66)].
144 Max(x) | ZEX(x) | PP(x,f26(x)).  [clausify(66)].
Derived: ZEX(x) | PP(x,f26(x)) | -PP(x,y).  [resolve(144,a,141,a)].

Eliminating Min/1
145 Min(x) | ZEX(x) | PP(f14(x),x).  [clausify(44)].
146 -Min(x) | -ZEX(x).  [clausify(44)].
147 -Min(x) | -PP(y,x).  [clausify(44)].
Derived: ZEX(x) | PP(f14(x),x) | -PP(y,x).  [resolve(145,a,147,a)].
148 -Min(x) | -ZEX(x).  [clausify(67)].
149 -Min(x) | -PP(y,x).  [clausify(67)].
150 Min(x) | ZEX(x) | PP(f27(x),x).  [clausify(67)].
Derived: ZEX(x) | PP(f27(x),x) | -PP(y,x).  [resolve(150,a,147,a)].

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, ZEX, UCon, Cont, <, P, PP, SC, <=, C, EqDim, Covers ]).
Function symbol precedence:  function_order([ c1, c2, c3, c4, c5, difference, intersection, f7, f8, f9, f10, f11, f12, f15, f16, f17, f20, f21, f22, f23, f24, f25, f28, f29, f30, f1, f2, f3, f4, f5, f6, f13, f14, f18, f19, f26, f27 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.05 seconds.

NOTE: Back_subsumption disabled, ratio of kept to back_subsumed is 290 (0.00 of 0.32 sec).

============================== PROOF =================================

% Proof 1 at 0.68 (+ 0.03) seconds.
% Length of proof is 36.
% Level of proof is 9.
% Maximum clause weight is 13.000.
% Given clauses 886.

2 (all x (UCon(x) <-> Con(x) & (all y all z (PP(y,x) & Cont(z,y) & Cont(z,difference(x,y)) -> Cont(z,intersection(y,difference(x,y))))))) # label(non_clause).  [assumption].
8 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
9 (all x (Con(x) <-> (all y (PP(y,x) -> SC(y,difference(x,y)))))) # label(non_clause).  [assumption].
11 (all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
13 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
20 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
22 (exists x ZEX(x)) # label(non_clause).  [assumption].
31 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
71 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
82 (all x (ZEX(x) -> UCon(x))) # label(non_clause) # label(goal).  [goal].
90 UCon(x) | -Con(x) | Cont(f3(x),difference(x,f2(x))).  [clausify(2)].
93 Con(x) | PP(f4(x),x).  [clausify(9)].
158 ZEX(difference(x,y)) | -ZEX(x).  [clausify(8)].
161 ZEX(intersection(x,y)) | Cont(intersection(x,y),x).  [clausify(11)].
165 Cont(x,y) | -P(x,intersection(z,y)).  [clausify(13)].
167 -PP(x,y) | P(x,y).  [clausify(20)].
171 ZEX(c1).  [clausify(22)].
178 -ZEX(x) | -ZEX(y) | y = x.  [clausify(31)].
216 -ZEX(x) | -Cont(y,x).  [clausify(71)].
224 ZEX(c5).  [deny(82)].
225 -UCon(c5).  [deny(82)].
229 PP(f4(x),x) | UCon(x) | Cont(f3(x),difference(x,f2(x))).  [resolve(93,a,90,b)].
314 ZEX(difference(c1,x)).  [resolve(171,a,158,b)].
316 -ZEX(x) | c1 = x.  [resolve(178,a,171,a),flip(b)].
404 -ZEX(x) | ZEX(intersection(x,y)).  [resolve(216,b,161,b)].
463 UCon(x) | Cont(f3(x),difference(x,f2(x))) | P(f4(x),x).  [resolve(229,a,167,a)].
519 difference(c1,x) = c1.  [resolve(316,a,314,a),flip(a)].
521 c5 = c1.  [resolve(316,a,224,a),flip(a)].
523 -UCon(c1).  [back_rewrite(225),rewrite([521(1)])].
609 ZEX(intersection(c1,x)).  [resolve(404,a,171,a)].
611 intersection(c1,x) = c1.  [resolve(609,a,316,a),flip(a)].
612 Cont(x,y) | -P(x,c1).  [para(611(a,1),165(b,2))].
7736 Cont(f3(c1),c1) | Cont(f4(c1),x).  [resolve(463,c,612,b),rewrite([519(8)]),unit_del(a,523)].
7816 Cont(f3(c1),c1) | -ZEX(x).  [resolve(7736,b,216,b)].
7833 Cont(f3(c1),c1).  [resolve(7816,b,171,a)].
7863 $F.  [resolve(7833,a,216,b),unit_del(a,171)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=886. Generated=11769. Kept=7712. proofs=1.
Usable=806. Sos=6084. Demods=47. Limbo=27, Disabled=1065. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=4056. Back_subsumed=11.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=135 (0 lex), Back_demodulated=734. Back_unit_deleted=50.
Demod_attempts=134545. Demod_rewrites=1783.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=59439. Nonunit_bsub_feature_tests=10560.
Megabytes=16.38.
User_CPU=0.68, System_CPU=0.03, Wall_clock=1.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 2193 exit (max_proofs) Thu Mar 15 10:25:51 2012
