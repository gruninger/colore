============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 10600 was started by torsten on stl-ws2,
Thu Oct 20 21:25:34 2011
The command was "prover9 -t 600 -f codi/conversions/codi_basic.p9 codi/definitions/input/ep.p9 codi/definitions/input/sc.p9 dim/conversions/dim_basic.p9 cont/conversions/cont_c_ext.p9 cont/conversions/cont_c.p9 cont/conversions/cont_ext.p9 cont/conversions/cont_basic.p9 codi/theorems/input/options.txt codi/theorems/generated/sc_theorems_relevance1.order codi/theorems/input/sc_theorems_4.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file codi/conversions/codi_basic.p9


formulas(sos).
(all x all y (Cont(x,y) -> x < y | EqDim(x,y))).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file codi/definitions/input/sc.p9


formulas(sos).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))).
end_of_list.

% Reading from file dim/conversions/dim_basic.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y < z -> x < z)).
(all x EqDim(x,x)).
(all x all y (EqDim(x,y) -> EqDim(y,x))).
(all x all y all z (EqDim(x,y) & EqDim(y,z) -> EqDim(x,z))).
(all x all y (x < y -> -EqDim(x,y))).
(all x all y all z (EqDim(x,y) -> (z < x -> z < y))).
(all x all y all z (EqDim(x,y) -> (x < z -> y < z))).
(exists x (-ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
end_of_list.

% Reading from file cont/conversions/cont_c_ext.p9


formulas(sos).
end_of_list.

% Reading from file cont/conversions/cont_c.p9


formulas(sos).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
(all x all y (-ZEX(x) & (all z (C(z,x) -> C(z,y))) & (exists z (C(z,y) & -C(z,x))) -> Cont(x,y))).
end_of_list.

% Reading from file cont/conversions/cont_ext.p9


formulas(sos).
(all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
end_of_list.

% Reading from file codi/theorems/input/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file codi/theorems/generated/sc_theorems_relevance1.order

predicate_order([=,C,ZEX,P,SC,EqDim,Cont,<]).
set(inverse_order).
assign(order,kbo).

% Reading from file codi/theorems/input/sc_theorems_4.p9


formulas(goals).
(all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
2 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
3 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))) # label(non_clause).  [assumption].
4 (all x -(x < x)) # label(non_clause).  [assumption].
5 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
6 (all x all y all z (x < y & y < z -> x < z)) # label(non_clause).  [assumption].
7 (all x EqDim(x,x)) # label(non_clause).  [assumption].
8 (all x all y (EqDim(x,y) -> EqDim(y,x))) # label(non_clause).  [assumption].
9 (all x all y all z (EqDim(x,y) & EqDim(y,z) -> EqDim(x,z))) # label(non_clause).  [assumption].
10 (all x all y (x < y -> -EqDim(x,y))) # label(non_clause).  [assumption].
11 (all x all y all z (EqDim(x,y) -> (z < x -> z < y))) # label(non_clause).  [assumption].
12 (all x all y all z (EqDim(x,y) -> (x < z -> y < z))) # label(non_clause).  [assumption].
13 (exists x (-ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
14 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
15 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
16 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
18 (all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)) # label(non_clause).  [assumption].
19 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
20 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
21 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
22 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
23 (all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

No predicates eliminated.

============================== end predicate elimination =============

Term ordering decisions:
Function symbol KB weights:  c1=1. c2=1. c3=1. f1=1. f2=1. f3=1. f4=1. f5=1.
Predicate symbol precedence:  predicate_order([ =, C, ZEX, P, SC, EqDim, Cont, < ]).
Function symbol precedence:  function_order([ c1, c2, c3, f1, f2, f3, f4, f5 ]).
Skipping inverse_order, because term ordering is KBO.
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.02 seconds.

NOTE: Back_subsumption disabled, ratio of kept to back_subsumed is 78 (0.00 of 0.14 sec).

============================== PROOF =================================

% Proof 1 at 0.16 (+ 0.00) seconds.
% Length of proof is 33.
% Level of proof is 9.
% Maximum clause weight is 19.000.
% Given clauses 561.

1 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
2 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
3 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))) # label(non_clause).  [assumption].
16 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
23 (all x all y (C(x,y) & (all z (-Cont(z,x) | -Cont(z,y) | -P(z,x) & -P(z,y))) -> SC(x,y))) # label(non_clause) # label(goal).  [goal].
24 -Cont(x,y) | x < y | EqDim(x,y).  [clausify(1)].
27 P(x,y) | -Cont(x,y) | -EqDim(x,y).  [clausify(2)].
32 SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f2(x,y),x).  [clausify(3)].
33 SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f2(x,y),y).  [clausify(3)].
34 SC(x,y) | -Cont(z,x) | -Cont(z,y) | -(f2(x,y) < x) | -(f2(x,y) < y).  [clausify(3)].
48 -C(x,y) | Cont(f3(x,y),x).  [clausify(16)].
49 -C(x,y) | Cont(f3(x,y),y).  [clausify(16)].
61 C(c2,c3).  [deny(23)].
62 -Cont(x,c2) | -Cont(x,c3) | -P(x,c2).  [deny(23)].
63 -Cont(x,c2) | -Cont(x,c3) | -P(x,c3).  [deny(23)].
64 -SC(c2,c3).  [deny(23)].
118 Cont(f3(c2,c3),c3).  [resolve(61,a,49,a)].
119 Cont(f3(c2,c3),c2).  [resolve(61,a,48,a)].
148 SC(x,c3) | -Cont(f3(c2,c3),x) | Cont(f2(x,c3),c3).  [resolve(118,a,33,c)].
150 SC(x,c3) | -Cont(f3(c2,c3),x) | Cont(f2(x,c3),x).  [resolve(118,a,32,c)].
3493 Cont(f2(c2,c3),c3).  [resolve(148,b,119,a),unit_del(a,64)].
3510 -Cont(f2(c2,c3),c2) | -P(f2(c2,c3),c3).  [resolve(3493,a,63,b)].
3511 -Cont(f2(c2,c3),c2) | -P(f2(c2,c3),c2).  [resolve(3493,a,62,b)].
3526 P(f2(c2,c3),c3) | -EqDim(f2(c2,c3),c3).  [resolve(3493,a,27,b)].
3527 f2(c2,c3) < c3 | EqDim(f2(c2,c3),c3).  [resolve(3493,a,24,a)].
3735 Cont(f2(c2,c3),c2).  [resolve(150,b,119,a),unit_del(a,64)].
3736 -P(f2(c2,c3),c2).  [back_unit_del(3511),unit_del(a,3735)].
3737 -P(f2(c2,c3),c3).  [back_unit_del(3510),unit_del(a,3735)].
3738 -EqDim(f2(c2,c3),c3).  [back_unit_del(3526),unit_del(a,3737)].
3739 f2(c2,c3) < c3.  [back_unit_del(3527),unit_del(b,3738)].
3774 -EqDim(f2(c2,c3),c2).  [resolve(3735,a,27,b),unit_del(a,3736)].
3775 f2(c2,c3) < c2.  [resolve(3735,a,24,a),unit_del(b,3774)].
3787 $F.  [ur(34,a,64,a,b,3735,a,c,3493,a,e,3739,a),unit_del(a,3775)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=561. Generated=5463. Kept=3763. proofs=1.
Usable=561. Sos=2626. Demods=0. Limbo=9, Disabled=608. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=1699. Back_subsumed=41.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=526.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=16016. Nonunit_bsub_feature_tests=13215.
Megabytes=4.74.
User_CPU=0.16, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 10600 exit (max_proofs) Thu Oct 20 21:25:34 2011
