============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 21567 was started by torsten on scotus.mie.utoronto.ca,
Fri Nov 18 18:18:09 2011
The command was "mace4 -c -t 6000 -s 600 -n 3 -N 20 -f codi/conversions/codi_down_sum.p9 codi/conversions/codi_down.p9 codi/theorems/input/codi_down_theoremsEP-E3.p9 codi/conversions/codi_int.p9 codi/conversions/ep_ext.p9 codi/definitions/input/ep.p9 codi/definitions/input/epp.p9 codi/definitions/input/po.p9 codi/theorems/input/codi_down_theoremsEP-E2.p9 codi/conversions/codi_linear.p9 zex/input/zex.p9 codi/theorems/input/codi_down_theoremsEP-E1.p9 dim/conversions/dim_prime_linear.p9 cont/conversions/cont_c_ext.p9 codi/definitions/input/inc.p9 codi/definitions/input/sc.p9 codi/definitions/input/min_max_in_dim.p9 codi/theorems/input/codi_down_theoremsT1-T2.p9 codi/theorems/input/codi_down_theoremsT3-T5.p9 cont/conversions/cont_c.p9 cont/conversions/cont_ext.p9 cont/conversions/cont_basic.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file codi/conversions/codi_down_sum.p9


formulas(sos).
(all x all y (x = y <-> (all z (PO(z,x) <-> PO(z,y))))).
(all x all y all z (PO(z,sum(x,y)) <-> PO(z,x) | PO(z,y))).
(all x all y sum(x,y) = sum(y,x)).
(all x all y (x < y -> y = sum(x,y))).
(all x all y all z (x <= y & P(z,y) -> P(z,sum(x,y)))).
(all x all y all z (PO(z,sum(x,y)) -> PO(z,x) | PO(z,y))).
(all x all y (ZEX(x) & ZEX(y) <-> ZEX(sum(x,y)))).
end_of_list.

% Reading from file codi/conversions/codi_down.p9


formulas(sos).
(all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))).
(all x all y (y < x -> x = difference(x,y))).
(all x all y all z (x <= y -> (Cont(z,x) & intersection(z,y) < z <-> Cont(z,difference(x,y))))).
(all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))).
end_of_list.

% Reading from file codi/theorems/input/codi_down_theoremsEP-E3.p9


formulas(sos).
(all x all y (-ZEX(x) & -ZEX(y) & -Cont(y,x) -> (exists z (P(z,y) & intersection(z,x) < z)))).
end_of_list.

% Reading from file codi/conversions/codi_int.p9


formulas(sos).
(all x all y (-C(x,y) -> ZEX(intersection(x,y)))).
(all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))).
(all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))).
(all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))).
end_of_list.

% Reading from file codi/conversions/ep_ext.p9


formulas(sos).
(all x (-ZEX(x) -> P(x,x))).
(all x all y (P(x,y) & P(y,x) -> x = y)).
(all x all y all z (P(x,y) & P(y,z) -> P(x,z))).
(all x all y all z (P(x,y) & z < x -> z < y)).
(all x all y all z (P(x,y) & y < z -> x < z)).
(all x all y all z (P(x,y) & EqDim(z,x) -> EqDim(z,y))).
(all x all y all z (P(x,y) & EqDim(z,y) -> EqDim(z,x))).
(all x all y all z (P(x,y) -> C(x,y))).
(all x all y ((all z (P(z,x) <-> P(z,y))) -> x = y)).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file codi/definitions/input/epp.p9


formulas(sos).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
end_of_list.

% Reading from file codi/definitions/input/po.p9


formulas(sos).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
end_of_list.

% Reading from file codi/theorems/input/codi_down_theoremsEP-E2.p9


formulas(sos).
(all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & EqDim(x,y) & PO(x,y) & -PP(y,x) -> (exists z (P(z,y) & -PO(z,x))))).
(all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & EqDim(x,y) & -PO(x,y) -> (exists z (P(z,y) & -PO(z,x))))).
(all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & -EqDim(x,y) -> (exists z (P(z,y) & -PO(z,x))))).
end_of_list.

% Reading from file codi/conversions/codi_linear.p9


formulas(sos).
(all x all y (Cont(x,y) -> x <= y)).
end_of_list.

% Reading from file zex/input/zex.p9


formulas(sos).
(exists x ZEX(x)).
end_of_list.

% Reading from file codi/theorems/input/codi_down_theoremsEP-E1.p9


formulas(sos).
(all x all y (PP(x,y) -> (exists z (P(z,y) & -PO(z,x))))).
end_of_list.

% Reading from file dim/conversions/dim_prime_linear.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y <= z -> x < z)).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
(exists x MinDim(x)).
(all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x (MaxDim(x) <-> (all y y <= x))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))).
end_of_list.

% Reading from file cont/conversions/cont_c_ext.p9


formulas(sos).
end_of_list.

% Reading from file codi/definitions/input/inc.p9


formulas(sos).
(all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))).
end_of_list.

% Reading from file codi/definitions/input/sc.p9


formulas(sos).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))).
end_of_list.

% Reading from file codi/definitions/input/min_max_in_dim.p9


formulas(sos).
(all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))).
(all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))).
end_of_list.

% Reading from file codi/theorems/input/codi_down_theoremsT1-T2.p9


formulas(sos).
(all x all y (-ZEX(difference(x,y)) -> P(difference(x,y),x))).
(all x all y (PP(y,x) & -ZEX(difference(x,y)) & P(difference(x,y),x) -> PP(difference(x,y),x))).
(all x all y (PP(y,x) -> PP(difference(x,y),x))).
end_of_list.

% Reading from file codi/theorems/input/codi_down_theoremsT3-T5.p9


formulas(sos).
(all x all y (-ZEX(y) & -ZEX(difference(x,y)) -> -PO(y,difference(x,y)))).
(all x all y -PO(intersection(x,y),difference(x,y))).
(all x all y all z (P(z,difference(x,y)) <-> P(z,x) & -PO(z,intersection(x,y)))).
end_of_list.

% Reading from file cont/conversions/cont_c.p9


formulas(sos).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
(all x all y (-ZEX(x) & (all z (C(z,x) -> C(z,y))) & (exists z (C(z,y) & -C(z,x))) -> Cont(x,y))).
end_of_list.

% Reading from file cont/conversions/cont_ext.p9


formulas(sos).
(all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
end_of_list.

% From the command line: assign(max_seconds, 6000).

% From the command line: assign(max_seconds_per, 600).
    % assign(domain_size, 3) -> assign(start_size, 3).
    % assign(domain_size, 3) -> assign(end_size, 3).

% From the command line: assign(domain_size, 3).

% From the command line: assign(end_size, 20).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (x = y <-> (all z (PO(z,x) <-> PO(z,y))))) # label(non_clause).  [assumption].
2 (all x all y all z (PO(z,sum(x,y)) <-> PO(z,x) | PO(z,y))) # label(non_clause).  [assumption].
3 (all x all y sum(x,y) = sum(y,x)) # label(non_clause).  [assumption].
4 (all x all y (x < y -> y = sum(x,y))) # label(non_clause).  [assumption].
5 (all x all y all z (x <= y & P(z,y) -> P(z,sum(x,y)))) # label(non_clause).  [assumption].
6 (all x all y all z (PO(z,sum(x,y)) -> PO(z,x) | PO(z,y))) # label(non_clause).  [assumption].
7 (all x all y (ZEX(x) & ZEX(y) <-> ZEX(sum(x,y)))) # label(non_clause).  [assumption].
8 (all x all y (-ZEX(difference(x,y)) -> EqDim(x,difference(x,y)))) # label(non_clause).  [assumption].
9 (all x all y (y < x -> x = difference(x,y))) # label(non_clause).  [assumption].
10 (all x all y all z (x <= y -> (Cont(z,x) & intersection(z,y) < z <-> Cont(z,difference(x,y))))) # label(non_clause).  [assumption].
11 (all x all y (ZEX(difference(x,y)) <-> ZEX(x) | Cont(x,y))) # label(non_clause).  [assumption].
12 (all x all y (-ZEX(x) & -ZEX(y) & -Cont(y,x) -> (exists z (P(z,y) & intersection(z,x) < z)))) # label(non_clause).  [assumption].
13 (all x all y (-C(x,y) -> ZEX(intersection(x,y)))) # label(non_clause).  [assumption].
14 (all x all y (-ZEX(intersection(x,y)) -> Cont(intersection(x,y),x))) # label(non_clause).  [assumption].
15 (all x all y all z (Cont(z,x) & Cont(z,y) -> z <= intersection(x,y))) # label(non_clause).  [assumption].
16 (all x all y all z (Cont(z,x) & Cont(z,y) & EqDim(z,intersection(x,y)) <-> P(z,intersection(x,y)))) # label(non_clause).  [assumption].
17 (all x (-ZEX(x) -> P(x,x))) # label(non_clause).  [assumption].
18 (all x all y (P(x,y) & P(y,x) -> x = y)) # label(non_clause).  [assumption].
19 (all x all y all z (P(x,y) & P(y,z) -> P(x,z))) # label(non_clause).  [assumption].
20 (all x all y all z (P(x,y) & z < x -> z < y)) # label(non_clause).  [assumption].
21 (all x all y all z (P(x,y) & y < z -> x < z)) # label(non_clause).  [assumption].
22 (all x all y all z (P(x,y) & EqDim(z,x) -> EqDim(z,y))) # label(non_clause).  [assumption].
23 (all x all y all z (P(x,y) & EqDim(z,y) -> EqDim(z,x))) # label(non_clause).  [assumption].
24 (all x all y all z (P(x,y) -> C(x,y))) # label(non_clause).  [assumption].
25 (all x all y ((all z (P(z,x) <-> P(z,y))) -> x = y)) # label(non_clause).  [assumption].
26 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
27 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
28 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
29 (all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & EqDim(x,y) & PO(x,y) & -PP(y,x) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause).  [assumption].
30 (all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & EqDim(x,y) & -PO(x,y) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause).  [assumption].
31 (all x all y (-ZEX(x) & -ZEX(y) & -P(y,x) & -EqDim(x,y) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause).  [assumption].
32 (all x all y (Cont(x,y) -> x <= y)) # label(non_clause).  [assumption].
33 (exists x ZEX(x)) # label(non_clause).  [assumption].
34 (all x all y (PP(x,y) -> (exists z (P(z,y) & -PO(z,x))))) # label(non_clause).  [assumption].
35 (all x -(x < x)) # label(non_clause).  [assumption].
36 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
37 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
38 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
39 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
40 (exists x MinDim(x)) # label(non_clause).  [assumption].
41 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
42 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
43 (all x (MaxDim(x) <-> (all y y <= x))) # label(non_clause).  [assumption].
44 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
45 (all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))) # label(non_clause).  [assumption].
46 (all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))) # label(non_clause).  [assumption].
47 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))) # label(non_clause).  [assumption].
48 (all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))) # label(non_clause).  [assumption].
49 (all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))) # label(non_clause).  [assumption].
50 (all x all y (-ZEX(difference(x,y)) -> P(difference(x,y),x))) # label(non_clause).  [assumption].
51 (all x all y (PP(y,x) & -ZEX(difference(x,y)) & P(difference(x,y),x) -> PP(difference(x,y),x))) # label(non_clause).  [assumption].
52 (all x all y (PP(y,x) -> PP(difference(x,y),x))) # label(non_clause).  [assumption].
53 (all x all y (-ZEX(y) & -ZEX(difference(x,y)) -> -PO(y,difference(x,y)))) # label(non_clause).  [assumption].
54 (all x all y -PO(intersection(x,y),difference(x,y))) # label(non_clause).  [assumption].
55 (all x all y all z (P(z,difference(x,y)) <-> P(z,x) & -PO(z,intersection(x,y)))) # label(non_clause).  [assumption].
56 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
58 (all x all y ((all z (Cont(z,x) <-> Cont(z,y))) -> x = y)) # label(non_clause).  [assumption].
59 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
60 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
61 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
62 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
x != y | -PO(z,y) | PO(z,x).
x != y | PO(z,y) | -PO(z,x).
x = y | PO(f1(y,x),y) | PO(f1(y,x),x).
x = y | -PO(f1(y,x),y) | -PO(f1(y,x),x).
-PO(x,sum(y,z)) | PO(x,y) | PO(x,z).
PO(x,sum(y,z)) | -PO(x,y).
PO(x,sum(y,z)) | -PO(x,z).
sum(x,y) = sum(y,x).
-(x < y) | sum(x,y) = y.
-(x <= y) | -P(z,y) | P(z,sum(x,y)).
-PO(x,sum(y,z)) | PO(x,y) | PO(x,z).
-ZEX(x) | -ZEX(y) | ZEX(sum(x,y)).
ZEX(x) | -ZEX(sum(x,y)).
ZEX(x) | -ZEX(sum(y,x)).
ZEX(difference(x,y)) | EqDim(x,difference(x,y)).
-(x < y) | difference(y,x) = y.
-(x <= y) | -Cont(z,x) | -(intersection(z,y) < z) | Cont(z,difference(x,y)).
-(x <= y) | Cont(z,x) | -Cont(z,difference(x,y)).
-(x <= y) | intersection(z,y) < z | -Cont(z,difference(x,y)).
-ZEX(difference(x,y)) | ZEX(x) | Cont(x,y).
ZEX(difference(x,y)) | -ZEX(x).
ZEX(difference(x,y)) | -Cont(x,y).
ZEX(x) | ZEX(y) | Cont(y,x) | P(f2(x,y),y).
ZEX(x) | ZEX(y) | Cont(y,x) | intersection(f2(x,y),x) < f2(x,y).
C(x,y) | ZEX(intersection(x,y)).
ZEX(intersection(x,y)) | Cont(intersection(x,y),x).
-Cont(x,y) | -Cont(x,z) | x <= intersection(y,z).
-Cont(x,y) | -Cont(x,z) | -EqDim(x,intersection(y,z)) | P(x,intersection(y,z)).
Cont(x,y) | -P(x,intersection(y,z)).
Cont(x,y) | -P(x,intersection(z,y)).
EqDim(x,intersection(y,z)) | -P(x,intersection(y,z)).
ZEX(x) | P(x,x).
-P(x,y) | -P(y,x) | y = x.
-P(x,y) | -P(y,z) | P(x,z).
-P(x,y) | -(z < x) | z < y.
-P(x,y) | -(y < z) | x < z.
-P(x,y) | -EqDim(z,x) | EqDim(z,y).
-P(x,y) | -EqDim(z,y) | EqDim(z,x).
-P(x,y) | C(x,y).
P(f3(x,y),x) | P(f3(x,y),y) | y = x.
-P(f3(x,y),x) | -P(f3(x,y),y) | y = x.
-P(x,y) | Cont(x,y).
-P(x,y) | EqDim(x,y).
P(x,y) | -Cont(x,y) | -EqDim(x,y).
-PP(x,y) | P(x,y).
-PP(x,y) | y != x.
PP(x,y) | -P(x,y) | y = x.
-PO(x,y) | P(f4(x,y),x).
-PO(x,y) | P(f4(x,y),y).
PO(x,y) | -P(z,x) | -P(z,y).
ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | PP(y,x) | P(f5(x,y),y).
ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | -PO(x,y) | PP(y,x) | -PO(f5(x,y),x).
ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | PO(x,y) | P(f6(x,y),y).
ZEX(x) | ZEX(y) | P(y,x) | -EqDim(x,y) | PO(x,y) | -PO(f6(x,y),x).
ZEX(x) | ZEX(y) | P(y,x) | EqDim(x,y) | P(f7(x,y),y).
ZEX(x) | ZEX(y) | P(y,x) | EqDim(x,y) | -PO(f7(x,y),x).
-Cont(x,y) | x <= y.
ZEX(c1).
-PP(x,y) | P(f8(x,y),y).
-PP(x,y) | -PO(f8(x,y),x).
-(x < x).
-(x < y) | -(y < x).
-(x < y) | -(y <= z) | x < z.
-ZEX(x) | -ZEX(y) | y = x.
-ZEX(x) | ZEX(y) | x < y.
MinDim(c2).
-EqDim(x,y) | -(x < y).
-EqDim(x,y) | -(y < x).
EqDim(x,y) | x < y | y < x.
-(x <= y) | x < y | EqDim(x,y).
x <= y | -(x < y).
x <= y | -EqDim(x,y).
-MaxDim(x) | y <= x.
MaxDim(x) | -(f9(x) <= x).
-MinDim(x) | -ZEX(x).
-MinDim(x) | -(y < x) | ZEX(y).
MinDim(x) | ZEX(x) | f10(x) < x.
MinDim(x) | ZEX(x) | -ZEX(f10(x)).
-Covers(x,y) | y < x.
-Covers(x,y) | -(y < z) | -(z < x).
Covers(x,y) | -(y < x) | y < f11(x,y).
Covers(x,y) | -(y < x) | f11(x,y) < x.
-Inc(x,y) | f12(x,y) < x | f13(x,y) < y.
-Inc(x,y) | f12(x,y) < x | Cont(f13(x,y),y).
-Inc(x,y) | f12(x,y) < x | P(f13(x,y),x).
-Inc(x,y) | Cont(f12(x,y),x) | f13(x,y) < y.
-Inc(x,y) | Cont(f12(x,y),x) | Cont(f13(x,y),y).
-Inc(x,y) | Cont(f12(x,y),x) | P(f13(x,y),x).
-Inc(x,y) | P(f12(x,y),y) | f13(x,y) < y.
-Inc(x,y) | P(f12(x,y),y) | Cont(f13(x,y),y).
-Inc(x,y) | P(f12(x,y),y) | P(f13(x,y),x).
Inc(x,y) | -(z < x) | -Cont(z,x) | -P(z,y).
Inc(x,y) | -(z < y) | -Cont(z,y) | -P(z,x).
-SC(x,y) | Cont(f14(x,y),x).
-SC(x,y) | Cont(f14(x,y),y).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | z < x.
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | z < y.
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f15(x,y),x).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f15(x,y),y).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | -(f15(x,y) < x) | -(f15(x,y) < y).
-Max(x) | -ZEX(x).
-Max(x) | -PP(x,y).
Max(x) | ZEX(x) | PP(x,f16(x)).
-Min(x) | -ZEX(x).
-Min(x) | -PP(y,x).
Min(x) | ZEX(x) | PP(f17(x),x).
ZEX(difference(x,y)) | P(difference(x,y),x).
-PP(x,y) | ZEX(difference(y,x)) | -P(difference(y,x),y) | PP(difference(y,x),y).
-PP(x,y) | PP(difference(y,x),y).
ZEX(x) | ZEX(difference(y,x)) | -PO(x,difference(y,x)).
-PO(intersection(x,y),difference(x,y)).
-P(x,difference(y,z)) | P(x,y).
-P(x,difference(y,z)) | -PO(x,intersection(y,z)).
P(x,difference(y,z)) | -P(x,y) | PO(x,intersection(y,z)).
-C(x,y) | Cont(f18(x,y),x).
-C(x,y) | Cont(f18(x,y),y).
C(x,y) | -Cont(z,x) | -Cont(z,y).
ZEX(x) | C(f19(x,y),x) | -C(z,y) | C(z,x) | Cont(x,y).
ZEX(x) | -C(f19(x,y),y) | -C(z,y) | C(z,x) | Cont(x,y).
Cont(f20(x,y),x) | Cont(f20(x,y),y) | y = x.
-Cont(f20(x,y),x) | -Cont(f20(x,y),y) | y = x.
ZEX(x) | Cont(x,x).
-ZEX(x) | -Cont(x,x).
-Cont(x,y) | -Cont(y,x) | y = x.
-Cont(x,y) | -Cont(y,z) | Cont(x,z).
-ZEX(x) | -Cont(y,x).
-ZEX(x) | -Cont(x,y).
end_of_list.

============================== end of clauses for search =============

% There are no natural numbers in the input.

============================== DOMAIN SIZE 3 =========================

====== Domain size 3 terminated by max_seconds_per. ======

============================== STATISTICS ============================

For domain size 3.

Current CPU time: 0.00 seconds (total CPU time: 600.01 seconds).
Ground clauses: seen=1721, kept=1556.
Selections=11235484, assignments=33706416, propagations=273489829, current_models=0.
Rewrite_terms=1223019197, rewrite_bools=2388780832, indexes=98055127.
Rules_from_neg_clauses=65370172, cross_offs=115419146.

============================== end of statistics =====================

============================== DOMAIN SIZE 4 =========================

============================== MODEL =================================

interpretation( 4, [number=1, seconds=600], [

        function(c1, [ 0 ]),

        function(c2, [ 1 ]),

        function(f9(_), [ 1, 0, 0, 0 ]),

        function(f10(_), [ 0, 0, 0, 0 ]),

        function(f16(_), [ 0, 0, 1, 1 ]),

        function(f17(_), [ 0, 2, 0, 0 ]),

        function(difference(_,_), [
			   0, 0, 0, 0,
			   1, 0, 3, 2,
			   2, 0, 0, 2,
			   3, 0, 3, 0 ]),

        function(intersection(_,_), [
			   0, 0, 0, 0,
			   0, 1, 2, 3,
			   0, 2, 2, 0,
			   0, 3, 0, 3 ]),

        function(sum(_,_), [
			   0, 1, 2, 3,
			   1, 1, 1, 1,
			   2, 1, 2, 1,
			   3, 1, 1, 3 ]),

        function(f1(_,_), [
			   0, 1, 1, 1,
			   1, 0, 3, 2,
			   1, 3, 0, 2,
			   1, 2, 2, 0 ]),

        function(f2(_,_), [
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 3, 0, 3,
			   0, 2, 2, 0 ]),

        function(f3(_,_), [
			   0, 1, 2, 3,
			   1, 0, 1, 1,
			   2, 1, 0, 2,
			   3, 1, 2, 0 ]),

        function(f4(_,_), [
			   0, 0, 0, 0,
			   0, 1, 2, 3,
			   0, 2, 2, 0,
			   0, 3, 0, 3 ]),

        function(f5(_,_), [
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 3, 0, 0,
			   0, 2, 0, 0 ]),

        function(f6(_,_), [
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 3,
			   0, 0, 2, 0 ]),

        function(f7(_,_), [
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0 ]),

        function(f8(_,_), [
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 3, 0, 0,
			   0, 2, 0, 0 ]),

        function(f11(_,_), [
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0 ]),

        function(f12(_,_), [
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0 ]),

        function(f13(_,_), [
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0 ]),

        function(f14(_,_), [
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0 ]),

        function(f15(_,_), [
			   0, 0, 0, 0,
			   0, 1, 2, 3,
			   0, 2, 2, 0,
			   0, 3, 0, 3 ]),

        function(f18(_,_), [
			   0, 0, 0, 0,
			   0, 1, 2, 3,
			   0, 2, 2, 0,
			   0, 3, 0, 3 ]),

        function(f19(_,_), [
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 2,
			   0, 0, 3, 0 ]),

        function(f20(_,_), [
			   0, 1, 2, 3,
			   1, 0, 1, 1,
			   2, 1, 0, 2,
			   3, 1, 2, 0 ]),

        relation(Max(_), [ 0, 1, 0, 0 ]),

        relation(MaxDim(_), [ 0, 1, 1, 1 ]),

        relation(Min(_), [ 0, 0, 1, 1 ]),

        relation(MinDim(_), [ 0, 1, 1, 1 ]),

        relation(ZEX(_), [ 1, 0, 0, 0 ]),

        relation(<(_,_), [
			   0, 1, 1, 1,
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0 ]),

        relation(<=(_,_), [
			   1, 1, 1, 1,
			   0, 1, 1, 1,
			   0, 1, 1, 1,
			   0, 1, 1, 1 ]),

        relation(C(_,_), [
			   0, 0, 0, 0,
			   0, 1, 1, 1,
			   0, 1, 1, 0,
			   0, 1, 0, 1 ]),

        relation(Cont(_,_), [
			   0, 0, 0, 0,
			   0, 1, 0, 0,
			   0, 1, 1, 0,
			   0, 1, 0, 1 ]),

        relation(Covers(_,_), [
			   0, 0, 0, 0,
			   1, 0, 0, 0,
			   1, 0, 0, 0,
			   1, 0, 0, 0 ]),

        relation(EqDim(_,_), [
			   1, 0, 0, 0,
			   0, 1, 1, 1,
			   0, 1, 1, 1,
			   0, 1, 1, 1 ]),

        relation(Inc(_,_), [
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0 ]),

        relation(P(_,_), [
			   0, 0, 0, 0,
			   0, 1, 0, 0,
			   0, 1, 1, 0,
			   0, 1, 0, 1 ]),

        relation(PO(_,_), [
			   0, 0, 0, 0,
			   0, 1, 1, 1,
			   0, 1, 1, 0,
			   0, 1, 0, 1 ]),

        relation(PP(_,_), [
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 1, 0, 0,
			   0, 1, 0, 0 ]),

        relation(SC(_,_), [
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0,
			   0, 0, 0, 0 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 4.

Current CPU time: 0.00 seconds (total CPU time: 600.02 seconds).
Ground clauses: seen=3634, kept=3338.
Selections=247, assignments=324, propagations=275, current_models=1.
Rewrite_terms=3174, rewrite_bools=5743, indexes=299.
Rules_from_neg_clauses=64, cross_offs=214.

============================== end of statistics =====================

User_CPU=600.02, System_CPU=5.44, Wall_clock=606.

Exiting with 1 model.

Process 21567 exit (max_models) Fri Nov 18 18:28:15 2011
The process finished Fri Nov 18 18:28:15 2011
