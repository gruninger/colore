============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 21095 was started by torsten on stl-ws2,
Mon Jul  9 13:05:27 2012
The command was "mace4 -c -t 600 -s 60 -n 2 -N 20 -f codi/consistency/input/codi_linear_nozex_nontrivial.p9 codi/consistency/input/codi_linear_nontrivial.p9 zex/input/nozex.p9 codi/conversions/codi_linear.p9 dim/conversions/dim_prime_linear.p9 cont/conversions/cont_c.p9 cont/conversions/cont_basic.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file codi/consistency/input/codi_linear_nozex_nontrivial.p9


formulas(sos).
end_of_list.

% Reading from file codi/consistency/input/codi_linear_nontrivial.p9


formulas(sos).
(exists x (-MaxDim(x) & -MinDim(x))).
(exists x exists y Inc(x,y)).
(exists x exists y SC(x,y)).
(exists x exists y (x != y & PO(x,y))).
(exists x exists y PP(x,y)).
(exists x exists y (-ZEX(x) & -ZEX(y) & -C(x,y))).
end_of_list.

% Reading from file zex/input/nozex.p9


formulas(sos).
(all x -ZEX(x)).
end_of_list.

% Reading from file codi/conversions/codi_linear.p9


formulas(sos).
(all x all y (Cont(x,y) -> x < y | EqDim(x,y))).
end_of_list.

% Reading from file dim/conversions/dim_prime_linear.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y <= z -> x < z)).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
(exists x MinDim(x)).
(all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x (MaxDim(x) <-> (all y y <= x))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))).
end_of_list.

% Reading from file cont/conversions/cont_c.p9


formulas(sos).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
end_of_list.

% From the command line: assign(max_seconds, 600).

% From the command line: assign(max_seconds_per, 60).
    % assign(domain_size, 2) -> assign(start_size, 2).
    % assign(domain_size, 2) -> assign(end_size, 2).

% From the command line: assign(domain_size, 2).

% From the command line: assign(end_size, 20).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (exists x (-MaxDim(x) & -MinDim(x))) # label(non_clause).  [assumption].
2 (exists x exists y Inc(x,y)) # label(non_clause).  [assumption].
3 (exists x exists y SC(x,y)) # label(non_clause).  [assumption].
4 (exists x exists y (x != y & PO(x,y))) # label(non_clause).  [assumption].
5 (exists x exists y PP(x,y)) # label(non_clause).  [assumption].
6 (exists x exists y (-ZEX(x) & -ZEX(y) & -C(x,y))) # label(non_clause).  [assumption].
7 (all x -ZEX(x)) # label(non_clause).  [assumption].
8 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
9 (all x -(x < x)) # label(non_clause).  [assumption].
10 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
11 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
12 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
13 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
14 (exists x MinDim(x)) # label(non_clause).  [assumption].
15 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
16 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
17 (all x (MaxDim(x) <-> (all y y <= x))) # label(non_clause).  [assumption].
18 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
19 (all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))) # label(non_clause).  [assumption].
20 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
21 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
22 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
23 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
24 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
25 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-MaxDim(c1).
-MinDim(c1).
Inc(c2,c3).
SC(c4,c5).
c7 != c6.
PO(c6,c7).
PP(c8,c9).
-ZEX(c10).
-ZEX(c11).
-C(c10,c11).
-ZEX(x).
-Cont(x,y) | x < y | EqDim(x,y).
-(x < x).
-(x < y) | -(y < x).
-(x < y) | -(y <= z) | x < z.
-ZEX(x) | -ZEX(y) | y = x.
-ZEX(x) | ZEX(y) | x < y.
MinDim(c12).
-EqDim(x,y) | -(x < y).
-EqDim(x,y) | -(y < x).
EqDim(x,y) | x < y | y < x.
-(x <= y) | x < y | EqDim(x,y).
x <= y | -(x < y).
x <= y | -EqDim(x,y).
-MaxDim(x) | y <= x.
MaxDim(x) | -(f1(x) <= x).
-MinDim(x) | -ZEX(x).
-MinDim(x) | -(y < x) | ZEX(y).
MinDim(x) | ZEX(x) | f2(x) < x.
MinDim(x) | ZEX(x) | -ZEX(f2(x)).
-Covers(x,y) | y < x.
-Covers(x,y) | -(y < z) | -(z < x).
Covers(x,y) | -(y < x) | y < f3(x,y).
Covers(x,y) | -(y < x) | f3(x,y) < x.
-C(x,y) | Cont(f4(x,y),x).
-C(x,y) | Cont(f4(x,y),y).
C(x,y) | -Cont(z,x) | -Cont(z,y).
ZEX(x) | Cont(x,x).
-ZEX(x) | -Cont(x,x).
-Cont(x,y) | -Cont(y,x) | y = x.
-Cont(x,y) | -Cont(y,z) | Cont(x,z).
-ZEX(x) | -Cont(y,x).
-ZEX(x) | -Cont(x,y).
-ZEX(x) | -ZEX(y) | y = x.
end_of_list.

============================== end of clauses for search =============

% There are no natural numbers in the input.

============================== DOMAIN SIZE 2 =========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=143, kept=83.
Selections=1, assignments=1, propagations=28, current_models=0.
Rewrite_terms=6, rewrite_bools=90, indexes=3.
Rules_from_neg_clauses=3, cross_offs=3.

============================== end of statistics =====================

============================== DOMAIN SIZE 3 =========================

============================== MODEL =================================

interpretation( 3, [number=1, seconds=0], [

        function(c1, [ 0 ]),

        function(c2, [ 0 ]),

        function(c3, [ 0 ]),

        function(c4, [ 0 ]),

        function(c5, [ 0 ]),

        function(c6, [ 0 ]),

        function(c7, [ 1 ]),

        function(c8, [ 0 ]),

        function(c9, [ 0 ]),

        function(c10, [ 0 ]),

        function(c11, [ 1 ]),

        function(c12, [ 1 ]),

        function(f1(_), [ 2, 0, 0 ]),

        function(f2(_), [ 1, 0, 0 ]),

        function(f3(_,_), [
			   0, 0, 0,
			   0, 0, 0,
			   0, 0, 0 ]),

        function(f4(_,_), [
			   0, 0, 0,
			   0, 1, 0,
			   0, 0, 0 ]),

        relation(MaxDim(_), [ 0, 0, 1 ]),

        relation(MinDim(_), [ 0, 1, 0 ]),

        relation(ZEX(_), [ 0, 0, 0 ]),

        relation(<(_,_), [
			   0, 0, 1,
			   1, 0, 1,
			   0, 0, 0 ]),

        relation(<=(_,_), [
			   1, 0, 1,
			   1, 1, 1,
			   0, 0, 1 ]),

        relation(C(_,_), [
			   1, 0, 1,
			   0, 1, 0,
			   1, 0, 1 ]),

        relation(Cont(_,_), [
			   1, 0, 1,
			   0, 1, 0,
			   0, 0, 1 ]),

        relation(Covers(_,_), [
			   0, 1, 0,
			   0, 0, 0,
			   1, 0, 0 ]),

        relation(EqDim(_,_), [
			   1, 0, 0,
			   0, 1, 0,
			   0, 0, 1 ]),

        relation(Inc(_,_), [
			   1, 0, 0,
			   0, 0, 0,
			   0, 0, 0 ]),

        relation(PO(_,_), [
			   0, 1, 0,
			   0, 0, 0,
			   0, 0, 0 ]),

        relation(PP(_,_), [
			   1, 0, 0,
			   0, 0, 0,
			   0, 0, 0 ]),

        relation(SC(_,_), [
			   1, 0, 0,
			   0, 0, 0,
			   0, 0, 0 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 3.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=332, kept=212.
Selections=65, assignments=70, propagations=75, current_models=1.
Rewrite_terms=62, rewrite_bools=337, indexes=16.
Rules_from_neg_clauses=3, cross_offs=14.

============================== end of statistics =====================

User_CPU=0.01, System_CPU=0.00, Wall_clock=0.

Exiting with 1 model.

Process 21095 exit (max_models) Mon Jul  9 13:05:27 2012
The process finished Mon Jul  9 13:05:27 2012
