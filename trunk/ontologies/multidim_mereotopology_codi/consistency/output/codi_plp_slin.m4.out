============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 32500 was started by torsten on stl-ws2,
Tue Aug 21 12:52:21 2012
The command was "mace4 -c -t 600 -s 60 -n 2 -N 20 -f codi/conversions/codi_plp_slin.p9 codi/conversions/codi_plp.p9 codi/conversions/codi_pl_slin.p9 codi/conversions/codi_pl.p9 codi/conversions/codi.p9 codi/conversions/codi_linear.p9 cont/conversions/cont_c.p9 codi/definitions/input/ep.p9 codi/definitions/input/epp.p9 codi/definitions/input/po.p9 codi/definitions/input/inc.p9 codi/definitions/input/sc.p9 codi/definitions/input/min_max_in_dim.p9 dim/conversions/dim_prime_linear.p9 cont/conversions/cont_basic.p9 dim/conversions/dim_prime_linear_unbounded.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file codi/conversions/codi_plp_slin.p9


formulas(sos).
(all p all q all r (Pt(p) & Pt(q) & Pt(r) & p != q & p != r & q != r & (all l (L(l) -> -Cont(p,l) | -Cont(q,l) | -Cont(r,l))) -> (exists x (Pl("l") & Cont(p,x) & Cont(q,x) & Cont(r,x))))).
(all p all q all r all x all y (Pt(p) & Pt(q) & Pt(r) & p != q & p != r & q != r & (all l (L(l) -> -Cont(p,l) | -Cont(q,l) | -Cont(r,l))) & Pl(x) & Pl(y) & Cont(p,x) & Cont(q,x) & Cont(r,x) & Cont(p,y) & Cont(q,y) & Cont(r,y) -> x = y)).
(all x (Pl(x) -> (exists p exists q exists r (Pt(p) & Pt(q) & Pt(r) & p != q & p != r & q != r & (all l (L(l) -> -Cont(p,l) | -Cont(q,l) | -Cont(r,l))) & Pl(x) & Cont(p,x) & Cont(q,x) & Cont(r,x))))).
end_of_list.

% Reading from file codi/conversions/codi_plp.p9


formulas(sos).
(all x (Pl(x) -> Max(x) & (exists y exists z (Covers(x,y) & Covers(y,z) & Pt(z))))).
end_of_list.

% Reading from file codi/conversions/codi_pl_slin.p9


formulas(sos).
(all l all m all p all q (L(l) & L(m) & Pt(p) & Pt(q) & p != q & Cont(p,l) & Cont(q,l) & Cont(p,m) & Cont(q,m) -> l = m)).
end_of_list.

% Reading from file codi/conversions/codi_pl.p9


formulas(sos).
(all x (Pt(x) <-> Max(x) & MinDim(x))).
(all x (L(x) <-> Max(x) & (all y (Pt(y) -> Covers(x,y))))).
(all x (L(x) -> (exists y exists z (Pt(y) & Pt(z) & Cont(y,x) & Cont(z,x) & y != z)))).
end_of_list.

% Reading from file codi/conversions/codi.p9


formulas(sos).
end_of_list.

% Reading from file codi/conversions/codi_linear.p9


formulas(sos).
(all x all y (Cont(x,y) -> x < y | EqDim(x,y))).
end_of_list.

% Reading from file cont/conversions/cont_c.p9


formulas(sos).
(all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))).
end_of_list.

% Reading from file codi/definitions/input/ep.p9


formulas(sos).
(all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))).
end_of_list.

% Reading from file codi/definitions/input/epp.p9


formulas(sos).
(all x all y (PP(x,y) <-> P(x,y) & x != y)).
end_of_list.

% Reading from file codi/definitions/input/po.p9


formulas(sos).
(all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))).
end_of_list.

% Reading from file codi/definitions/input/inc.p9


formulas(sos).
(all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))).
end_of_list.

% Reading from file codi/definitions/input/sc.p9


formulas(sos).
(all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))).
end_of_list.

% Reading from file codi/definitions/input/min_max_in_dim.p9


formulas(sos).
(all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))).
(all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))).
end_of_list.

% Reading from file dim/conversions/dim_prime_linear.p9


formulas(sos).
(exists x MinDim(x)).
end_of_list.

% Reading from file cont/conversions/cont_basic.p9


formulas(sos).
(all x (-ZEX(x) <-> Cont(x,x))).
(all x all y (Cont(x,y) & Cont(y,x) -> x = y)).
(all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))).
(all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
end_of_list.

% Reading from file dim/conversions/dim_prime_linear_unbounded.p9


formulas(sos).
(all x -(x < x)).
(all x all y (x < y -> -(y < x))).
(all x all y all z (x < y & y <= z -> x < z)).
(all x all y (ZEX(x) & ZEX(y) -> x = y)).
(all x all y (ZEX(x) & -ZEX(y) -> x < y)).
(all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))).
(all x all y (x <= y <-> x < y | EqDim(x,y))).
(all x (MaxDim(x) <-> (all y y <= x))).
(all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))).
(all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))).
end_of_list.

% From the command line: assign(max_seconds, 600).

% From the command line: assign(max_seconds_per, 60).
    % assign(domain_size, 2) -> assign(start_size, 2).
    % assign(domain_size, 2) -> assign(end_size, 2).

% From the command line: assign(domain_size, 2).

% From the command line: assign(end_size, 20).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all p all q all r (Pt(p) & Pt(q) & Pt(r) & p != q & p != r & q != r & (all l (L(l) -> -Cont(p,l) | -Cont(q,l) | -Cont(r,l))) -> (exists x (Pl("l") & Cont(p,x) & Cont(q,x) & Cont(r,x))))) # label(non_clause).  [assumption].
2 (all p all q all r all x all y (Pt(p) & Pt(q) & Pt(r) & p != q & p != r & q != r & (all l (L(l) -> -Cont(p,l) | -Cont(q,l) | -Cont(r,l))) & Pl(x) & Pl(y) & Cont(p,x) & Cont(q,x) & Cont(r,x) & Cont(p,y) & Cont(q,y) & Cont(r,y) -> x = y)) # label(non_clause).  [assumption].
3 (all x (Pl(x) -> (exists p exists q exists r (Pt(p) & Pt(q) & Pt(r) & p != q & p != r & q != r & (all l (L(l) -> -Cont(p,l) | -Cont(q,l) | -Cont(r,l))) & Pl(x) & Cont(p,x) & Cont(q,x) & Cont(r,x))))) # label(non_clause).  [assumption].
4 (all x (Pl(x) -> Max(x) & (exists y exists z (Covers(x,y) & Covers(y,z) & Pt(z))))) # label(non_clause).  [assumption].
5 (all l all m all p all q (L(l) & L(m) & Pt(p) & Pt(q) & p != q & Cont(p,l) & Cont(q,l) & Cont(p,m) & Cont(q,m) -> l = m)) # label(non_clause).  [assumption].
6 (all x (Pt(x) <-> Max(x) & MinDim(x))) # label(non_clause).  [assumption].
7 (all x (L(x) <-> Max(x) & (all y (Pt(y) -> Covers(x,y))))) # label(non_clause).  [assumption].
8 (all x (L(x) -> (exists y exists z (Pt(y) & Pt(z) & Cont(y,x) & Cont(z,x) & y != z)))) # label(non_clause).  [assumption].
9 (all x all y (Cont(x,y) -> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
10 (all x all y (C(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))))) # label(non_clause).  [assumption].
11 (all x all y (P(x,y) <-> Cont(x,y) & EqDim(x,y))) # label(non_clause).  [assumption].
12 (all x all y (PP(x,y) <-> P(x,y) & x != y)) # label(non_clause).  [assumption].
13 (all x all y (PO(x,y) <-> (exists z (P(z,x) & P(z,y))))) # label(non_clause).  [assumption].
14 (all x all y (Inc(x,y) <-> (exists z (z < x & Cont(z,x) & P(z,y))) | (exists z (z < y & Cont(z,y) & P(z,x))))) # label(non_clause).  [assumption].
15 (all x all y (SC(x,y) <-> (exists z (Cont(z,x) & Cont(z,y))) & (all z (Cont(z,x) & Cont(z,y) -> z < x & z < y)))) # label(non_clause).  [assumption].
16 (all x (Max(x) <-> -ZEX(x) & (all y -PP(x,y)))) # label(non_clause).  [assumption].
17 (all x (Min(x) <-> -ZEX(x) & (all y -PP(y,x)))) # label(non_clause).  [assumption].
18 (exists x MinDim(x)) # label(non_clause).  [assumption].
19 (all x (-ZEX(x) <-> Cont(x,x))) # label(non_clause).  [assumption].
20 (all x all y (Cont(x,y) & Cont(y,x) -> x = y)) # label(non_clause).  [assumption].
21 (all x all y all z (Cont(x,y) & Cont(y,z) -> Cont(x,z))) # label(non_clause).  [assumption].
22 (all x all y (ZEX(x) -> -Cont(y,x) & -Cont(x,y))) # label(non_clause).  [assumption].
23 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
24 (all x -(x < x)) # label(non_clause).  [assumption].
25 (all x all y (x < y -> -(y < x))) # label(non_clause).  [assumption].
26 (all x all y all z (x < y & y <= z -> x < z)) # label(non_clause).  [assumption].
27 (all x all y (ZEX(x) & ZEX(y) -> x = y)) # label(non_clause).  [assumption].
28 (all x all y (ZEX(x) & -ZEX(y) -> x < y)) # label(non_clause).  [assumption].
29 (all x all y (EqDim(x,y) <-> -(x < y) & -(y < x))) # label(non_clause).  [assumption].
30 (all x all y (x <= y <-> x < y | EqDim(x,y))) # label(non_clause).  [assumption].
31 (all x (MaxDim(x) <-> (all y y <= x))) # label(non_clause).  [assumption].
32 (all x (MinDim(x) <-> -ZEX(x) & (all y (y < x -> ZEX(y))))) # label(non_clause).  [assumption].
33 (all x all y (Covers(x,y) <-> y < x & (all z -(y < z & z < x)))) # label(non_clause).  [assumption].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | L(f1(x,y,z)) | Pl("l").
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | L(f1(x,y,z)) | Cont(x,f2(x,y,z)).
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | L(f1(x,y,z)) | Cont(y,f2(x,y,z)).
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | L(f1(x,y,z)) | Cont(z,f2(x,y,z)).
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(x,f1(x,y,z)) | Pl("l").
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(x,f1(x,y,z)) | Cont(x,f2(x,y,z)).
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(x,f1(x,y,z)) | Cont(y,f2(x,y,z)).
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(x,f1(x,y,z)) | Cont(z,f2(x,y,z)).
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(y,f1(x,y,z)) | Pl("l").
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(y,f1(x,y,z)) | Cont(x,f2(x,y,z)).
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(y,f1(x,y,z)) | Cont(y,f2(x,y,z)).
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(y,f1(x,y,z)) | Cont(z,f2(x,y,z)).
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(z,f1(x,y,z)) | Pl("l").
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(z,f1(x,y,z)) | Cont(x,f2(x,y,z)).
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(z,f1(x,y,z)) | Cont(y,f2(x,y,z)).
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(z,f1(x,y,z)) | Cont(z,f2(x,y,z)).
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | L(f3(x,y,z,u,w)) | -Pl(u) | -Pl(w) | -Cont(x,u) | -Cont(y,u) | -Cont(z,u) | -Cont(x,w) | -Cont(y,w) | -Cont(z,w) | w = u.
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(x,f3(x,y,z,u,w)) | -Pl(u) | -Pl(w) | -Cont(x,u) | -Cont(y,u) | -Cont(z,u) | -Cont(x,w) | -Cont(y,w) | -Cont(z,w) | w = u.
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(y,f3(x,y,z,u,w)) | -Pl(u) | -Pl(w) | -Cont(x,u) | -Cont(y,u) | -Cont(z,u) | -Cont(x,w) | -Cont(y,w) | -Cont(z,w) | w = u.
-Pt(x) | -Pt(y) | -Pt(z) | y = x | z = x | z = y | Cont(z,f3(x,y,z,u,w)) | -Pl(u) | -Pl(w) | -Cont(x,u) | -Cont(y,u) | -Cont(z,u) | -Cont(x,w) | -Cont(y,w) | -Cont(z,w) | w = u.
-Pl(x) | Pt(f4(x)).
-Pl(x) | Pt(f5(x)).
-Pl(x) | Pt(f6(x)).
-Pl(x) | f5(x) != f4(x).
-Pl(x) | f6(x) != f4(x).
-Pl(x) | f6(x) != f5(x).
-Pl(x) | -L(y) | -Cont(f4(x),y) | -Cont(f5(x),y) | -Cont(f6(x),y).
-Pl(x) | Cont(f4(x),x).
-Pl(x) | Cont(f5(x),x).
-Pl(x) | Cont(f6(x),x).
-Pl(x) | Max(x).
-Pl(x) | Covers(x,f7(x)).
-Pl(x) | Covers(f7(x),f8(x)).
-Pl(x) | Pt(f8(x)).
-L(x) | -L(y) | -Pt(z) | -Pt(u) | u = z | -Cont(z,x) | -Cont(u,x) | -Cont(z,y) | -Cont(u,y) | y = x.
-Pt(x) | Max(x).
-Pt(x) | MinDim(x).
Pt(x) | -Max(x) | -MinDim(x).
-L(x) | Max(x).
-L(x) | -Pt(y) | Covers(x,y).
L(x) | -Max(x) | Pt(f9(x)).
L(x) | -Max(x) | -Covers(x,f9(x)).
-L(x) | Pt(f10(x)).
-L(x) | Pt(f11(x)).
-L(x) | Cont(f10(x),x).
-L(x) | Cont(f11(x),x).
-L(x) | f11(x) != f10(x).
-Cont(x,y) | x < y | EqDim(x,y).
-C(x,y) | Cont(f12(x,y),x).
-C(x,y) | Cont(f12(x,y),y).
C(x,y) | -Cont(z,x) | -Cont(z,y).
-P(x,y) | Cont(x,y).
-P(x,y) | EqDim(x,y).
P(x,y) | -Cont(x,y) | -EqDim(x,y).
-PP(x,y) | P(x,y).
-PP(x,y) | y != x.
PP(x,y) | -P(x,y) | y = x.
-PO(x,y) | P(f13(x,y),x).
-PO(x,y) | P(f13(x,y),y).
PO(x,y) | -P(z,x) | -P(z,y).
-Inc(x,y) | f14(x,y) < x | f15(x,y) < y.
-Inc(x,y) | f14(x,y) < x | Cont(f15(x,y),y).
-Inc(x,y) | f14(x,y) < x | P(f15(x,y),x).
-Inc(x,y) | Cont(f14(x,y),x) | f15(x,y) < y.
-Inc(x,y) | Cont(f14(x,y),x) | Cont(f15(x,y),y).
-Inc(x,y) | Cont(f14(x,y),x) | P(f15(x,y),x).
-Inc(x,y) | P(f14(x,y),y) | f15(x,y) < y.
-Inc(x,y) | P(f14(x,y),y) | Cont(f15(x,y),y).
-Inc(x,y) | P(f14(x,y),y) | P(f15(x,y),x).
Inc(x,y) | -(z < x) | -Cont(z,x) | -P(z,y).
Inc(x,y) | -(z < y) | -Cont(z,y) | -P(z,x).
-SC(x,y) | Cont(f16(x,y),x).
-SC(x,y) | Cont(f16(x,y),y).
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | z < x.
-SC(x,y) | -Cont(z,x) | -Cont(z,y) | z < y.
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f17(x,y),x).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | Cont(f17(x,y),y).
SC(x,y) | -Cont(z,x) | -Cont(z,y) | -(f17(x,y) < x) | -(f17(x,y) < y).
-Max(x) | -ZEX(x).
-Max(x) | -PP(x,y).
Max(x) | ZEX(x) | PP(x,f18(x)).
-Min(x) | -ZEX(x).
-Min(x) | -PP(y,x).
Min(x) | ZEX(x) | PP(f19(x),x).
MinDim(c1).
ZEX(x) | Cont(x,x).
-ZEX(x) | -Cont(x,x).
-Cont(x,y) | -Cont(y,x) | y = x.
-Cont(x,y) | -Cont(y,z) | Cont(x,z).
-ZEX(x) | -Cont(y,x).
-ZEX(x) | -Cont(x,y).
-ZEX(x) | -ZEX(y) | y = x.
-(x < x).
-(x < y) | -(y < x).
-(x < y) | -(y <= z) | x < z.
-ZEX(x) | -ZEX(y) | y = x.
-ZEX(x) | ZEX(y) | x < y.
-EqDim(x,y) | -(x < y).
-EqDim(x,y) | -(y < x).
EqDim(x,y) | x < y | y < x.
-(x <= y) | x < y | EqDim(x,y).
x <= y | -(x < y).
x <= y | -EqDim(x,y).
-MaxDim(x) | y <= x.
MaxDim(x) | -(f20(x) <= x).
-MinDim(x) | -ZEX(x).
-MinDim(x) | -(y < x) | ZEX(y).
MinDim(x) | ZEX(x) | f21(x) < x.
MinDim(x) | ZEX(x) | -ZEX(f21(x)).
-Covers(x,y) | y < x.
-Covers(x,y) | -(y < z) | -(z < x).
Covers(x,y) | -(y < x) | y < f22(x,y).
Covers(x,y) | -(y < x) | f22(x,y) < x.
end_of_list.

============================== end of clauses for search =============

% There are no natural numbers in the input.

============================== DOMAIN SIZE 2 =========================

============================== MODEL =================================

interpretation( 2, [number=1, seconds=0], [

        function("l", [ 0 ]),

        function(c1, [ 0 ]),

        function(f4(_), [ 0, 0 ]),

        function(f5(_), [ 0, 0 ]),

        function(f6(_), [ 0, 0 ]),

        function(f7(_), [ 0, 0 ]),

        function(f8(_), [ 0, 0 ]),

        function(f9(_), [ 0, 0 ]),

        function(f10(_), [ 0, 0 ]),

        function(f11(_), [ 0, 0 ]),

        function(f18(_), [ 0, 0 ]),

        function(f19(_), [ 0, 0 ]),

        function(f20(_), [ 0, 0 ]),

        function(f21(_), [ 0, 0 ]),

        function(f12(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f13(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f14(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f15(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f16(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f17(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f22(_,_), [
			   0, 0,
			   0, 0 ]),

        function(f1(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        function(f2(_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        function(f3(_,_,_,_,_), [
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0,
			   0, 0 ]),

        relation(L(_), [ 0, 0 ]),

        relation(Max(_), [ 1, 0 ]),

        relation(MaxDim(_), [ 1, 0 ]),

        relation(Min(_), [ 1, 0 ]),

        relation(MinDim(_), [ 1, 0 ]),

        relation(Pl(_), [ 0, 0 ]),

        relation(Pt(_), [ 1, 0 ]),

        relation(ZEX(_), [ 0, 1 ]),

        relation(<(_,_), [
			   0, 0,
			   1, 0 ]),

        relation(<=(_,_), [
			   1, 0,
			   1, 1 ]),

        relation(C(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(Cont(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(Covers(_,_), [
			   0, 1,
			   0, 0 ]),

        relation(EqDim(_,_), [
			   1, 0,
			   0, 1 ]),

        relation(Inc(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(P(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(PO(_,_), [
			   1, 0,
			   0, 0 ]),

        relation(PP(_,_), [
			   0, 0,
			   0, 0 ]),

        relation(SC(_,_), [
			   0, 0,
			   0, 0 ])
]).

============================== end of model ==========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.02 seconds).
Ground clauses: seen=615, kept=303.
Selections=101, assignments=101, propagations=61, current_models=1.
Rewrite_terms=199, rewrite_bools=481, indexes=24.
Rules_from_neg_clauses=1, cross_offs=1.

============================== end of statistics =====================

User_CPU=0.02, System_CPU=0.01, Wall_clock=0.

Exiting with 1 model.

Process 32500 exit (max_models) Tue Aug 21 12:52:21 2012
The process finished Tue Aug 21 12:52:21 2012
