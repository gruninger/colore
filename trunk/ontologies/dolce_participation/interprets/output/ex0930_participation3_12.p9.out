============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 7034 was started by cchui on stl-ws4.mie.utoronto.ca,
Tue Oct  1 09:51:37 2013
The command was "prover9 -t 120 -f test/p9/dolce_participation.p9 test/p9/dolce_participation2ideal_cem_wmg.p9 test/p9/dolce_present.p9 test/p9/dolce_time_mereology.p9 test/p9/dolce_taxonomy.p9 test/p9/options.txt test/p9/ex0930_participation3_12.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file test/p9/dolce_participation.p9


formulas(sos).
(all x all y all t (PC(x,y,t) -> ED(x) & PD(y) & T(t))).
(all x all t (PD(x) & PRE(x,t) -> (exists y PC(y,x,t)))).
(all x (ED(x) -> (exists y exists t PC(x,y,t)))).
(all x all y all t (PC(x,y,t) -> PRE(x,t) & PRE(y,t))).
(all x all y all t (PC(x,y,t) <-> (all t1 (P(t1,t) -> PC(x,y,t1))))).
end_of_list.

% Reading from file test/p9/dolce_participation2ideal_cem_wmg.p9


formulas(sos).
(all x (point3(x) <-> T(x))).
(all x (line3(x) <-> Q(x))).
(all x all y (part3(x,y) <-> P(x,y) & T(x) & T(y))).
(all x all y (in3(x,y) <-> PRE(x,y) & T(y) & (ED(x) | PD(x) | Q(x)) | PRE(y,x) & T(x) & (ED(y) | PD(y) | Q(y)) | x = y & (ED(y) | PD(y) | Q(y) | T(y)))).
(all x (L_1(x) <-> ED(x))).
(all x (L_2(x) <-> PD(x))).
(all x (L_3(x) <-> Q(x))).
(all x (atomic_part(x) <-> AtP(x) & T(x))).
(all x all y (ppart(x,y) <-> PP(x,y) & T(x) & T(y))).
(all x all y (overlaps(x,y) <-> O(x,y) & T(x) & T(y))).
(all x all y (underlaps(x,y) <-> U(x,y) & T(x) & T(y))).
(all x all y (disjoint(x,y) <-> DJ(x,y) & T(x) & T(y))).
(all x all y all z (sum(x,y,z) <-> SUM(z,x,y) & T(z) & T(x) & T(y))).
end_of_list.

% Reading from file test/p9/dolce_present.p9


formulas(sos).
(all x (ED(x) | PD(x) | Q(x) -> (exists t PRE(x,t)))).
(all x all t all t1 (PRE(x,t) & P(t1,t) -> PRE(x,t1))).
(all x all t (PRE(x,t) -> T(t))).
(all x all t all t1 all t2 (PRE(x,t1) & PRE(x,t2) & SUM(t,t1,t2) -> PRE(x,t))).
end_of_list.

% Reading from file test/p9/dolce_time_mereology.p9


formulas(sos).
(all x all y (P(x,y) -> T(y) & T(y))).
(all x all y (P(x,y) -> (T(x) <-> T(y)))).
(all x all y (T(x) -> P(x,x))).
(all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)).
(all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & DJ(z,y) & T(z))))).
(all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))).
(all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))).
(all x all y (T(x) & T(y) -> (DJ(x,y) <-> -O(x,y)))).
(all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))).
(all x (AtP(x) <-> T(x) & (all y (T(y) & P(y,x) -> y = x)))).
(all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))).
(all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))).
(all x all y all z (T(x) & T(y) & T(z) -> (SUM(z,x,y) <-> (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y))))))).
end_of_list.

% Reading from file test/p9/dolce_taxonomy.p9


formulas(sos).
(all x (ED(x) | PD(x) | Q(x) | AB(x) -> PT(x))).
(all x (PED(x) | NPED(x) | AS(x) -> ED(x))).
(all x (EV(x) | STV(x) -> PD(x))).
(all x (TQ(x) | PQ(x) | AQ(x) -> Q(x))).
(all x (R(x) -> AB(x))).
(all x (M(x) | F(x) | POB(x) -> PED(x))).
(all x (NPOB(x) -> NPED(x))).
(all x (ACH(x) | ACC(x) -> EV(x))).
(all x (ST(x) | PRO(x) -> STV(x))).
(all x (TL(x) -> TQ(x))).
(all x (SL(x) -> PQ(x))).
(all x (TR(x) | PR(x) | AR(x) -> R(x))).
(all x (APO(x) | NAPO(x) -> POB(x))).
(all x (MOB(x) | SOB(x) -> NPOB(x))).
(all x (T(x) -> TR(x))).
(all x (S(x) -> PR(x))).
(all x (ASO(x) | NASO(x) -> SOB(x))).
(all x (SAG(x) | SC(x) -> ASO(x))).
(all x (PT(x) <-> ED(x) | PD(x) | Q(x) | AB(x))).
(all x (ED(x) -> -PD(x) & -Q(x) & -AB(x))).
(all x (PD(x) -> -Q(x) & -AB(x))).
(all x (Q(x) -> -AB(x))).
(all x (ED(x) <-> PED(x) | NPED(x) | AS(x))).
(all x (PED(x) -> -NPED(x) & -AS(x))).
(all x (NPED(x) -> -AS(x))).
(all x (PD(x) <-> EV(x) | STV(x))).
(all x (EV(x) -> -STV(x))).
(all x (Q(x) <-> TQ(x) | PQ(x) | AQ(x))).
(all x (TQ(x) -> -PQ(x) & -AQ(x))).
(all x (PQ(x) -> -AQ(x))).
(all x (PED(x) <-> M(x) | F(x) | POB(x))).
(all x (M(x) -> -F(x) & -POB(x))).
(all x (F(x) -> -POB(x))).
(all x (EV(x) <-> ACH(x) | ACC(x))).
(all x (ACH(x) -> -ACC(x))).
(all x (STV(x) <-> ST(x) | PRO(x))).
(all x (ST(x) -> -PRO(x))).
(all x (R(x) <-> TR(x) | PR(x) | AR(x))).
(all x (TR(x) -> -PR(x) & -AR(x))).
(all x (PR(x) -> -AR(x))).
(all x (POB(x) <-> APO(x) | NAPO(x))).
(all x (APO(x) -> -NAPO(x))).
(all x (NPOB(x) <-> MOB(x) | SOB(x))).
(all x (MOB(x) -> -SOB(x))).
(all x (SOB(x) <-> ASO(x) | NASO(x))).
(all x (ASO(x) -> -NASO(x))).
(all x (ASO(x) <-> SAG(x) | SC(x))).
(all x (SAG(x) -> -SC(x))).
end_of_list.

% Reading from file test/p9/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file test/p9/ex0930_participation3_12.p9


formulas(goals).
(all x all y (in3(x,y) & point3(x) & point3(y) -> x = y)).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 120).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y all t (PC(x,y,t) -> ED(x) & PD(y) & T(t))) # label(non_clause).  [assumption].
2 (all x all t (PD(x) & PRE(x,t) -> (exists y PC(y,x,t)))) # label(non_clause).  [assumption].
3 (all x (ED(x) -> (exists y exists t PC(x,y,t)))) # label(non_clause).  [assumption].
4 (all x all y all t (PC(x,y,t) -> PRE(x,t) & PRE(y,t))) # label(non_clause).  [assumption].
5 (all x all y all t (PC(x,y,t) <-> (all t1 (P(t1,t) -> PC(x,y,t1))))) # label(non_clause).  [assumption].
6 (all x (point3(x) <-> T(x))) # label(non_clause).  [assumption].
7 (all x (line3(x) <-> Q(x))) # label(non_clause).  [assumption].
8 (all x all y (part3(x,y) <-> P(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
9 (all x all y (in3(x,y) <-> PRE(x,y) & T(y) & (ED(x) | PD(x) | Q(x)) | PRE(y,x) & T(x) & (ED(y) | PD(y) | Q(y)) | x = y & (ED(y) | PD(y) | Q(y) | T(y)))) # label(non_clause).  [assumption].
10 (all x (L_1(x) <-> ED(x))) # label(non_clause).  [assumption].
11 (all x (L_2(x) <-> PD(x))) # label(non_clause).  [assumption].
12 (all x (L_3(x) <-> Q(x))) # label(non_clause).  [assumption].
13 (all x (atomic_part(x) <-> AtP(x) & T(x))) # label(non_clause).  [assumption].
14 (all x all y (ppart(x,y) <-> PP(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
15 (all x all y (overlaps(x,y) <-> O(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
16 (all x all y (underlaps(x,y) <-> U(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
17 (all x all y (disjoint(x,y) <-> DJ(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
18 (all x all y all z (sum(x,y,z) <-> SUM(z,x,y) & T(z) & T(x) & T(y))) # label(non_clause).  [assumption].
19 (all x (ED(x) | PD(x) | Q(x) -> (exists t PRE(x,t)))) # label(non_clause).  [assumption].
20 (all x all t all t1 (PRE(x,t) & P(t1,t) -> PRE(x,t1))) # label(non_clause).  [assumption].
21 (all x all t (PRE(x,t) -> T(t))) # label(non_clause).  [assumption].
22 (all x all t all t1 all t2 (PRE(x,t1) & PRE(x,t2) & SUM(t,t1,t2) -> PRE(x,t))) # label(non_clause).  [assumption].
23 (all x all y (P(x,y) -> T(y) & T(y))) # label(non_clause).  [assumption].
24 (all x all y (P(x,y) -> (T(x) <-> T(y)))) # label(non_clause).  [assumption].
25 (all x all y (T(x) -> P(x,x))) # label(non_clause).  [assumption].
26 (all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)) # label(non_clause).  [assumption].
27 (all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))) # label(non_clause).  [assumption].
28 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))) # label(non_clause).  [assumption].
29 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & DJ(z,y) & T(z))))) # label(non_clause).  [assumption].
30 (all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))) # label(non_clause).  [assumption].
31 (all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))) # label(non_clause).  [assumption].
32 (all x all y (T(x) & T(y) -> (DJ(x,y) <-> -O(x,y)))) # label(non_clause).  [assumption].
33 (all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))) # label(non_clause).  [assumption].
34 (all x (AtP(x) <-> T(x) & (all y (T(y) & P(y,x) -> y = x)))) # label(non_clause).  [assumption].
35 (all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))) # label(non_clause).  [assumption].
36 (all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))) # label(non_clause).  [assumption].
37 (all x all y all z (T(x) & T(y) & T(z) -> (SUM(z,x,y) <-> (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y))))))) # label(non_clause).  [assumption].
38 (all x (ED(x) | PD(x) | Q(x) | AB(x) -> PT(x))) # label(non_clause).  [assumption].
39 (all x (PED(x) | NPED(x) | AS(x) -> ED(x))) # label(non_clause).  [assumption].
40 (all x (EV(x) | STV(x) -> PD(x))) # label(non_clause).  [assumption].
41 (all x (TQ(x) | PQ(x) | AQ(x) -> Q(x))) # label(non_clause).  [assumption].
42 (all x (R(x) -> AB(x))) # label(non_clause).  [assumption].
43 (all x (M(x) | F(x) | POB(x) -> PED(x))) # label(non_clause).  [assumption].
44 (all x (NPOB(x) -> NPED(x))) # label(non_clause).  [assumption].
45 (all x (ACH(x) | ACC(x) -> EV(x))) # label(non_clause).  [assumption].
46 (all x (ST(x) | PRO(x) -> STV(x))) # label(non_clause).  [assumption].
47 (all x (TL(x) -> TQ(x))) # label(non_clause).  [assumption].
48 (all x (SL(x) -> PQ(x))) # label(non_clause).  [assumption].
49 (all x (TR(x) | PR(x) | AR(x) -> R(x))) # label(non_clause).  [assumption].
50 (all x (APO(x) | NAPO(x) -> POB(x))) # label(non_clause).  [assumption].
51 (all x (MOB(x) | SOB(x) -> NPOB(x))) # label(non_clause).  [assumption].
52 (all x (T(x) -> TR(x))) # label(non_clause).  [assumption].
53 (all x (S(x) -> PR(x))) # label(non_clause).  [assumption].
54 (all x (ASO(x) | NASO(x) -> SOB(x))) # label(non_clause).  [assumption].
55 (all x (SAG(x) | SC(x) -> ASO(x))) # label(non_clause).  [assumption].
56 (all x (PT(x) <-> ED(x) | PD(x) | Q(x) | AB(x))) # label(non_clause).  [assumption].
57 (all x (ED(x) -> -PD(x) & -Q(x) & -AB(x))) # label(non_clause).  [assumption].
58 (all x (PD(x) -> -Q(x) & -AB(x))) # label(non_clause).  [assumption].
59 (all x (Q(x) -> -AB(x))) # label(non_clause).  [assumption].
60 (all x (ED(x) <-> PED(x) | NPED(x) | AS(x))) # label(non_clause).  [assumption].
61 (all x (PED(x) -> -NPED(x) & -AS(x))) # label(non_clause).  [assumption].
62 (all x (NPED(x) -> -AS(x))) # label(non_clause).  [assumption].
63 (all x (PD(x) <-> EV(x) | STV(x))) # label(non_clause).  [assumption].
64 (all x (EV(x) -> -STV(x))) # label(non_clause).  [assumption].
65 (all x (Q(x) <-> TQ(x) | PQ(x) | AQ(x))) # label(non_clause).  [assumption].
66 (all x (TQ(x) -> -PQ(x) & -AQ(x))) # label(non_clause).  [assumption].
67 (all x (PQ(x) -> -AQ(x))) # label(non_clause).  [assumption].
68 (all x (PED(x) <-> M(x) | F(x) | POB(x))) # label(non_clause).  [assumption].
69 (all x (M(x) -> -F(x) & -POB(x))) # label(non_clause).  [assumption].
70 (all x (F(x) -> -POB(x))) # label(non_clause).  [assumption].
71 (all x (EV(x) <-> ACH(x) | ACC(x))) # label(non_clause).  [assumption].
72 (all x (ACH(x) -> -ACC(x))) # label(non_clause).  [assumption].
73 (all x (STV(x) <-> ST(x) | PRO(x))) # label(non_clause).  [assumption].
74 (all x (ST(x) -> -PRO(x))) # label(non_clause).  [assumption].
75 (all x (R(x) <-> TR(x) | PR(x) | AR(x))) # label(non_clause).  [assumption].
76 (all x (TR(x) -> -PR(x) & -AR(x))) # label(non_clause).  [assumption].
77 (all x (PR(x) -> -AR(x))) # label(non_clause).  [assumption].
78 (all x (POB(x) <-> APO(x) | NAPO(x))) # label(non_clause).  [assumption].
79 (all x (APO(x) -> -NAPO(x))) # label(non_clause).  [assumption].
80 (all x (NPOB(x) <-> MOB(x) | SOB(x))) # label(non_clause).  [assumption].
81 (all x (MOB(x) -> -SOB(x))) # label(non_clause).  [assumption].
82 (all x (SOB(x) <-> ASO(x) | NASO(x))) # label(non_clause).  [assumption].
83 (all x (ASO(x) -> -NASO(x))) # label(non_clause).  [assumption].
84 (all x (ASO(x) <-> SAG(x) | SC(x))) # label(non_clause).  [assumption].
85 (all x (SAG(x) -> -SC(x))) # label(non_clause).  [assumption].
86 (all x all y (in3(x,y) & point3(x) & point3(y) -> x = y)) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating point3/1
87 point3(x) | -T(x).  [clausify(6)].
88 -point3(x) | T(x).  [clausify(6)].
89 point3(c1).  [deny(86)].
Derived: T(c1).  [resolve(89,a,88,a)].
90 point3(c2).  [deny(86)].
Derived: T(c2).  [resolve(90,a,88,a)].

Eliminating line3/1
91 line3(x) | -Q(x).  [clausify(7)].
92 -line3(x) | Q(x).  [clausify(7)].

Eliminating part3/2
93 part3(x,y) | -P(x,y) | -T(x) | -T(y).  [clausify(8)].
94 -part3(x,y) | P(x,y).  [clausify(8)].
95 -part3(x,y) | T(x).  [clausify(8)].
96 -part3(x,y) | T(y).  [clausify(8)].

Eliminating in3/2
97 in3(x,y) | -PRE(x,y) | -T(y) | -ED(x).  [clausify(9)].
98 -in3(x,y) | PRE(x,y) | PRE(y,x) | y = x.  [clausify(9)].
99 -in3(x,y) | PRE(x,y) | T(x) | y = x.  [clausify(9)].
100 -in3(x,y) | PRE(x,y) | ED(y) | PD(y) | Q(y) | y = x.  [clausify(9)].
101 -in3(x,y) | T(y) | PRE(y,x) | y = x.  [clausify(9)].
102 -in3(x,y) | T(y) | T(x) | y = x.  [clausify(9)].
103 -in3(x,y) | T(y) | ED(y) | PD(y) | Q(y).  [clausify(9)].
104 -in3(x,y) | ED(x) | PD(x) | Q(x) | PRE(y,x) | y = x.  [clausify(9)].
105 -in3(x,y) | ED(x) | PD(x) | Q(x) | T(x) | y = x.  [clausify(9)].
106 -in3(x,y) | ED(x) | PD(x) | Q(x) | ED(y) | PD(y) | Q(y) | y = x.  [clausify(9)].
107 in3(x,y) | -PRE(x,y) | -T(y) | -PD(x).  [clausify(9)].
108 in3(x,y) | -PRE(x,y) | -T(y) | -Q(x).  [clausify(9)].
109 in3(x,y) | -PRE(y,x) | -T(x) | -ED(y).  [clausify(9)].
110 in3(x,y) | -PRE(y,x) | -T(x) | -PD(y).  [clausify(9)].
111 in3(x,y) | -PRE(y,x) | -T(x) | -Q(y).  [clausify(9)].
112 in3(x,y) | y != x | -ED(y).  [clausify(9)].
113 in3(x,y) | y != x | -PD(y).  [clausify(9)].
114 in3(x,y) | y != x | -Q(y).  [clausify(9)].
115 in3(x,y) | y != x | -T(y).  [clausify(9)].
116 in3(c1,c2).  [deny(86)].
Derived: PRE(c1,c2) | PRE(c2,c1) | c2 = c1.  [resolve(116,a,98,a)].
Derived: PRE(c1,c2) | ED(c2) | PD(c2) | Q(c2) | c2 = c1.  [resolve(116,a,100,a)].
Derived: ED(c1) | PD(c1) | Q(c1) | PRE(c2,c1) | c2 = c1.  [resolve(116,a,104,a)].
Derived: ED(c1) | PD(c1) | Q(c1) | ED(c2) | PD(c2) | Q(c2) | c2 = c1.  [resolve(116,a,106,a)].

Eliminating L_1/1
117 L_1(x) | -ED(x).  [clausify(10)].
118 -L_1(x) | ED(x).  [clausify(10)].

Eliminating L_2/1
119 L_2(x) | -PD(x).  [clausify(11)].
120 -L_2(x) | PD(x).  [clausify(11)].

Eliminating L_3/1
121 L_3(x) | -Q(x).  [clausify(12)].
122 -L_3(x) | Q(x).  [clausify(12)].

Eliminating atomic_part/1
123 atomic_part(x) | -AtP(x) | -T(x).  [clausify(13)].
124 -atomic_part(x) | AtP(x).  [clausify(13)].
125 -atomic_part(x) | T(x).  [clausify(13)].

Eliminating ppart/2
126 ppart(x,y) | -PP(x,y) | -T(x) | -T(y).  [clausify(14)].
127 -ppart(x,y) | PP(x,y).  [clausify(14)].
128 -ppart(x,y) | T(x).  [clausify(14)].
129 -ppart(x,y) | T(y).  [clausify(14)].

Eliminating overlaps/2
130 overlaps(x,y) | -O(x,y) | -T(x) | -T(y).  [clausify(15)].
131 -overlaps(x,y) | O(x,y).  [clausify(15)].
132 -overlaps(x,y) | T(x).  [clausify(15)].
133 -overlaps(x,y) | T(y).  [clausify(15)].

Eliminating underlaps/2
134 underlaps(x,y) | -U(x,y) | -T(x) | -T(y).  [clausify(16)].
135 -underlaps(x,y) | U(x,y).  [clausify(16)].
136 -underlaps(x,y) | T(x).  [clausify(16)].
137 -underlaps(x,y) | T(y).  [clausify(16)].

Eliminating disjoint/2
138 disjoint(x,y) | -DJ(x,y) | -T(x) | -T(y).  [clausify(17)].
139 -disjoint(x,y) | DJ(x,y).  [clausify(17)].
140 -disjoint(x,y) | T(x).  [clausify(17)].
141 -disjoint(x,y) | T(y).  [clausify(17)].

Eliminating sum/3
142 sum(x,y,z) | -SUM(z,x,y) | -T(z) | -T(x) | -T(y).  [clausify(18)].
143 -sum(x,y,z) | SUM(z,x,y).  [clausify(18)].
144 -sum(x,y,z) | T(z).  [clausify(18)].
145 -sum(x,y,z) | T(x).  [clausify(18)].
146 -sum(x,y,z) | T(y).  [clausify(18)].

Eliminating SUM/3
147 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | T(f13(x,y,z)).  [clausify(37)].
148 -PRE(x,y) | -PRE(x,z) | -SUM(u,y,z) | PRE(x,u).  [clausify(22)].
149 -T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [clausify(37)].
150 -T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | O(u,z) | -O(u,x).  [clausify(37)].
151 -T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | O(u,z) | -O(u,y).  [clausify(37)].
Derived: -T(x) | -T(y) | -T(z) | T(f13(x,y,z)) | -PRE(u,x) | -PRE(u,y) | PRE(u,z).  [resolve(147,d,148,c)].
Derived: -T(x) | -T(y) | -T(z) | T(f13(x,y,z)) | -T(x) | -T(y) | -T(z) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [resolve(147,d,149,d)].
Derived: -T(x) | -T(y) | -T(z) | T(f13(x,y,z)) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,x).  [resolve(147,d,150,d)].
Derived: -T(x) | -T(y) | -T(z) | T(f13(x,y,z)) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,y).  [resolve(147,d,151,d)].
152 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y).  [clausify(37)].
Derived: -T(x) | -T(y) | -T(z) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y) | -PRE(u,x) | -PRE(u,y) | PRE(u,z).  [resolve(152,d,148,c)].
Derived: -T(x) | -T(y) | -T(z) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [resolve(152,d,149,d)].
Derived: -T(x) | -T(y) | -T(z) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,x).  [resolve(152,d,150,d)].
Derived: -T(x) | -T(y) | -T(z) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,y).  [resolve(152,d,151,d)].
153 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x).  [clausify(37)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x) | -PRE(u,x) | -PRE(u,y) | PRE(u,z).  [resolve(153,d,148,c)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x) | -T(x) | -T(y) | -T(z) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [resolve(153,d,149,d)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,x).  [resolve(153,d,150,d)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,y).  [resolve(153,d,151,d)].
154 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y).  [clausify(37)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y) | -PRE(u,x) | -PRE(u,y) | PRE(u,z).  [resolve(154,d,148,c)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [resolve(154,d,149,d)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,x).  [resolve(154,d,150,d)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,y).  [resolve(154,d,151,d)].

Eliminating DJ/2
155 -T(x) | -T(y) | -DJ(x,y) | -O(x,y).  [clausify(32)].
156 -T(x) | -T(y) | P(x,y) | DJ(f7(x,y),y).  [clausify(29)].
Derived: -T(f7(x,y)) | -T(y) | -O(f7(x,y),y) | -T(x) | -T(y) | P(x,y).  [resolve(155,c,156,d)].
157 -T(x) | -T(y) | DJ(x,y) | O(x,y).  [clausify(32)].

Eliminating U/2
158 -T(x) | -T(y) | U(x,y) | -P(x,z) | -P(y,z) | -T(z).  [clausify(33)].
159 -T(x) | -T(y) | -U(x,y) | P(x,f9(x,y)).  [clausify(33)].
160 -T(x) | -T(y) | -U(x,y) | P(y,f9(x,y)).  [clausify(33)].
161 -T(x) | -T(y) | -U(x,y) | T(f9(x,y)).  [clausify(33)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | P(x,f9(x,y)).  [resolve(158,c,159,c)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | P(y,f9(x,y)).  [resolve(158,c,160,c)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | T(f9(x,y)).  [resolve(158,c,161,c)].
162 -T(x) | -T(y) | -U(x,y) | T(f11(x,y)).  [clausify(35)].
Derived: -T(x) | -T(y) | T(f11(x,y)) | -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z).  [resolve(162,c,158,c)].
163 -T(x) | -T(y) | -U(x,y) | -T(z) | -O(z,f11(x,y)) | O(z,x) | O(z,y).  [clausify(35)].
Derived: -T(x) | -T(y) | -T(z) | -O(z,f11(x,y)) | O(z,x) | O(z,y) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(163,c,158,c)].
164 -T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f11(x,y)) | -O(z,x).  [clausify(35)].
Derived: -T(x) | -T(y) | -T(z) | O(z,f11(x,y)) | -O(z,x) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(164,c,158,c)].
165 -T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f11(x,y)) | -O(z,y).  [clausify(35)].
Derived: -T(x) | -T(y) | -T(z) | O(z,f11(x,y)) | -O(z,y) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(165,c,158,c)].

Eliminating AtP/1
166 AtP(x) | -T(x) | T(f10(x)).  [clausify(34)].
167 -AtP(x) | T(x).  [clausify(34)].
168 -AtP(x) | -T(y) | -P(y,x) | y = x.  [clausify(34)].
Derived: -T(x) | T(f10(x)) | -T(y) | -P(y,x) | y = x.  [resolve(166,a,168,a)].
169 AtP(x) | -T(x) | P(f10(x),x).  [clausify(34)].
Derived: -T(x) | P(f10(x),x) | -T(y) | -P(y,x) | y = x.  [resolve(169,a,168,a)].
170 AtP(x) | -T(x) | f10(x) != x.  [clausify(34)].
Derived: -T(x) | f10(x) != x | -T(y) | -P(y,x) | y = x.  [resolve(170,a,168,a)].

Eliminating PT/1
171 -PT(x) | ED(x) | PD(x) | Q(x) | AB(x).  [clausify(56)].
172 -ED(x) | PT(x).  [clausify(38)].
173 -PD(x) | PT(x).  [clausify(38)].
174 -Q(x) | PT(x).  [clausify(38)].
175 -AB(x) | PT(x).  [clausify(38)].
176 PT(x) | -ED(x).  [clausify(56)].
177 PT(x) | -PD(x).  [clausify(56)].
178 PT(x) | -Q(x).  [clausify(56)].
179 PT(x) | -AB(x).  [clausify(56)].

Eliminating PED/1
180 -M(x) | PED(x).  [clausify(43)].
181 -PED(x) | ED(x).  [clausify(39)].
Derived: -M(x) | ED(x).  [resolve(180,b,181,a)].
182 -F(x) | PED(x).  [clausify(43)].
Derived: -F(x) | ED(x).  [resolve(182,b,181,a)].
183 -POB(x) | PED(x).  [clausify(43)].
Derived: -POB(x) | ED(x).  [resolve(183,b,181,a)].
184 -ED(x) | PED(x) | NPED(x) | AS(x).  [clausify(60)].
185 ED(x) | -PED(x).  [clausify(60)].
186 -PED(x) | -NPED(x).  [clausify(61)].
Derived: -NPED(x) | -M(x).  [resolve(186,a,180,b)].
Derived: -NPED(x) | -F(x).  [resolve(186,a,182,b)].
Derived: -NPED(x) | -POB(x).  [resolve(186,a,183,b)].
187 -PED(x) | -AS(x).  [clausify(61)].
Derived: -AS(x) | -M(x).  [resolve(187,a,180,b)].
Derived: -AS(x) | -F(x).  [resolve(187,a,182,b)].
Derived: -AS(x) | -POB(x).  [resolve(187,a,183,b)].
188 -PED(x) | M(x) | F(x) | POB(x).  [clausify(68)].
Derived: M(x) | F(x) | POB(x) | -ED(x) | NPED(x) | AS(x).  [resolve(188,a,184,b)].
189 PED(x) | -M(x).  [clausify(68)].
190 PED(x) | -F(x).  [clausify(68)].
191 PED(x) | -POB(x).  [clausify(68)].

Eliminating NPED/1
192 -NPOB(x) | NPED(x).  [clausify(44)].
193 -NPED(x) | ED(x).  [clausify(39)].
Derived: -NPOB(x) | ED(x).  [resolve(192,b,193,a)].
194 ED(x) | -NPED(x).  [clausify(60)].
195 -NPED(x) | -AS(x).  [clausify(62)].
Derived: -AS(x) | -NPOB(x).  [resolve(195,a,192,b)].
196 -NPED(x) | -M(x).  [resolve(186,a,180,b)].
Derived: -M(x) | -NPOB(x).  [resolve(196,a,192,b)].
197 -NPED(x) | -F(x).  [resolve(186,a,182,b)].
Derived: -F(x) | -NPOB(x).  [resolve(197,a,192,b)].
198 -NPED(x) | -POB(x).  [resolve(186,a,183,b)].
Derived: -POB(x) | -NPOB(x).  [resolve(198,a,192,b)].
199 M(x) | F(x) | POB(x) | -ED(x) | NPED(x) | AS(x).  [resolve(188,a,184,b)].

Eliminating AS/1

Eliminating EV/1
200 -ACH(x) | EV(x).  [clausify(45)].
201 -EV(x) | PD(x).  [clausify(40)].
Derived: -ACH(x) | PD(x).  [resolve(200,b,201,a)].
202 -ACC(x) | EV(x).  [clausify(45)].
Derived: -ACC(x) | PD(x).  [resolve(202,b,201,a)].
203 -PD(x) | EV(x) | STV(x).  [clausify(63)].
204 PD(x) | -EV(x).  [clausify(63)].
205 -EV(x) | -STV(x).  [clausify(64)].
Derived: -STV(x) | -ACH(x).  [resolve(205,a,200,b)].
Derived: -STV(x) | -ACC(x).  [resolve(205,a,202,b)].
206 -EV(x) | ACH(x) | ACC(x).  [clausify(71)].
Derived: ACH(x) | ACC(x) | -PD(x) | STV(x).  [resolve(206,a,203,b)].
207 EV(x) | -ACH(x).  [clausify(71)].
208 EV(x) | -ACC(x).  [clausify(71)].

Eliminating STV/1
209 -ST(x) | STV(x).  [clausify(46)].
210 -STV(x) | PD(x).  [clausify(40)].
Derived: -ST(x) | PD(x).  [resolve(209,b,210,a)].
211 -PRO(x) | STV(x).  [clausify(46)].
Derived: -PRO(x) | PD(x).  [resolve(211,b,210,a)].
212 PD(x) | -STV(x).  [clausify(63)].
213 -STV(x) | ST(x) | PRO(x).  [clausify(73)].
214 STV(x) | -ST(x).  [clausify(73)].
215 STV(x) | -PRO(x).  [clausify(73)].
216 -STV(x) | -ACH(x).  [resolve(205,a,200,b)].
Derived: -ACH(x) | -ST(x).  [resolve(216,a,209,b)].
Derived: -ACH(x) | -PRO(x).  [resolve(216,a,211,b)].
217 -STV(x) | -ACC(x).  [resolve(205,a,202,b)].
Derived: -ACC(x) | -ST(x).  [resolve(217,a,209,b)].
Derived: -ACC(x) | -PRO(x).  [resolve(217,a,211,b)].
218 ACH(x) | ACC(x) | -PD(x) | STV(x).  [resolve(206,a,203,b)].
Derived: ACH(x) | ACC(x) | -PD(x) | ST(x) | PRO(x).  [resolve(218,d,213,a)].

Eliminating TQ/1
219 -TL(x) | TQ(x).  [clausify(47)].
220 -TQ(x) | Q(x).  [clausify(41)].
Derived: -TL(x) | Q(x).  [resolve(219,b,220,a)].
221 -Q(x) | TQ(x) | PQ(x) | AQ(x).  [clausify(65)].
222 Q(x) | -TQ(x).  [clausify(65)].
223 -TQ(x) | -PQ(x).  [clausify(66)].
Derived: -PQ(x) | -TL(x).  [resolve(223,a,219,b)].
224 -TQ(x) | -AQ(x).  [clausify(66)].
Derived: -AQ(x) | -TL(x).  [resolve(224,a,219,b)].

Eliminating PQ/1
225 -SL(x) | PQ(x).  [clausify(48)].
226 -PQ(x) | Q(x).  [clausify(41)].
Derived: -SL(x) | Q(x).  [resolve(225,b,226,a)].
227 Q(x) | -PQ(x).  [clausify(65)].
228 -PQ(x) | -AQ(x).  [clausify(67)].
Derived: -AQ(x) | -SL(x).  [resolve(228,a,225,b)].
229 -PQ(x) | -TL(x).  [resolve(223,a,219,b)].
Derived: -TL(x) | -SL(x).  [resolve(229,a,225,b)].

Eliminating AQ/1

Eliminating R/1
230 -TR(x) | R(x).  [clausify(49)].
231 -R(x) | AB(x).  [clausify(42)].
Derived: -TR(x) | AB(x).  [resolve(230,b,231,a)].
232 -PR(x) | R(x).  [clausify(49)].
Derived: -PR(x) | AB(x).  [resolve(232,b,231,a)].
233 -AR(x) | R(x).  [clausify(49)].
Derived: -AR(x) | AB(x).  [resolve(233,b,231,a)].
234 -R(x) | TR(x) | PR(x) | AR(x).  [clausify(75)].
235 R(x) | -TR(x).  [clausify(75)].
236 R(x) | -PR(x).  [clausify(75)].
237 R(x) | -AR(x).  [clausify(75)].

Eliminating APO/1
238 -POB(x) | APO(x) | NAPO(x).  [clausify(78)].
239 -APO(x) | POB(x).  [clausify(50)].
240 POB(x) | -APO(x).  [clausify(78)].
241 -APO(x) | -NAPO(x).  [clausify(79)].

Eliminating NAPO/1

Eliminating MOB/1
242 -NPOB(x) | MOB(x) | SOB(x).  [clausify(80)].
243 -MOB(x) | NPOB(x).  [clausify(51)].
244 NPOB(x) | -MOB(x).  [clausify(80)].
245 -MOB(x) | -SOB(x).  [clausify(81)].

Eliminating SOB/1
246 -ASO(x) | SOB(x).  [clausify(54)].
247 -SOB(x) | NPOB(x).  [clausify(51)].
Derived: -ASO(x) | NPOB(x).  [resolve(246,b,247,a)].
248 -NASO(x) | SOB(x).  [clausify(54)].
Derived: -NASO(x) | NPOB(x).  [resolve(248,b,247,a)].
249 NPOB(x) | -SOB(x).  [clausify(80)].
250 -SOB(x) | ASO(x) | NASO(x).  [clausify(82)].
251 SOB(x) | -ASO(x).  [clausify(82)].
252 SOB(x) | -NASO(x).  [clausify(82)].

Eliminating TR/1
253 -TR(x) | -PR(x).  [clausify(76)].
254 -T(x) | TR(x).  [clausify(52)].
Derived: -PR(x) | -T(x).  [resolve(253,a,254,b)].
255 -TR(x) | -AR(x).  [clausify(76)].
Derived: -AR(x) | -T(x).  [resolve(255,a,254,b)].
256 -TR(x) | AB(x).  [resolve(230,b,231,a)].
Derived: AB(x) | -T(x).  [resolve(256,a,254,b)].

Eliminating S/1

Eliminating SAG/1
257 -ASO(x) | SAG(x) | SC(x).  [clausify(84)].
258 -SAG(x) | ASO(x).  [clausify(55)].
259 ASO(x) | -SAG(x).  [clausify(84)].
260 -SAG(x) | -SC(x).  [clausify(85)].

Eliminating SC/1

Eliminating AB/1
261 -PR(x) | AB(x).  [resolve(232,b,231,a)].
262 -ED(x) | -AB(x).  [clausify(57)].
263 -PD(x) | -AB(x).  [clausify(58)].
264 -Q(x) | -AB(x).  [clausify(59)].
Derived: -PR(x) | -ED(x).  [resolve(261,b,262,b)].
Derived: -PR(x) | -PD(x).  [resolve(261,b,263,b)].
Derived: -PR(x) | -Q(x).  [resolve(261,b,264,b)].
265 -AR(x) | AB(x).  [resolve(233,b,231,a)].
Derived: -AR(x) | -ED(x).  [resolve(265,b,262,b)].
Derived: -AR(x) | -PD(x).  [resolve(265,b,263,b)].
Derived: -AR(x) | -Q(x).  [resolve(265,b,264,b)].
266 AB(x) | -T(x).  [resolve(256,a,254,b)].
Derived: -T(x) | -ED(x).  [resolve(266,a,262,b)].
Derived: -T(x) | -PD(x).  [resolve(266,a,263,b)].
Derived: -T(x) | -Q(x).  [resolve(266,a,264,b)].

Eliminating M/1

Eliminating F/1

Eliminating ACH/1
267 ACH(x) | ACC(x) | -PD(x) | ST(x) | PRO(x).  [resolve(218,d,213,a)].
268 -ACH(x) | -ACC(x).  [clausify(72)].
269 -ACH(x) | PD(x).  [resolve(200,b,201,a)].
270 -ACH(x) | -ST(x).  [resolve(216,a,209,b)].
271 -ACH(x) | -PRO(x).  [resolve(216,a,211,b)].

Eliminating ST/1

Eliminating PR/1

Eliminating ASO/1

Eliminating POB/1

Eliminating NPOB/1
272 -NASO(x) | NPOB(x).  [resolve(248,b,247,a)].
273 -NPOB(x) | ED(x).  [resolve(192,b,193,a)].
Derived: -NASO(x) | ED(x).  [resolve(272,b,273,a)].

Eliminating ACC/1

Eliminating PRO/1

Eliminating TL/1

Eliminating SL/1

Eliminating AR/1

Eliminating NASO/1

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, T, ED, PD, Q, O, P, PRE, PP, PC ]).
Function symbol precedence:  function_order([ c1, c2, f1, f6, f7, f8, f9, f11, f12, f2, f3, f5, f10, f4, f13 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.10 seconds.

============================== PROOF =================================

% Proof 1 at 0.11 (+ 0.01) seconds.
% Length of proof is 39.
% Level of proof is 8.
% Maximum clause weight is 12.000.
% Given clauses 76.

6 (all x (point3(x) <-> T(x))) # label(non_clause).  [assumption].
9 (all x all y (in3(x,y) <-> PRE(x,y) & T(y) & (ED(x) | PD(x) | Q(x)) | PRE(y,x) & T(x) & (ED(y) | PD(y) | Q(y)) | x = y & (ED(y) | PD(y) | Q(y) | T(y)))) # label(non_clause).  [assumption].
42 (all x (R(x) -> AB(x))) # label(non_clause).  [assumption].
49 (all x (TR(x) | PR(x) | AR(x) -> R(x))) # label(non_clause).  [assumption].
52 (all x (T(x) -> TR(x))) # label(non_clause).  [assumption].
57 (all x (ED(x) -> -PD(x) & -Q(x) & -AB(x))) # label(non_clause).  [assumption].
58 (all x (PD(x) -> -Q(x) & -AB(x))) # label(non_clause).  [assumption].
59 (all x (Q(x) -> -AB(x))) # label(non_clause).  [assumption].
86 (all x all y (in3(x,y) & point3(x) & point3(y) -> x = y)) # label(non_clause) # label(goal).  [goal].
88 -point3(x) | T(x).  [clausify(6)].
89 point3(c1).  [deny(86)].
90 point3(c2).  [deny(86)].
106 -in3(x,y) | ED(x) | PD(x) | Q(x) | ED(y) | PD(y) | Q(y) | y = x.  [clausify(9)].
116 in3(c1,c2).  [deny(86)].
230 -TR(x) | R(x).  [clausify(49)].
231 -R(x) | AB(x).  [clausify(42)].
254 -T(x) | TR(x).  [clausify(52)].
256 -TR(x) | AB(x).  [resolve(230,b,231,a)].
262 -ED(x) | -AB(x).  [clausify(57)].
263 -PD(x) | -AB(x).  [clausify(58)].
264 -Q(x) | -AB(x).  [clausify(59)].
266 AB(x) | -T(x).  [resolve(256,a,254,b)].
313 c2 != c1.  [deny(86)].
314 T(c1).  [resolve(89,a,88,a)].
315 T(c2).  [resolve(90,a,88,a)].
322 ED(c1) | PD(c1) | Q(c1) | ED(c2) | PD(c2) | Q(c2) | c2 = c1.  [resolve(116,a,106,a)].
323 ED(c1) | PD(c1) | Q(c1) | ED(c2) | PD(c2) | Q(c2).  [copy(322),unit_del(g,313)].
371 -T(x) | -ED(x).  [resolve(266,a,262,b)].
372 -T(x) | -PD(x).  [resolve(266,a,263,b)].
373 -T(x) | -Q(x).  [resolve(266,a,264,b)].
577 -ED(c2).  [ur(371,a,315,a)].
578 -ED(c1).  [ur(371,a,314,a)].
591 PD(c1) | Q(c1) | PD(c2) | Q(c2).  [back_unit_del(323),unit_del(a,578),unit_del(d,577)].
605 -PD(c2).  [ur(372,a,315,a)].
606 -PD(c1).  [ur(372,a,314,a)].
608 Q(c1) | Q(c2).  [back_unit_del(591),unit_del(a,606),unit_del(c,605)].
631 -Q(c2).  [ur(373,a,315,a)].
632 -Q(c1).  [ur(373,a,314,a)].
643 $F.  [back_unit_del(608),unit_del(a,632),unit_del(b,631)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=76. Generated=952. Kept=345. proofs=1.
Usable=73. Sos=193. Demods=0. Limbo=12, Disabled=376. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=606. Back_subsumed=5.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=62.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=1701. Nonunit_bsub_feature_tests=2660.
Megabytes=0.94.
User_CPU=0.12, System_CPU=0.01, Wall_clock=1.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 7034 exit (max_proofs) Tue Oct  1 09:51:38 2013
