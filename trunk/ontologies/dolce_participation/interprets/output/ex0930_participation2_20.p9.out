============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 3546 was started by cchui on stl-ws4.mie.utoronto.ca,
Tue Oct  1 09:34:19 2013
The command was "prover9 -t 120 -f test/p9/dolce_participation.p9 test/p9/dolce_participation2ideal_cem_line_downward_in_foliation.p9 test/p9/dolce_present.p9 test/p9/dolce_time_mereology.p9 test/p9/dolce_taxonomy.p9 test/p9/options.txt test/p9/ex0930_participation2_20.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file test/p9/dolce_participation.p9


formulas(sos).
(all x all y all t (PC(x,y,t) -> ED(x) & PD(y) & T(t))).
(all x all t (PD(x) & PRE(x,t) -> (exists y PC(y,x,t)))).
(all x (ED(x) -> (exists y exists t PC(x,y,t)))).
(all x all y all t (PC(x,y,t) -> PRE(x,t) & PRE(y,t))).
(all x all y all t (PC(x,y,t) <-> (all t1 (P(t1,t) -> PC(x,y,t1))))).
end_of_list.

% Reading from file test/p9/dolce_participation2ideal_cem_line_downward_in_foliation.p9


formulas(sos).
(all x (point2(x) <-> T(x))).
(all x (line2(x) <-> ED(x))).
(all x (plane2(x) <-> PD(x))).
(all x all y (in2(x,y) <-> PRE(x,y) & T(y) & (ED(x) | PD(x) | Q(x)) | PRE(y,x) & T(x) & (ED(y) | PD(y) | Q(y)) | x = y & (ED(y) | PD(y) | Q(y) | T(y)))).
(all x all y all z (tin2(x,y,z) <-> PC(x,y,z))).
(all x all y (part2(x,y) <-> P(x,y) & T(x) & T(y))).
(all x (L_1(x) <-> ED(x))).
(all x (L_2(x) <-> PD(x))).
(all x (L_3(x) <-> Q(x))).
(all x (atomic_part(x) <-> AtP(x) & T(x))).
(all x all y (ppart(x,y) <-> PP(x,y) & T(x) & T(y))).
(all x all y (overlaps(x,y) <-> O(x,y) & T(x) & T(y))).
(all x all y (underlaps(x,y) <-> U(x,y) & T(x) & T(y))).
(all x all y (disjoint(x,y) <-> DJ(x,y) & T(x) & T(y))).
(all x all y all z (sum(x,y,z) <-> SUM(z,x,y) & T(z) & T(x) & T(y))).
end_of_list.

% Reading from file test/p9/dolce_present.p9


formulas(sos).
(all x (ED(x) | PD(x) | Q(x) -> (exists t PRE(x,t)))).
(all x all t all t1 (PRE(x,t) & P(t1,t) -> PRE(x,t1))).
(all x all t (PRE(x,t) -> T(t))).
(all x all t all t1 all t2 (PRE(x,t1) & PRE(x,t2) & SUM(t,t1,t2) -> PRE(x,t))).
end_of_list.

% Reading from file test/p9/dolce_time_mereology.p9


formulas(sos).
(all x all y (P(x,y) -> T(y) & T(y))).
(all x all y (P(x,y) -> (T(x) <-> T(y)))).
(all x all y (T(x) -> P(x,x))).
(all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)).
(all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & DJ(z,y) & T(z))))).
(all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))).
(all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))).
(all x all y (T(x) & T(y) -> (DJ(x,y) <-> -O(x,y)))).
(all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))).
(all x (AtP(x) <-> T(x) & (all y (T(y) & P(y,x) -> y = x)))).
(all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))).
(all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))).
(all x all y all z (T(x) & T(y) & T(z) -> (SUM(z,x,y) <-> (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y))))))).
end_of_list.

% Reading from file test/p9/dolce_taxonomy.p9


formulas(sos).
(all x (ED(x) | PD(x) | Q(x) | AB(x) -> PT(x))).
(all x (PED(x) | NPED(x) | AS(x) -> ED(x))).
(all x (EV(x) | STV(x) -> PD(x))).
(all x (TQ(x) | PQ(x) | AQ(x) -> Q(x))).
(all x (R(x) -> AB(x))).
(all x (M(x) | F(x) | POB(x) -> PED(x))).
(all x (NPOB(x) -> NPED(x))).
(all x (ACH(x) | ACC(x) -> EV(x))).
(all x (ST(x) | PRO(x) -> STV(x))).
(all x (TL(x) -> TQ(x))).
(all x (SL(x) -> PQ(x))).
(all x (TR(x) | PR(x) | AR(x) -> R(x))).
(all x (APO(x) | NAPO(x) -> POB(x))).
(all x (MOB(x) | SOB(x) -> NPOB(x))).
(all x (T(x) -> TR(x))).
(all x (S(x) -> PR(x))).
(all x (ASO(x) | NASO(x) -> SOB(x))).
(all x (SAG(x) | SC(x) -> ASO(x))).
(all x (PT(x) <-> ED(x) | PD(x) | Q(x) | AB(x))).
(all x (ED(x) -> -PD(x) & -Q(x) & -AB(x))).
(all x (PD(x) -> -Q(x) & -AB(x))).
(all x (Q(x) -> -AB(x))).
(all x (ED(x) <-> PED(x) | NPED(x) | AS(x))).
(all x (PED(x) -> -NPED(x) & -AS(x))).
(all x (NPED(x) -> -AS(x))).
(all x (PD(x) <-> EV(x) | STV(x))).
(all x (EV(x) -> -STV(x))).
(all x (Q(x) <-> TQ(x) | PQ(x) | AQ(x))).
(all x (TQ(x) -> -PQ(x) & -AQ(x))).
(all x (PQ(x) -> -AQ(x))).
(all x (PED(x) <-> M(x) | F(x) | POB(x))).
(all x (M(x) -> -F(x) & -POB(x))).
(all x (F(x) -> -POB(x))).
(all x (EV(x) <-> ACH(x) | ACC(x))).
(all x (ACH(x) -> -ACC(x))).
(all x (STV(x) <-> ST(x) | PRO(x))).
(all x (ST(x) -> -PRO(x))).
(all x (R(x) <-> TR(x) | PR(x) | AR(x))).
(all x (TR(x) -> -PR(x) & -AR(x))).
(all x (PR(x) -> -AR(x))).
(all x (POB(x) <-> APO(x) | NAPO(x))).
(all x (APO(x) -> -NAPO(x))).
(all x (NPOB(x) <-> MOB(x) | SOB(x))).
(all x (MOB(x) -> -SOB(x))).
(all x (SOB(x) <-> ASO(x) | NASO(x))).
(all x (ASO(x) -> -NASO(x))).
(all x (ASO(x) <-> SAG(x) | SC(x))).
(all x (SAG(x) -> -SC(x))).
end_of_list.

% Reading from file test/p9/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file test/p9/ex0930_participation2_20.p9


formulas(goals).
(all x all y all l (point2(x) & point2(y) & line2(l) & in2(x,l) & part2(y,x) -> in2(y,l))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 120).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y all t (PC(x,y,t) -> ED(x) & PD(y) & T(t))) # label(non_clause).  [assumption].
2 (all x all t (PD(x) & PRE(x,t) -> (exists y PC(y,x,t)))) # label(non_clause).  [assumption].
3 (all x (ED(x) -> (exists y exists t PC(x,y,t)))) # label(non_clause).  [assumption].
4 (all x all y all t (PC(x,y,t) -> PRE(x,t) & PRE(y,t))) # label(non_clause).  [assumption].
5 (all x all y all t (PC(x,y,t) <-> (all t1 (P(t1,t) -> PC(x,y,t1))))) # label(non_clause).  [assumption].
6 (all x (point2(x) <-> T(x))) # label(non_clause).  [assumption].
7 (all x (line2(x) <-> ED(x))) # label(non_clause).  [assumption].
8 (all x (plane2(x) <-> PD(x))) # label(non_clause).  [assumption].
9 (all x all y (in2(x,y) <-> PRE(x,y) & T(y) & (ED(x) | PD(x) | Q(x)) | PRE(y,x) & T(x) & (ED(y) | PD(y) | Q(y)) | x = y & (ED(y) | PD(y) | Q(y) | T(y)))) # label(non_clause).  [assumption].
10 (all x all y all z (tin2(x,y,z) <-> PC(x,y,z))) # label(non_clause).  [assumption].
11 (all x all y (part2(x,y) <-> P(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
12 (all x (L_1(x) <-> ED(x))) # label(non_clause).  [assumption].
13 (all x (L_2(x) <-> PD(x))) # label(non_clause).  [assumption].
14 (all x (L_3(x) <-> Q(x))) # label(non_clause).  [assumption].
15 (all x (atomic_part(x) <-> AtP(x) & T(x))) # label(non_clause).  [assumption].
16 (all x all y (ppart(x,y) <-> PP(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
17 (all x all y (overlaps(x,y) <-> O(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
18 (all x all y (underlaps(x,y) <-> U(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
19 (all x all y (disjoint(x,y) <-> DJ(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
20 (all x all y all z (sum(x,y,z) <-> SUM(z,x,y) & T(z) & T(x) & T(y))) # label(non_clause).  [assumption].
21 (all x (ED(x) | PD(x) | Q(x) -> (exists t PRE(x,t)))) # label(non_clause).  [assumption].
22 (all x all t all t1 (PRE(x,t) & P(t1,t) -> PRE(x,t1))) # label(non_clause).  [assumption].
23 (all x all t (PRE(x,t) -> T(t))) # label(non_clause).  [assumption].
24 (all x all t all t1 all t2 (PRE(x,t1) & PRE(x,t2) & SUM(t,t1,t2) -> PRE(x,t))) # label(non_clause).  [assumption].
25 (all x all y (P(x,y) -> T(y) & T(y))) # label(non_clause).  [assumption].
26 (all x all y (P(x,y) -> (T(x) <-> T(y)))) # label(non_clause).  [assumption].
27 (all x all y (T(x) -> P(x,x))) # label(non_clause).  [assumption].
28 (all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)) # label(non_clause).  [assumption].
29 (all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))) # label(non_clause).  [assumption].
30 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))) # label(non_clause).  [assumption].
31 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & DJ(z,y) & T(z))))) # label(non_clause).  [assumption].
32 (all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))) # label(non_clause).  [assumption].
33 (all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))) # label(non_clause).  [assumption].
34 (all x all y (T(x) & T(y) -> (DJ(x,y) <-> -O(x,y)))) # label(non_clause).  [assumption].
35 (all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))) # label(non_clause).  [assumption].
36 (all x (AtP(x) <-> T(x) & (all y (T(y) & P(y,x) -> y = x)))) # label(non_clause).  [assumption].
37 (all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))) # label(non_clause).  [assumption].
38 (all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))) # label(non_clause).  [assumption].
39 (all x all y all z (T(x) & T(y) & T(z) -> (SUM(z,x,y) <-> (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y))))))) # label(non_clause).  [assumption].
40 (all x (ED(x) | PD(x) | Q(x) | AB(x) -> PT(x))) # label(non_clause).  [assumption].
41 (all x (PED(x) | NPED(x) | AS(x) -> ED(x))) # label(non_clause).  [assumption].
42 (all x (EV(x) | STV(x) -> PD(x))) # label(non_clause).  [assumption].
43 (all x (TQ(x) | PQ(x) | AQ(x) -> Q(x))) # label(non_clause).  [assumption].
44 (all x (R(x) -> AB(x))) # label(non_clause).  [assumption].
45 (all x (M(x) | F(x) | POB(x) -> PED(x))) # label(non_clause).  [assumption].
46 (all x (NPOB(x) -> NPED(x))) # label(non_clause).  [assumption].
47 (all x (ACH(x) | ACC(x) -> EV(x))) # label(non_clause).  [assumption].
48 (all x (ST(x) | PRO(x) -> STV(x))) # label(non_clause).  [assumption].
49 (all x (TL(x) -> TQ(x))) # label(non_clause).  [assumption].
50 (all x (SL(x) -> PQ(x))) # label(non_clause).  [assumption].
51 (all x (TR(x) | PR(x) | AR(x) -> R(x))) # label(non_clause).  [assumption].
52 (all x (APO(x) | NAPO(x) -> POB(x))) # label(non_clause).  [assumption].
53 (all x (MOB(x) | SOB(x) -> NPOB(x))) # label(non_clause).  [assumption].
54 (all x (T(x) -> TR(x))) # label(non_clause).  [assumption].
55 (all x (S(x) -> PR(x))) # label(non_clause).  [assumption].
56 (all x (ASO(x) | NASO(x) -> SOB(x))) # label(non_clause).  [assumption].
57 (all x (SAG(x) | SC(x) -> ASO(x))) # label(non_clause).  [assumption].
58 (all x (PT(x) <-> ED(x) | PD(x) | Q(x) | AB(x))) # label(non_clause).  [assumption].
59 (all x (ED(x) -> -PD(x) & -Q(x) & -AB(x))) # label(non_clause).  [assumption].
60 (all x (PD(x) -> -Q(x) & -AB(x))) # label(non_clause).  [assumption].
61 (all x (Q(x) -> -AB(x))) # label(non_clause).  [assumption].
62 (all x (ED(x) <-> PED(x) | NPED(x) | AS(x))) # label(non_clause).  [assumption].
63 (all x (PED(x) -> -NPED(x) & -AS(x))) # label(non_clause).  [assumption].
64 (all x (NPED(x) -> -AS(x))) # label(non_clause).  [assumption].
65 (all x (PD(x) <-> EV(x) | STV(x))) # label(non_clause).  [assumption].
66 (all x (EV(x) -> -STV(x))) # label(non_clause).  [assumption].
67 (all x (Q(x) <-> TQ(x) | PQ(x) | AQ(x))) # label(non_clause).  [assumption].
68 (all x (TQ(x) -> -PQ(x) & -AQ(x))) # label(non_clause).  [assumption].
69 (all x (PQ(x) -> -AQ(x))) # label(non_clause).  [assumption].
70 (all x (PED(x) <-> M(x) | F(x) | POB(x))) # label(non_clause).  [assumption].
71 (all x (M(x) -> -F(x) & -POB(x))) # label(non_clause).  [assumption].
72 (all x (F(x) -> -POB(x))) # label(non_clause).  [assumption].
73 (all x (EV(x) <-> ACH(x) | ACC(x))) # label(non_clause).  [assumption].
74 (all x (ACH(x) -> -ACC(x))) # label(non_clause).  [assumption].
75 (all x (STV(x) <-> ST(x) | PRO(x))) # label(non_clause).  [assumption].
76 (all x (ST(x) -> -PRO(x))) # label(non_clause).  [assumption].
77 (all x (R(x) <-> TR(x) | PR(x) | AR(x))) # label(non_clause).  [assumption].
78 (all x (TR(x) -> -PR(x) & -AR(x))) # label(non_clause).  [assumption].
79 (all x (PR(x) -> -AR(x))) # label(non_clause).  [assumption].
80 (all x (POB(x) <-> APO(x) | NAPO(x))) # label(non_clause).  [assumption].
81 (all x (APO(x) -> -NAPO(x))) # label(non_clause).  [assumption].
82 (all x (NPOB(x) <-> MOB(x) | SOB(x))) # label(non_clause).  [assumption].
83 (all x (MOB(x) -> -SOB(x))) # label(non_clause).  [assumption].
84 (all x (SOB(x) <-> ASO(x) | NASO(x))) # label(non_clause).  [assumption].
85 (all x (ASO(x) -> -NASO(x))) # label(non_clause).  [assumption].
86 (all x (ASO(x) <-> SAG(x) | SC(x))) # label(non_clause).  [assumption].
87 (all x (SAG(x) -> -SC(x))) # label(non_clause).  [assumption].
88 (all x all y all l (point2(x) & point2(y) & line2(l) & in2(x,l) & part2(y,x) -> in2(y,l))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating point2/1
89 point2(x) | -T(x).  [clausify(6)].
90 -point2(x) | T(x).  [clausify(6)].
91 point2(c1).  [deny(88)].
Derived: T(c1).  [resolve(91,a,90,a)].
92 point2(c2).  [deny(88)].
Derived: T(c2).  [resolve(92,a,90,a)].

Eliminating line2/1
93 line2(x) | -ED(x).  [clausify(7)].
94 -line2(x) | ED(x).  [clausify(7)].
95 line2(c3).  [deny(88)].
Derived: ED(c3).  [resolve(95,a,94,a)].

Eliminating plane2/1
96 plane2(x) | -PD(x).  [clausify(8)].
97 -plane2(x) | PD(x).  [clausify(8)].

Eliminating tin2/3
98 tin2(x,y,z) | -PC(x,y,z).  [clausify(10)].
99 -tin2(x,y,z) | PC(x,y,z).  [clausify(10)].

Eliminating part2/2
100 part2(x,y) | -P(x,y) | -T(x) | -T(y).  [clausify(11)].
101 -part2(x,y) | P(x,y).  [clausify(11)].
102 -part2(x,y) | T(x).  [clausify(11)].
103 -part2(x,y) | T(y).  [clausify(11)].
104 part2(c2,c1).  [deny(88)].
Derived: P(c2,c1).  [resolve(104,a,101,a)].

Eliminating L_1/1
105 L_1(x) | -ED(x).  [clausify(12)].
106 -L_1(x) | ED(x).  [clausify(12)].

Eliminating L_2/1
107 L_2(x) | -PD(x).  [clausify(13)].
108 -L_2(x) | PD(x).  [clausify(13)].

Eliminating L_3/1
109 L_3(x) | -Q(x).  [clausify(14)].
110 -L_3(x) | Q(x).  [clausify(14)].

Eliminating atomic_part/1
111 atomic_part(x) | -AtP(x) | -T(x).  [clausify(15)].
112 -atomic_part(x) | AtP(x).  [clausify(15)].
113 -atomic_part(x) | T(x).  [clausify(15)].

Eliminating ppart/2
114 ppart(x,y) | -PP(x,y) | -T(x) | -T(y).  [clausify(16)].
115 -ppart(x,y) | PP(x,y).  [clausify(16)].
116 -ppart(x,y) | T(x).  [clausify(16)].
117 -ppart(x,y) | T(y).  [clausify(16)].

Eliminating overlaps/2
118 overlaps(x,y) | -O(x,y) | -T(x) | -T(y).  [clausify(17)].
119 -overlaps(x,y) | O(x,y).  [clausify(17)].
120 -overlaps(x,y) | T(x).  [clausify(17)].
121 -overlaps(x,y) | T(y).  [clausify(17)].

Eliminating underlaps/2
122 underlaps(x,y) | -U(x,y) | -T(x) | -T(y).  [clausify(18)].
123 -underlaps(x,y) | U(x,y).  [clausify(18)].
124 -underlaps(x,y) | T(x).  [clausify(18)].
125 -underlaps(x,y) | T(y).  [clausify(18)].

Eliminating disjoint/2
126 disjoint(x,y) | -DJ(x,y) | -T(x) | -T(y).  [clausify(19)].
127 -disjoint(x,y) | DJ(x,y).  [clausify(19)].
128 -disjoint(x,y) | T(x).  [clausify(19)].
129 -disjoint(x,y) | T(y).  [clausify(19)].

Eliminating sum/3
130 sum(x,y,z) | -SUM(z,x,y) | -T(z) | -T(x) | -T(y).  [clausify(20)].
131 -sum(x,y,z) | SUM(z,x,y).  [clausify(20)].
132 -sum(x,y,z) | T(z).  [clausify(20)].
133 -sum(x,y,z) | T(x).  [clausify(20)].
134 -sum(x,y,z) | T(y).  [clausify(20)].

Eliminating SUM/3
135 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | T(f13(x,y,z)).  [clausify(39)].
136 -PRE(x,y) | -PRE(x,z) | -SUM(u,y,z) | PRE(x,u).  [clausify(24)].
137 -T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [clausify(39)].
138 -T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | O(u,z) | -O(u,x).  [clausify(39)].
139 -T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | O(u,z) | -O(u,y).  [clausify(39)].
Derived: -T(x) | -T(y) | -T(z) | T(f13(x,y,z)) | -PRE(u,x) | -PRE(u,y) | PRE(u,z).  [resolve(135,d,136,c)].
Derived: -T(x) | -T(y) | -T(z) | T(f13(x,y,z)) | -T(x) | -T(y) | -T(z) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [resolve(135,d,137,d)].
Derived: -T(x) | -T(y) | -T(z) | T(f13(x,y,z)) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,x).  [resolve(135,d,138,d)].
Derived: -T(x) | -T(y) | -T(z) | T(f13(x,y,z)) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,y).  [resolve(135,d,139,d)].
140 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y).  [clausify(39)].
Derived: -T(x) | -T(y) | -T(z) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y) | -PRE(u,x) | -PRE(u,y) | PRE(u,z).  [resolve(140,d,136,c)].
Derived: -T(x) | -T(y) | -T(z) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [resolve(140,d,137,d)].
Derived: -T(x) | -T(y) | -T(z) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,x).  [resolve(140,d,138,d)].
Derived: -T(x) | -T(y) | -T(z) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,y).  [resolve(140,d,139,d)].
141 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x).  [clausify(39)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x) | -PRE(u,x) | -PRE(u,y) | PRE(u,z).  [resolve(141,d,136,c)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x) | -T(x) | -T(y) | -T(z) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [resolve(141,d,137,d)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,x).  [resolve(141,d,138,d)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,y).  [resolve(141,d,139,d)].
142 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y).  [clausify(39)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y) | -PRE(u,x) | -PRE(u,y) | PRE(u,z).  [resolve(142,d,136,c)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [resolve(142,d,137,d)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,x).  [resolve(142,d,138,d)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,y).  [resolve(142,d,139,d)].

Eliminating DJ/2
143 -T(x) | -T(y) | -DJ(x,y) | -O(x,y).  [clausify(34)].
144 -T(x) | -T(y) | P(x,y) | DJ(f7(x,y),y).  [clausify(31)].
Derived: -T(f7(x,y)) | -T(y) | -O(f7(x,y),y) | -T(x) | -T(y) | P(x,y).  [resolve(143,c,144,d)].
145 -T(x) | -T(y) | DJ(x,y) | O(x,y).  [clausify(34)].

Eliminating U/2
146 -T(x) | -T(y) | U(x,y) | -P(x,z) | -P(y,z) | -T(z).  [clausify(35)].
147 -T(x) | -T(y) | -U(x,y) | P(x,f9(x,y)).  [clausify(35)].
148 -T(x) | -T(y) | -U(x,y) | P(y,f9(x,y)).  [clausify(35)].
149 -T(x) | -T(y) | -U(x,y) | T(f9(x,y)).  [clausify(35)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | P(x,f9(x,y)).  [resolve(146,c,147,c)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | P(y,f9(x,y)).  [resolve(146,c,148,c)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | T(f9(x,y)).  [resolve(146,c,149,c)].
150 -T(x) | -T(y) | -U(x,y) | T(f11(x,y)).  [clausify(37)].
Derived: -T(x) | -T(y) | T(f11(x,y)) | -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z).  [resolve(150,c,146,c)].
151 -T(x) | -T(y) | -U(x,y) | -T(z) | -O(z,f11(x,y)) | O(z,x) | O(z,y).  [clausify(37)].
Derived: -T(x) | -T(y) | -T(z) | -O(z,f11(x,y)) | O(z,x) | O(z,y) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(151,c,146,c)].
152 -T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f11(x,y)) | -O(z,x).  [clausify(37)].
Derived: -T(x) | -T(y) | -T(z) | O(z,f11(x,y)) | -O(z,x) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(152,c,146,c)].
153 -T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f11(x,y)) | -O(z,y).  [clausify(37)].
Derived: -T(x) | -T(y) | -T(z) | O(z,f11(x,y)) | -O(z,y) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(153,c,146,c)].

Eliminating AtP/1
154 AtP(x) | -T(x) | T(f10(x)).  [clausify(36)].
155 -AtP(x) | T(x).  [clausify(36)].
156 -AtP(x) | -T(y) | -P(y,x) | y = x.  [clausify(36)].
Derived: -T(x) | T(f10(x)) | -T(y) | -P(y,x) | y = x.  [resolve(154,a,156,a)].
157 AtP(x) | -T(x) | P(f10(x),x).  [clausify(36)].
Derived: -T(x) | P(f10(x),x) | -T(y) | -P(y,x) | y = x.  [resolve(157,a,156,a)].
158 AtP(x) | -T(x) | f10(x) != x.  [clausify(36)].
Derived: -T(x) | f10(x) != x | -T(y) | -P(y,x) | y = x.  [resolve(158,a,156,a)].

Eliminating PT/1
159 -PT(x) | ED(x) | PD(x) | Q(x) | AB(x).  [clausify(58)].
160 -ED(x) | PT(x).  [clausify(40)].
161 -PD(x) | PT(x).  [clausify(40)].
162 -Q(x) | PT(x).  [clausify(40)].
163 -AB(x) | PT(x).  [clausify(40)].
164 PT(x) | -ED(x).  [clausify(58)].
165 PT(x) | -PD(x).  [clausify(58)].
166 PT(x) | -Q(x).  [clausify(58)].
167 PT(x) | -AB(x).  [clausify(58)].

Eliminating PED/1
168 -M(x) | PED(x).  [clausify(45)].
169 -PED(x) | ED(x).  [clausify(41)].
Derived: -M(x) | ED(x).  [resolve(168,b,169,a)].
170 -F(x) | PED(x).  [clausify(45)].
Derived: -F(x) | ED(x).  [resolve(170,b,169,a)].
171 -POB(x) | PED(x).  [clausify(45)].
Derived: -POB(x) | ED(x).  [resolve(171,b,169,a)].
172 -ED(x) | PED(x) | NPED(x) | AS(x).  [clausify(62)].
173 ED(x) | -PED(x).  [clausify(62)].
174 -PED(x) | -NPED(x).  [clausify(63)].
Derived: -NPED(x) | -M(x).  [resolve(174,a,168,b)].
Derived: -NPED(x) | -F(x).  [resolve(174,a,170,b)].
Derived: -NPED(x) | -POB(x).  [resolve(174,a,171,b)].
175 -PED(x) | -AS(x).  [clausify(63)].
Derived: -AS(x) | -M(x).  [resolve(175,a,168,b)].
Derived: -AS(x) | -F(x).  [resolve(175,a,170,b)].
Derived: -AS(x) | -POB(x).  [resolve(175,a,171,b)].
176 -PED(x) | M(x) | F(x) | POB(x).  [clausify(70)].
Derived: M(x) | F(x) | POB(x) | -ED(x) | NPED(x) | AS(x).  [resolve(176,a,172,b)].
177 PED(x) | -M(x).  [clausify(70)].
178 PED(x) | -F(x).  [clausify(70)].
179 PED(x) | -POB(x).  [clausify(70)].

Eliminating NPED/1
180 -NPOB(x) | NPED(x).  [clausify(46)].
181 -NPED(x) | ED(x).  [clausify(41)].
Derived: -NPOB(x) | ED(x).  [resolve(180,b,181,a)].
182 ED(x) | -NPED(x).  [clausify(62)].
183 -NPED(x) | -AS(x).  [clausify(64)].
Derived: -AS(x) | -NPOB(x).  [resolve(183,a,180,b)].
184 -NPED(x) | -M(x).  [resolve(174,a,168,b)].
Derived: -M(x) | -NPOB(x).  [resolve(184,a,180,b)].
185 -NPED(x) | -F(x).  [resolve(174,a,170,b)].
Derived: -F(x) | -NPOB(x).  [resolve(185,a,180,b)].
186 -NPED(x) | -POB(x).  [resolve(174,a,171,b)].
Derived: -POB(x) | -NPOB(x).  [resolve(186,a,180,b)].
187 M(x) | F(x) | POB(x) | -ED(x) | NPED(x) | AS(x).  [resolve(176,a,172,b)].

Eliminating AS/1

Eliminating EV/1
188 -ACH(x) | EV(x).  [clausify(47)].
189 -EV(x) | PD(x).  [clausify(42)].
Derived: -ACH(x) | PD(x).  [resolve(188,b,189,a)].
190 -ACC(x) | EV(x).  [clausify(47)].
Derived: -ACC(x) | PD(x).  [resolve(190,b,189,a)].
191 -PD(x) | EV(x) | STV(x).  [clausify(65)].
192 PD(x) | -EV(x).  [clausify(65)].
193 -EV(x) | -STV(x).  [clausify(66)].
Derived: -STV(x) | -ACH(x).  [resolve(193,a,188,b)].
Derived: -STV(x) | -ACC(x).  [resolve(193,a,190,b)].
194 -EV(x) | ACH(x) | ACC(x).  [clausify(73)].
Derived: ACH(x) | ACC(x) | -PD(x) | STV(x).  [resolve(194,a,191,b)].
195 EV(x) | -ACH(x).  [clausify(73)].
196 EV(x) | -ACC(x).  [clausify(73)].

Eliminating STV/1
197 -ST(x) | STV(x).  [clausify(48)].
198 -STV(x) | PD(x).  [clausify(42)].
Derived: -ST(x) | PD(x).  [resolve(197,b,198,a)].
199 -PRO(x) | STV(x).  [clausify(48)].
Derived: -PRO(x) | PD(x).  [resolve(199,b,198,a)].
200 PD(x) | -STV(x).  [clausify(65)].
201 -STV(x) | ST(x) | PRO(x).  [clausify(75)].
202 STV(x) | -ST(x).  [clausify(75)].
203 STV(x) | -PRO(x).  [clausify(75)].
204 -STV(x) | -ACH(x).  [resolve(193,a,188,b)].
Derived: -ACH(x) | -ST(x).  [resolve(204,a,197,b)].
Derived: -ACH(x) | -PRO(x).  [resolve(204,a,199,b)].
205 -STV(x) | -ACC(x).  [resolve(193,a,190,b)].
Derived: -ACC(x) | -ST(x).  [resolve(205,a,197,b)].
Derived: -ACC(x) | -PRO(x).  [resolve(205,a,199,b)].
206 ACH(x) | ACC(x) | -PD(x) | STV(x).  [resolve(194,a,191,b)].
Derived: ACH(x) | ACC(x) | -PD(x) | ST(x) | PRO(x).  [resolve(206,d,201,a)].

Eliminating TQ/1
207 -TL(x) | TQ(x).  [clausify(49)].
208 -TQ(x) | Q(x).  [clausify(43)].
Derived: -TL(x) | Q(x).  [resolve(207,b,208,a)].
209 -Q(x) | TQ(x) | PQ(x) | AQ(x).  [clausify(67)].
210 Q(x) | -TQ(x).  [clausify(67)].
211 -TQ(x) | -PQ(x).  [clausify(68)].
Derived: -PQ(x) | -TL(x).  [resolve(211,a,207,b)].
212 -TQ(x) | -AQ(x).  [clausify(68)].
Derived: -AQ(x) | -TL(x).  [resolve(212,a,207,b)].

Eliminating PQ/1
213 -SL(x) | PQ(x).  [clausify(50)].
214 -PQ(x) | Q(x).  [clausify(43)].
Derived: -SL(x) | Q(x).  [resolve(213,b,214,a)].
215 Q(x) | -PQ(x).  [clausify(67)].
216 -PQ(x) | -AQ(x).  [clausify(69)].
Derived: -AQ(x) | -SL(x).  [resolve(216,a,213,b)].
217 -PQ(x) | -TL(x).  [resolve(211,a,207,b)].
Derived: -TL(x) | -SL(x).  [resolve(217,a,213,b)].

Eliminating AQ/1

Eliminating R/1
218 -TR(x) | R(x).  [clausify(51)].
219 -R(x) | AB(x).  [clausify(44)].
Derived: -TR(x) | AB(x).  [resolve(218,b,219,a)].
220 -PR(x) | R(x).  [clausify(51)].
Derived: -PR(x) | AB(x).  [resolve(220,b,219,a)].
221 -AR(x) | R(x).  [clausify(51)].
Derived: -AR(x) | AB(x).  [resolve(221,b,219,a)].
222 -R(x) | TR(x) | PR(x) | AR(x).  [clausify(77)].
223 R(x) | -TR(x).  [clausify(77)].
224 R(x) | -PR(x).  [clausify(77)].
225 R(x) | -AR(x).  [clausify(77)].

Eliminating APO/1
226 -POB(x) | APO(x) | NAPO(x).  [clausify(80)].
227 -APO(x) | POB(x).  [clausify(52)].
228 POB(x) | -APO(x).  [clausify(80)].
229 -APO(x) | -NAPO(x).  [clausify(81)].

Eliminating NAPO/1

Eliminating MOB/1
230 -NPOB(x) | MOB(x) | SOB(x).  [clausify(82)].
231 -MOB(x) | NPOB(x).  [clausify(53)].
232 NPOB(x) | -MOB(x).  [clausify(82)].
233 -MOB(x) | -SOB(x).  [clausify(83)].

Eliminating SOB/1
234 -ASO(x) | SOB(x).  [clausify(56)].
235 -SOB(x) | NPOB(x).  [clausify(53)].
Derived: -ASO(x) | NPOB(x).  [resolve(234,b,235,a)].
236 -NASO(x) | SOB(x).  [clausify(56)].
Derived: -NASO(x) | NPOB(x).  [resolve(236,b,235,a)].
237 NPOB(x) | -SOB(x).  [clausify(82)].
238 -SOB(x) | ASO(x) | NASO(x).  [clausify(84)].
239 SOB(x) | -ASO(x).  [clausify(84)].
240 SOB(x) | -NASO(x).  [clausify(84)].

Eliminating TR/1
241 -TR(x) | -PR(x).  [clausify(78)].
242 -T(x) | TR(x).  [clausify(54)].
Derived: -PR(x) | -T(x).  [resolve(241,a,242,b)].
243 -TR(x) | -AR(x).  [clausify(78)].
Derived: -AR(x) | -T(x).  [resolve(243,a,242,b)].
244 -TR(x) | AB(x).  [resolve(218,b,219,a)].
Derived: AB(x) | -T(x).  [resolve(244,a,242,b)].

Eliminating S/1

Eliminating SAG/1
245 -ASO(x) | SAG(x) | SC(x).  [clausify(86)].
246 -SAG(x) | ASO(x).  [clausify(57)].
247 ASO(x) | -SAG(x).  [clausify(86)].
248 -SAG(x) | -SC(x).  [clausify(87)].

Eliminating SC/1

Eliminating AB/1
249 -PR(x) | AB(x).  [resolve(220,b,219,a)].
250 -ED(x) | -AB(x).  [clausify(59)].
251 -PD(x) | -AB(x).  [clausify(60)].
252 -Q(x) | -AB(x).  [clausify(61)].
Derived: -PR(x) | -ED(x).  [resolve(249,b,250,b)].
Derived: -PR(x) | -PD(x).  [resolve(249,b,251,b)].
Derived: -PR(x) | -Q(x).  [resolve(249,b,252,b)].
253 -AR(x) | AB(x).  [resolve(221,b,219,a)].
Derived: -AR(x) | -ED(x).  [resolve(253,b,250,b)].
Derived: -AR(x) | -PD(x).  [resolve(253,b,251,b)].
Derived: -AR(x) | -Q(x).  [resolve(253,b,252,b)].
254 AB(x) | -T(x).  [resolve(244,a,242,b)].
Derived: -T(x) | -ED(x).  [resolve(254,a,250,b)].
Derived: -T(x) | -PD(x).  [resolve(254,a,251,b)].
Derived: -T(x) | -Q(x).  [resolve(254,a,252,b)].

Eliminating M/1

Eliminating F/1

Eliminating ACH/1
255 ACH(x) | ACC(x) | -PD(x) | ST(x) | PRO(x).  [resolve(206,d,201,a)].
256 -ACH(x) | -ACC(x).  [clausify(74)].
257 -ACH(x) | PD(x).  [resolve(188,b,189,a)].
258 -ACH(x) | -ST(x).  [resolve(204,a,197,b)].
259 -ACH(x) | -PRO(x).  [resolve(204,a,199,b)].

Eliminating ST/1

Eliminating PR/1

Eliminating ASO/1

Eliminating POB/1

Eliminating NPOB/1
260 -NASO(x) | NPOB(x).  [resolve(236,b,235,a)].
261 -NPOB(x) | ED(x).  [resolve(180,b,181,a)].
Derived: -NASO(x) | ED(x).  [resolve(260,b,261,a)].

Eliminating ACC/1

Eliminating PRO/1

Eliminating TL/1

Eliminating SL/1

Eliminating AR/1

Eliminating NASO/1

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, T, ED, PD, Q, O, P, PRE, in2, PP, PC ]).
Function symbol precedence:  function_order([ c1, c2, c3, f1, f6, f7, f8, f9, f11, f12, f2, f3, f5, f10, f4, f13 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.11 seconds.

============================== PROOF =================================

% Proof 1 at 0.99 (+ 0.01) seconds.
% Length of proof is 53.
% Level of proof is 9.
% Maximum clause weight is 15.000.
% Given clauses 257.

6 (all x (point2(x) <-> T(x))) # label(non_clause).  [assumption].
7 (all x (line2(x) <-> ED(x))) # label(non_clause).  [assumption].
9 (all x all y (in2(x,y) <-> PRE(x,y) & T(y) & (ED(x) | PD(x) | Q(x)) | PRE(y,x) & T(x) & (ED(y) | PD(y) | Q(y)) | x = y & (ED(y) | PD(y) | Q(y) | T(y)))) # label(non_clause).  [assumption].
11 (all x all y (part2(x,y) <-> P(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
22 (all x all t all t1 (PRE(x,t) & P(t1,t) -> PRE(x,t1))) # label(non_clause).  [assumption].
25 (all x all y (P(x,y) -> T(y) & T(y))) # label(non_clause).  [assumption].
27 (all x all y (T(x) -> P(x,x))) # label(non_clause).  [assumption].
33 (all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))) # label(non_clause).  [assumption].
44 (all x (R(x) -> AB(x))) # label(non_clause).  [assumption].
51 (all x (TR(x) | PR(x) | AR(x) -> R(x))) # label(non_clause).  [assumption].
54 (all x (T(x) -> TR(x))) # label(non_clause).  [assumption].
59 (all x (ED(x) -> -PD(x) & -Q(x) & -AB(x))) # label(non_clause).  [assumption].
88 (all x all y all l (point2(x) & point2(y) & line2(l) & in2(x,l) & part2(y,x) -> in2(y,l))) # label(non_clause) # label(goal).  [goal].
90 -point2(x) | T(x).  [clausify(6)].
91 point2(c1).  [deny(88)].
92 point2(c2).  [deny(88)].
94 -line2(x) | ED(x).  [clausify(7)].
95 line2(c3).  [deny(88)].
101 -part2(x,y) | P(x,y).  [clausify(11)].
104 part2(c2,c1).  [deny(88)].
218 -TR(x) | R(x).  [clausify(51)].
219 -R(x) | AB(x).  [clausify(44)].
242 -T(x) | TR(x).  [clausify(54)].
244 -TR(x) | AB(x).  [resolve(218,b,219,a)].
250 -ED(x) | -AB(x).  [clausify(59)].
254 AB(x) | -T(x).  [resolve(244,a,242,b)].
275 -in2(x,y) | T(y) | PRE(y,x) | y = x.  [clausify(9)].
284 in2(x,y) | -PRE(y,x) | -T(x) | -ED(y).  [clausify(9)].
294 -PRE(x,y) | -P(z,y) | PRE(x,z).  [clausify(22)].
296 -P(x,y) | T(y).  [clausify(25)].
298 -T(x) | P(x,x).  [clausify(27)].
309 -T(x) | -T(y) | -O(x,y) | P(f8(x,y),x).  [clausify(33)].
312 -T(x) | -T(y) | O(x,y) | -P(z,x) | -P(z,y) | -T(z).  [clausify(33)].
320 in2(c1,c3).  [deny(88)].
321 -in2(c2,c3).  [deny(88)].
322 T(c1).  [resolve(91,a,90,a)].
323 T(c2).  [resolve(92,a,90,a)].
324 ED(c3).  [resolve(95,a,94,a)].
325 P(c2,c1).  [resolve(104,a,101,a)].
373 -T(x) | -ED(x).  [resolve(254,a,250,b)].
381 -T(x) | -T(y) | O(x,y) | -P(y,x) | -P(y,y).  [factor(312,b,f)].
528 T(c3) | PRE(c3,c1) | c3 = c1.  [resolve(320,a,275,a)].
548 P(c2,c2).  [resolve(323,a,298,a)].
556 -PRE(c3,c2).  [ur(284,a,321,a,c,323,a,d,324,a)].
589 -T(c3).  [resolve(373,b,324,a)].
592 PRE(c3,c1) | c3 = c1.  [back_unit_del(528),unit_del(a,589)].
599 O(c1,c2).  [resolve(381,d,325,a),unit_del(a,322),unit_del(b,323),unit_del(d,548)].
638 -P(x,c3).  [ur(296,b,589,a)].
819 P(f8(c1,c2),c1).  [resolve(599,a,309,c),unit_del(a,322),unit_del(b,323)].
908 -PRE(c3,c1).  [ur(294,b,325,a,c,556,a)].
912 c3 = c1.  [back_unit_del(592),unit_del(a,908)].
949 -P(x,c1).  [back_rewrite(638),rewrite([912(1)])].
950 $F.  [resolve(949,a,819,a)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=257. Generated=1781. Kept=668. proofs=1.
Usable=256. Sos=303. Demods=1. Limbo=37, Disabled=384. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=1113. Back_subsumed=14.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=1 (0 lex), Back_demodulated=38. Back_unit_deleted=19.
Demod_attempts=394. Demod_rewrites=94.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=3625. Nonunit_bsub_feature_tests=3702.
Megabytes=1.40.
User_CPU=0.99, System_CPU=0.01, Wall_clock=2.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 3546 exit (max_proofs) Tue Oct  1 09:34:21 2013
