============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 15868 was started by cchui on stl-ws4.mie.utoronto.ca,
Mon Sep 30 23:51:22 2013
The command was "prover9 -t 120 -f test/p9/dolce_participation.p9 test/p9/dolce_participation2ideal_cem_plane_downward_in_foliation.p9 test/p9/dolce_present.p9 test/p9/dolce_time_mereology.p9 test/p9/dolce_taxonomy.p9 test/p9/options.txt test/p9/ex0930_participation1_8.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file test/p9/dolce_participation.p9


formulas(sos).
(all x all y all t (PC(x,y,t) -> ED(x) & PD(y) & T(t))).
(all x all t (PD(x) & PRE(x,t) -> (exists y PC(y,x,t)))).
(all x (ED(x) -> (exists y exists t PC(x,y,t)))).
(all x all y all t (PC(x,y,t) -> PRE(x,t) & PRE(y,t))).
(all x all y all t (PC(x,y,t) <-> (all t1 (P(t1,t) -> PC(x,y,t1))))).
end_of_list.

% Reading from file test/p9/dolce_participation2ideal_cem_plane_downward_in_foliation.p9


formulas(sos).
(all x (point1(x) <-> T(x))).
(all x (line1(x) <-> PD(x))).
(all x (plane1(x) <-> ED(x))).
(all x all y (in1(x,y) <-> PRE(x,y) & T(y) & (ED(x) | PD(x) | Q(x)) | PRE(y,x) & T(x) & (ED(y) | PD(y) | Q(y)) | x = y & (ED(y) | PD(y) | Q(y) | T(y)))).
(all x all y all z (tin1(x,y,z) <-> PC(x,y,z))).
(all x all y (part1(x,y) <-> P(x,y) & T(x) & T(y))).
(all x (L_1(x) <-> ED(x))).
(all x (L_2(x) <-> PD(x))).
(all x (L_3(x) <-> Q(x))).
end_of_list.

% Reading from file test/p9/dolce_present.p9


formulas(sos).
(all x (ED(x) | PD(x) | Q(x) -> (exists t PRE(x,t)))).
(all x all t all t1 (PRE(x,t) & P(t1,t) -> PRE(x,t1))).
(all x all t (PRE(x,t) -> T(t))).
(all x all t all t1 all t2 (PRE(x,t1) & PRE(x,t2) & SUM(t,t1,t2) -> PRE(x,t))).
end_of_list.

% Reading from file test/p9/dolce_time_mereology.p9


formulas(sos).
(all x all y (P(x,y) -> T(y) & T(y))).
(all x all y (P(x,y) -> (T(x) <-> T(y)))).
(all x all y (T(x) -> P(x,x))).
(all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)).
(all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & DJ(z,y) & T(z))))).
(all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))).
(all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))).
(all x all y (T(x) & T(y) -> (DJ(x,y) <-> -O(x,y)))).
(all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))).
(all x (AtP(x) <-> T(x) & (all y (T(y) & P(y,x) -> y = x)))).
(all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))).
(all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))).
(all x all y all z (T(x) & T(y) & T(z) -> (SUM(z,x,y) <-> (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y))))))).
end_of_list.

% Reading from file test/p9/dolce_taxonomy.p9


formulas(sos).
(all x (ED(x) | PD(x) | Q(x) | AB(x) -> PT(x))).
(all x (PED(x) | NPED(x) | AS(x) -> ED(x))).
(all x (EV(x) | STV(x) -> PD(x))).
(all x (TQ(x) | PQ(x) | AQ(x) -> Q(x))).
(all x (R(x) -> AB(x))).
(all x (M(x) | F(x) | POB(x) -> PED(x))).
(all x (NPOB(x) -> NPED(x))).
(all x (ACH(x) | ACC(x) -> EV(x))).
(all x (ST(x) | PRO(x) -> STV(x))).
(all x (TL(x) -> TQ(x))).
(all x (SL(x) -> PQ(x))).
(all x (TR(x) | PR(x) | AR(x) -> R(x))).
(all x (APO(x) | NAPO(x) -> POB(x))).
(all x (MOB(x) | SOB(x) -> NPOB(x))).
(all x (T(x) -> TR(x))).
(all x (S(x) -> PR(x))).
(all x (ASO(x) | NASO(x) -> SOB(x))).
(all x (SAG(x) | SC(x) -> ASO(x))).
(all x (PT(x) <-> ED(x) | PD(x) | Q(x) | AB(x))).
(all x (ED(x) -> -PD(x) & -Q(x) & -AB(x))).
(all x (PD(x) -> -Q(x) & -AB(x))).
(all x (Q(x) -> -AB(x))).
(all x (ED(x) <-> PED(x) | NPED(x) | AS(x))).
(all x (PED(x) -> -NPED(x) & -AS(x))).
(all x (NPED(x) -> -AS(x))).
(all x (PD(x) <-> EV(x) | STV(x))).
(all x (EV(x) -> -STV(x))).
(all x (Q(x) <-> TQ(x) | PQ(x) | AQ(x))).
(all x (TQ(x) -> -PQ(x) & -AQ(x))).
(all x (PQ(x) -> -AQ(x))).
(all x (PED(x) <-> M(x) | F(x) | POB(x))).
(all x (M(x) -> -F(x) & -POB(x))).
(all x (F(x) -> -POB(x))).
(all x (EV(x) <-> ACH(x) | ACC(x))).
(all x (ACH(x) -> -ACC(x))).
(all x (STV(x) <-> ST(x) | PRO(x))).
(all x (ST(x) -> -PRO(x))).
(all x (R(x) <-> TR(x) | PR(x) | AR(x))).
(all x (TR(x) -> -PR(x) & -AR(x))).
(all x (PR(x) -> -AR(x))).
(all x (POB(x) <-> APO(x) | NAPO(x))).
(all x (APO(x) -> -NAPO(x))).
(all x (NPOB(x) <-> MOB(x) | SOB(x))).
(all x (MOB(x) -> -SOB(x))).
(all x (SOB(x) <-> ASO(x) | NASO(x))).
(all x (ASO(x) -> -NASO(x))).
(all x (ASO(x) <-> SAG(x) | SC(x))).
(all x (SAG(x) -> -SC(x))).
end_of_list.

% Reading from file test/p9/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file test/p9/ex0930_participation1_8.p9


formulas(goals).
(all x all y (in1(x,y) -> in1(y,x))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 120).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y all t (PC(x,y,t) -> ED(x) & PD(y) & T(t))) # label(non_clause).  [assumption].
2 (all x all t (PD(x) & PRE(x,t) -> (exists y PC(y,x,t)))) # label(non_clause).  [assumption].
3 (all x (ED(x) -> (exists y exists t PC(x,y,t)))) # label(non_clause).  [assumption].
4 (all x all y all t (PC(x,y,t) -> PRE(x,t) & PRE(y,t))) # label(non_clause).  [assumption].
5 (all x all y all t (PC(x,y,t) <-> (all t1 (P(t1,t) -> PC(x,y,t1))))) # label(non_clause).  [assumption].
6 (all x (point1(x) <-> T(x))) # label(non_clause).  [assumption].
7 (all x (line1(x) <-> PD(x))) # label(non_clause).  [assumption].
8 (all x (plane1(x) <-> ED(x))) # label(non_clause).  [assumption].
9 (all x all y (in1(x,y) <-> PRE(x,y) & T(y) & (ED(x) | PD(x) | Q(x)) | PRE(y,x) & T(x) & (ED(y) | PD(y) | Q(y)) | x = y & (ED(y) | PD(y) | Q(y) | T(y)))) # label(non_clause).  [assumption].
10 (all x all y all z (tin1(x,y,z) <-> PC(x,y,z))) # label(non_clause).  [assumption].
11 (all x all y (part1(x,y) <-> P(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
12 (all x (L_1(x) <-> ED(x))) # label(non_clause).  [assumption].
13 (all x (L_2(x) <-> PD(x))) # label(non_clause).  [assumption].
14 (all x (L_3(x) <-> Q(x))) # label(non_clause).  [assumption].
15 (all x (ED(x) | PD(x) | Q(x) -> (exists t PRE(x,t)))) # label(non_clause).  [assumption].
16 (all x all t all t1 (PRE(x,t) & P(t1,t) -> PRE(x,t1))) # label(non_clause).  [assumption].
17 (all x all t (PRE(x,t) -> T(t))) # label(non_clause).  [assumption].
18 (all x all t all t1 all t2 (PRE(x,t1) & PRE(x,t2) & SUM(t,t1,t2) -> PRE(x,t))) # label(non_clause).  [assumption].
19 (all x all y (P(x,y) -> T(y) & T(y))) # label(non_clause).  [assumption].
20 (all x all y (P(x,y) -> (T(x) <-> T(y)))) # label(non_clause).  [assumption].
21 (all x all y (T(x) -> P(x,x))) # label(non_clause).  [assumption].
22 (all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)) # label(non_clause).  [assumption].
23 (all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))) # label(non_clause).  [assumption].
24 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))) # label(non_clause).  [assumption].
25 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & DJ(z,y) & T(z))))) # label(non_clause).  [assumption].
26 (all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))) # label(non_clause).  [assumption].
27 (all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))) # label(non_clause).  [assumption].
28 (all x all y (T(x) & T(y) -> (DJ(x,y) <-> -O(x,y)))) # label(non_clause).  [assumption].
29 (all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))) # label(non_clause).  [assumption].
30 (all x (AtP(x) <-> T(x) & (all y (T(y) & P(y,x) -> y = x)))) # label(non_clause).  [assumption].
31 (all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))) # label(non_clause).  [assumption].
32 (all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))) # label(non_clause).  [assumption].
33 (all x all y all z (T(x) & T(y) & T(z) -> (SUM(z,x,y) <-> (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y))))))) # label(non_clause).  [assumption].
34 (all x (ED(x) | PD(x) | Q(x) | AB(x) -> PT(x))) # label(non_clause).  [assumption].
35 (all x (PED(x) | NPED(x) | AS(x) -> ED(x))) # label(non_clause).  [assumption].
36 (all x (EV(x) | STV(x) -> PD(x))) # label(non_clause).  [assumption].
37 (all x (TQ(x) | PQ(x) | AQ(x) -> Q(x))) # label(non_clause).  [assumption].
38 (all x (R(x) -> AB(x))) # label(non_clause).  [assumption].
39 (all x (M(x) | F(x) | POB(x) -> PED(x))) # label(non_clause).  [assumption].
40 (all x (NPOB(x) -> NPED(x))) # label(non_clause).  [assumption].
41 (all x (ACH(x) | ACC(x) -> EV(x))) # label(non_clause).  [assumption].
42 (all x (ST(x) | PRO(x) -> STV(x))) # label(non_clause).  [assumption].
43 (all x (TL(x) -> TQ(x))) # label(non_clause).  [assumption].
44 (all x (SL(x) -> PQ(x))) # label(non_clause).  [assumption].
45 (all x (TR(x) | PR(x) | AR(x) -> R(x))) # label(non_clause).  [assumption].
46 (all x (APO(x) | NAPO(x) -> POB(x))) # label(non_clause).  [assumption].
47 (all x (MOB(x) | SOB(x) -> NPOB(x))) # label(non_clause).  [assumption].
48 (all x (T(x) -> TR(x))) # label(non_clause).  [assumption].
49 (all x (S(x) -> PR(x))) # label(non_clause).  [assumption].
50 (all x (ASO(x) | NASO(x) -> SOB(x))) # label(non_clause).  [assumption].
51 (all x (SAG(x) | SC(x) -> ASO(x))) # label(non_clause).  [assumption].
52 (all x (PT(x) <-> ED(x) | PD(x) | Q(x) | AB(x))) # label(non_clause).  [assumption].
53 (all x (ED(x) -> -PD(x) & -Q(x) & -AB(x))) # label(non_clause).  [assumption].
54 (all x (PD(x) -> -Q(x) & -AB(x))) # label(non_clause).  [assumption].
55 (all x (Q(x) -> -AB(x))) # label(non_clause).  [assumption].
56 (all x (ED(x) <-> PED(x) | NPED(x) | AS(x))) # label(non_clause).  [assumption].
57 (all x (PED(x) -> -NPED(x) & -AS(x))) # label(non_clause).  [assumption].
58 (all x (NPED(x) -> -AS(x))) # label(non_clause).  [assumption].
59 (all x (PD(x) <-> EV(x) | STV(x))) # label(non_clause).  [assumption].
60 (all x (EV(x) -> -STV(x))) # label(non_clause).  [assumption].
61 (all x (Q(x) <-> TQ(x) | PQ(x) | AQ(x))) # label(non_clause).  [assumption].
62 (all x (TQ(x) -> -PQ(x) & -AQ(x))) # label(non_clause).  [assumption].
63 (all x (PQ(x) -> -AQ(x))) # label(non_clause).  [assumption].
64 (all x (PED(x) <-> M(x) | F(x) | POB(x))) # label(non_clause).  [assumption].
65 (all x (M(x) -> -F(x) & -POB(x))) # label(non_clause).  [assumption].
66 (all x (F(x) -> -POB(x))) # label(non_clause).  [assumption].
67 (all x (EV(x) <-> ACH(x) | ACC(x))) # label(non_clause).  [assumption].
68 (all x (ACH(x) -> -ACC(x))) # label(non_clause).  [assumption].
69 (all x (STV(x) <-> ST(x) | PRO(x))) # label(non_clause).  [assumption].
70 (all x (ST(x) -> -PRO(x))) # label(non_clause).  [assumption].
71 (all x (R(x) <-> TR(x) | PR(x) | AR(x))) # label(non_clause).  [assumption].
72 (all x (TR(x) -> -PR(x) & -AR(x))) # label(non_clause).  [assumption].
73 (all x (PR(x) -> -AR(x))) # label(non_clause).  [assumption].
74 (all x (POB(x) <-> APO(x) | NAPO(x))) # label(non_clause).  [assumption].
75 (all x (APO(x) -> -NAPO(x))) # label(non_clause).  [assumption].
76 (all x (NPOB(x) <-> MOB(x) | SOB(x))) # label(non_clause).  [assumption].
77 (all x (MOB(x) -> -SOB(x))) # label(non_clause).  [assumption].
78 (all x (SOB(x) <-> ASO(x) | NASO(x))) # label(non_clause).  [assumption].
79 (all x (ASO(x) -> -NASO(x))) # label(non_clause).  [assumption].
80 (all x (ASO(x) <-> SAG(x) | SC(x))) # label(non_clause).  [assumption].
81 (all x (SAG(x) -> -SC(x))) # label(non_clause).  [assumption].
82 (all x all y (in1(x,y) -> in1(y,x))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating point1/1
83 point1(x) | -T(x).  [clausify(6)].
84 -point1(x) | T(x).  [clausify(6)].

Eliminating line1/1
85 line1(x) | -PD(x).  [clausify(7)].
86 -line1(x) | PD(x).  [clausify(7)].

Eliminating plane1/1
87 plane1(x) | -ED(x).  [clausify(8)].
88 -plane1(x) | ED(x).  [clausify(8)].

Eliminating tin1/3
89 tin1(x,y,z) | -PC(x,y,z).  [clausify(10)].
90 -tin1(x,y,z) | PC(x,y,z).  [clausify(10)].

Eliminating part1/2
91 part1(x,y) | -P(x,y) | -T(x) | -T(y).  [clausify(11)].
92 -part1(x,y) | P(x,y).  [clausify(11)].
93 -part1(x,y) | T(x).  [clausify(11)].
94 -part1(x,y) | T(y).  [clausify(11)].

Eliminating L_1/1
95 L_1(x) | -ED(x).  [clausify(12)].
96 -L_1(x) | ED(x).  [clausify(12)].

Eliminating L_2/1
97 L_2(x) | -PD(x).  [clausify(13)].
98 -L_2(x) | PD(x).  [clausify(13)].

Eliminating L_3/1
99 L_3(x) | -Q(x).  [clausify(14)].
100 -L_3(x) | Q(x).  [clausify(14)].

Eliminating SUM/3
101 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | T(f13(x,y,z)).  [clausify(33)].
102 -PRE(x,y) | -PRE(x,z) | -SUM(u,y,z) | PRE(x,u).  [clausify(18)].
103 -T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [clausify(33)].
104 -T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | O(u,z) | -O(u,x).  [clausify(33)].
105 -T(x) | -T(y) | -T(z) | -SUM(z,x,y) | -T(u) | O(u,z) | -O(u,y).  [clausify(33)].
Derived: -T(x) | -T(y) | -T(z) | T(f13(x,y,z)) | -PRE(u,x) | -PRE(u,y) | PRE(u,z).  [resolve(101,d,102,c)].
Derived: -T(x) | -T(y) | -T(z) | T(f13(x,y,z)) | -T(x) | -T(y) | -T(z) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [resolve(101,d,103,d)].
Derived: -T(x) | -T(y) | -T(z) | T(f13(x,y,z)) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,x).  [resolve(101,d,104,d)].
Derived: -T(x) | -T(y) | -T(z) | T(f13(x,y,z)) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,y).  [resolve(101,d,105,d)].
106 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y).  [clausify(33)].
Derived: -T(x) | -T(y) | -T(z) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y) | -PRE(u,x) | -PRE(u,y) | PRE(u,z).  [resolve(106,d,102,c)].
Derived: -T(x) | -T(y) | -T(z) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [resolve(106,d,103,d)].
Derived: -T(x) | -T(y) | -T(z) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,x).  [resolve(106,d,104,d)].
Derived: -T(x) | -T(y) | -T(z) | O(f13(x,y,z),z) | O(f13(x,y,z),x) | O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,y).  [resolve(106,d,105,d)].
107 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x).  [clausify(33)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x) | -PRE(u,x) | -PRE(u,y) | PRE(u,z).  [resolve(107,d,102,c)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x) | -T(x) | -T(y) | -T(z) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [resolve(107,d,103,d)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,x).  [resolve(107,d,104,d)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),x) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,y).  [resolve(107,d,105,d)].
108 -T(x) | -T(y) | -T(z) | SUM(z,x,y) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y).  [clausify(33)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y) | -PRE(u,x) | -PRE(u,y) | PRE(u,z).  [resolve(108,d,102,c)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | -O(u,z) | O(u,x) | O(u,y).  [resolve(108,d,103,d)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,x).  [resolve(108,d,104,d)].
Derived: -T(x) | -T(y) | -T(z) | -O(f13(x,y,z),z) | -O(f13(x,y,z),y) | -T(x) | -T(y) | -T(z) | -T(u) | O(u,z) | -O(u,y).  [resolve(108,d,105,d)].

Eliminating DJ/2
109 -T(x) | -T(y) | -DJ(x,y) | -O(x,y).  [clausify(28)].
110 -T(x) | -T(y) | P(x,y) | DJ(f7(x,y),y).  [clausify(25)].
Derived: -T(f7(x,y)) | -T(y) | -O(f7(x,y),y) | -T(x) | -T(y) | P(x,y).  [resolve(109,c,110,d)].
111 -T(x) | -T(y) | DJ(x,y) | O(x,y).  [clausify(28)].

Eliminating U/2
112 -T(x) | -T(y) | U(x,y) | -P(x,z) | -P(y,z) | -T(z).  [clausify(29)].
113 -T(x) | -T(y) | -U(x,y) | P(x,f9(x,y)).  [clausify(29)].
114 -T(x) | -T(y) | -U(x,y) | P(y,f9(x,y)).  [clausify(29)].
115 -T(x) | -T(y) | -U(x,y) | T(f9(x,y)).  [clausify(29)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | P(x,f9(x,y)).  [resolve(112,c,113,c)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | P(y,f9(x,y)).  [resolve(112,c,114,c)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | T(f9(x,y)).  [resolve(112,c,115,c)].
116 -T(x) | -T(y) | -U(x,y) | T(f11(x,y)).  [clausify(31)].
Derived: -T(x) | -T(y) | T(f11(x,y)) | -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z).  [resolve(116,c,112,c)].
117 -T(x) | -T(y) | -U(x,y) | -T(z) | -O(z,f11(x,y)) | O(z,x) | O(z,y).  [clausify(31)].
Derived: -T(x) | -T(y) | -T(z) | -O(z,f11(x,y)) | O(z,x) | O(z,y) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(117,c,112,c)].
118 -T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f11(x,y)) | -O(z,x).  [clausify(31)].
Derived: -T(x) | -T(y) | -T(z) | O(z,f11(x,y)) | -O(z,x) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(118,c,112,c)].
119 -T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f11(x,y)) | -O(z,y).  [clausify(31)].
Derived: -T(x) | -T(y) | -T(z) | O(z,f11(x,y)) | -O(z,y) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(119,c,112,c)].

Eliminating AtP/1
120 AtP(x) | -T(x) | T(f10(x)).  [clausify(30)].
121 -AtP(x) | T(x).  [clausify(30)].
122 -AtP(x) | -T(y) | -P(y,x) | y = x.  [clausify(30)].
Derived: -T(x) | T(f10(x)) | -T(y) | -P(y,x) | y = x.  [resolve(120,a,122,a)].
123 AtP(x) | -T(x) | P(f10(x),x).  [clausify(30)].
Derived: -T(x) | P(f10(x),x) | -T(y) | -P(y,x) | y = x.  [resolve(123,a,122,a)].
124 AtP(x) | -T(x) | f10(x) != x.  [clausify(30)].
Derived: -T(x) | f10(x) != x | -T(y) | -P(y,x) | y = x.  [resolve(124,a,122,a)].

Eliminating PT/1
125 -PT(x) | ED(x) | PD(x) | Q(x) | AB(x).  [clausify(52)].
126 -ED(x) | PT(x).  [clausify(34)].
127 -PD(x) | PT(x).  [clausify(34)].
128 -Q(x) | PT(x).  [clausify(34)].
129 -AB(x) | PT(x).  [clausify(34)].
130 PT(x) | -ED(x).  [clausify(52)].
131 PT(x) | -PD(x).  [clausify(52)].
132 PT(x) | -Q(x).  [clausify(52)].
133 PT(x) | -AB(x).  [clausify(52)].

Eliminating PED/1
134 -M(x) | PED(x).  [clausify(39)].
135 -PED(x) | ED(x).  [clausify(35)].
Derived: -M(x) | ED(x).  [resolve(134,b,135,a)].
136 -F(x) | PED(x).  [clausify(39)].
Derived: -F(x) | ED(x).  [resolve(136,b,135,a)].
137 -POB(x) | PED(x).  [clausify(39)].
Derived: -POB(x) | ED(x).  [resolve(137,b,135,a)].
138 -ED(x) | PED(x) | NPED(x) | AS(x).  [clausify(56)].
139 ED(x) | -PED(x).  [clausify(56)].
140 -PED(x) | -NPED(x).  [clausify(57)].
Derived: -NPED(x) | -M(x).  [resolve(140,a,134,b)].
Derived: -NPED(x) | -F(x).  [resolve(140,a,136,b)].
Derived: -NPED(x) | -POB(x).  [resolve(140,a,137,b)].
141 -PED(x) | -AS(x).  [clausify(57)].
Derived: -AS(x) | -M(x).  [resolve(141,a,134,b)].
Derived: -AS(x) | -F(x).  [resolve(141,a,136,b)].
Derived: -AS(x) | -POB(x).  [resolve(141,a,137,b)].
142 -PED(x) | M(x) | F(x) | POB(x).  [clausify(64)].
Derived: M(x) | F(x) | POB(x) | -ED(x) | NPED(x) | AS(x).  [resolve(142,a,138,b)].
143 PED(x) | -M(x).  [clausify(64)].
144 PED(x) | -F(x).  [clausify(64)].
145 PED(x) | -POB(x).  [clausify(64)].

Eliminating NPED/1
146 -NPOB(x) | NPED(x).  [clausify(40)].
147 -NPED(x) | ED(x).  [clausify(35)].
Derived: -NPOB(x) | ED(x).  [resolve(146,b,147,a)].
148 ED(x) | -NPED(x).  [clausify(56)].
149 -NPED(x) | -AS(x).  [clausify(58)].
Derived: -AS(x) | -NPOB(x).  [resolve(149,a,146,b)].
150 -NPED(x) | -M(x).  [resolve(140,a,134,b)].
Derived: -M(x) | -NPOB(x).  [resolve(150,a,146,b)].
151 -NPED(x) | -F(x).  [resolve(140,a,136,b)].
Derived: -F(x) | -NPOB(x).  [resolve(151,a,146,b)].
152 -NPED(x) | -POB(x).  [resolve(140,a,137,b)].
Derived: -POB(x) | -NPOB(x).  [resolve(152,a,146,b)].
153 M(x) | F(x) | POB(x) | -ED(x) | NPED(x) | AS(x).  [resolve(142,a,138,b)].

Eliminating AS/1

Eliminating EV/1
154 -ACH(x) | EV(x).  [clausify(41)].
155 -EV(x) | PD(x).  [clausify(36)].
Derived: -ACH(x) | PD(x).  [resolve(154,b,155,a)].
156 -ACC(x) | EV(x).  [clausify(41)].
Derived: -ACC(x) | PD(x).  [resolve(156,b,155,a)].
157 -PD(x) | EV(x) | STV(x).  [clausify(59)].
158 PD(x) | -EV(x).  [clausify(59)].
159 -EV(x) | -STV(x).  [clausify(60)].
Derived: -STV(x) | -ACH(x).  [resolve(159,a,154,b)].
Derived: -STV(x) | -ACC(x).  [resolve(159,a,156,b)].
160 -EV(x) | ACH(x) | ACC(x).  [clausify(67)].
Derived: ACH(x) | ACC(x) | -PD(x) | STV(x).  [resolve(160,a,157,b)].
161 EV(x) | -ACH(x).  [clausify(67)].
162 EV(x) | -ACC(x).  [clausify(67)].

Eliminating STV/1
163 -ST(x) | STV(x).  [clausify(42)].
164 -STV(x) | PD(x).  [clausify(36)].
Derived: -ST(x) | PD(x).  [resolve(163,b,164,a)].
165 -PRO(x) | STV(x).  [clausify(42)].
Derived: -PRO(x) | PD(x).  [resolve(165,b,164,a)].
166 PD(x) | -STV(x).  [clausify(59)].
167 -STV(x) | ST(x) | PRO(x).  [clausify(69)].
168 STV(x) | -ST(x).  [clausify(69)].
169 STV(x) | -PRO(x).  [clausify(69)].
170 -STV(x) | -ACH(x).  [resolve(159,a,154,b)].
Derived: -ACH(x) | -ST(x).  [resolve(170,a,163,b)].
Derived: -ACH(x) | -PRO(x).  [resolve(170,a,165,b)].
171 -STV(x) | -ACC(x).  [resolve(159,a,156,b)].
Derived: -ACC(x) | -ST(x).  [resolve(171,a,163,b)].
Derived: -ACC(x) | -PRO(x).  [resolve(171,a,165,b)].
172 ACH(x) | ACC(x) | -PD(x) | STV(x).  [resolve(160,a,157,b)].
Derived: ACH(x) | ACC(x) | -PD(x) | ST(x) | PRO(x).  [resolve(172,d,167,a)].

Eliminating TQ/1
173 -TL(x) | TQ(x).  [clausify(43)].
174 -TQ(x) | Q(x).  [clausify(37)].
Derived: -TL(x) | Q(x).  [resolve(173,b,174,a)].
175 -Q(x) | TQ(x) | PQ(x) | AQ(x).  [clausify(61)].
176 Q(x) | -TQ(x).  [clausify(61)].
177 -TQ(x) | -PQ(x).  [clausify(62)].
Derived: -PQ(x) | -TL(x).  [resolve(177,a,173,b)].
178 -TQ(x) | -AQ(x).  [clausify(62)].
Derived: -AQ(x) | -TL(x).  [resolve(178,a,173,b)].

Eliminating PQ/1
179 -SL(x) | PQ(x).  [clausify(44)].
180 -PQ(x) | Q(x).  [clausify(37)].
Derived: -SL(x) | Q(x).  [resolve(179,b,180,a)].
181 Q(x) | -PQ(x).  [clausify(61)].
182 -PQ(x) | -AQ(x).  [clausify(63)].
Derived: -AQ(x) | -SL(x).  [resolve(182,a,179,b)].
183 -PQ(x) | -TL(x).  [resolve(177,a,173,b)].
Derived: -TL(x) | -SL(x).  [resolve(183,a,179,b)].

Eliminating AQ/1

Eliminating R/1
184 -TR(x) | R(x).  [clausify(45)].
185 -R(x) | AB(x).  [clausify(38)].
Derived: -TR(x) | AB(x).  [resolve(184,b,185,a)].
186 -PR(x) | R(x).  [clausify(45)].
Derived: -PR(x) | AB(x).  [resolve(186,b,185,a)].
187 -AR(x) | R(x).  [clausify(45)].
Derived: -AR(x) | AB(x).  [resolve(187,b,185,a)].
188 -R(x) | TR(x) | PR(x) | AR(x).  [clausify(71)].
189 R(x) | -TR(x).  [clausify(71)].
190 R(x) | -PR(x).  [clausify(71)].
191 R(x) | -AR(x).  [clausify(71)].

Eliminating APO/1
192 -POB(x) | APO(x) | NAPO(x).  [clausify(74)].
193 -APO(x) | POB(x).  [clausify(46)].
194 POB(x) | -APO(x).  [clausify(74)].
195 -APO(x) | -NAPO(x).  [clausify(75)].

Eliminating NAPO/1

Eliminating MOB/1
196 -NPOB(x) | MOB(x) | SOB(x).  [clausify(76)].
197 -MOB(x) | NPOB(x).  [clausify(47)].
198 NPOB(x) | -MOB(x).  [clausify(76)].
199 -MOB(x) | -SOB(x).  [clausify(77)].

Eliminating SOB/1
200 -ASO(x) | SOB(x).  [clausify(50)].
201 -SOB(x) | NPOB(x).  [clausify(47)].
Derived: -ASO(x) | NPOB(x).  [resolve(200,b,201,a)].
202 -NASO(x) | SOB(x).  [clausify(50)].
Derived: -NASO(x) | NPOB(x).  [resolve(202,b,201,a)].
203 NPOB(x) | -SOB(x).  [clausify(76)].
204 -SOB(x) | ASO(x) | NASO(x).  [clausify(78)].
205 SOB(x) | -ASO(x).  [clausify(78)].
206 SOB(x) | -NASO(x).  [clausify(78)].

Eliminating TR/1
207 -TR(x) | -PR(x).  [clausify(72)].
208 -T(x) | TR(x).  [clausify(48)].
Derived: -PR(x) | -T(x).  [resolve(207,a,208,b)].
209 -TR(x) | -AR(x).  [clausify(72)].
Derived: -AR(x) | -T(x).  [resolve(209,a,208,b)].
210 -TR(x) | AB(x).  [resolve(184,b,185,a)].
Derived: AB(x) | -T(x).  [resolve(210,a,208,b)].

Eliminating S/1

Eliminating SAG/1
211 -ASO(x) | SAG(x) | SC(x).  [clausify(80)].
212 -SAG(x) | ASO(x).  [clausify(51)].
213 ASO(x) | -SAG(x).  [clausify(80)].
214 -SAG(x) | -SC(x).  [clausify(81)].

Eliminating SC/1

Eliminating AB/1
215 -PR(x) | AB(x).  [resolve(186,b,185,a)].
216 -ED(x) | -AB(x).  [clausify(53)].
217 -PD(x) | -AB(x).  [clausify(54)].
218 -Q(x) | -AB(x).  [clausify(55)].
Derived: -PR(x) | -ED(x).  [resolve(215,b,216,b)].
Derived: -PR(x) | -PD(x).  [resolve(215,b,217,b)].
Derived: -PR(x) | -Q(x).  [resolve(215,b,218,b)].
219 -AR(x) | AB(x).  [resolve(187,b,185,a)].
Derived: -AR(x) | -ED(x).  [resolve(219,b,216,b)].
Derived: -AR(x) | -PD(x).  [resolve(219,b,217,b)].
Derived: -AR(x) | -Q(x).  [resolve(219,b,218,b)].
220 AB(x) | -T(x).  [resolve(210,a,208,b)].
Derived: -T(x) | -ED(x).  [resolve(220,a,216,b)].
Derived: -T(x) | -PD(x).  [resolve(220,a,217,b)].
Derived: -T(x) | -Q(x).  [resolve(220,a,218,b)].

Eliminating M/1

Eliminating F/1

Eliminating ACH/1
221 ACH(x) | ACC(x) | -PD(x) | ST(x) | PRO(x).  [resolve(172,d,167,a)].
222 -ACH(x) | -ACC(x).  [clausify(68)].
223 -ACH(x) | PD(x).  [resolve(154,b,155,a)].
224 -ACH(x) | -ST(x).  [resolve(170,a,163,b)].
225 -ACH(x) | -PRO(x).  [resolve(170,a,165,b)].

Eliminating ST/1

Eliminating PR/1

Eliminating ASO/1

Eliminating POB/1

Eliminating NPOB/1
226 -NASO(x) | NPOB(x).  [resolve(202,b,201,a)].
227 -NPOB(x) | ED(x).  [resolve(146,b,147,a)].
Derived: -NASO(x) | ED(x).  [resolve(226,b,227,a)].

Eliminating ACC/1

Eliminating PRO/1

Eliminating TL/1

Eliminating SL/1

Eliminating AR/1

Eliminating NASO/1

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, T, ED, PD, Q, O, P, PRE, in1, PP, PC ]).
Function symbol precedence:  function_order([ c1, c2, f1, f6, f7, f8, f9, f11, f12, f2, f3, f5, f10, f4, f13 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.10 seconds.

============================== PROOF =================================

% Proof 1 at 0.13 (+ 0.01) seconds.
% Length of proof is 37.
% Level of proof is 8.
% Maximum clause weight is 18.000.
% Given clauses 234.

1 (all x all y all t (PC(x,y,t) -> ED(x) & PD(y) & T(t))) # label(non_clause).  [assumption].
5 (all x all y all t (PC(x,y,t) <-> (all t1 (P(t1,t) -> PC(x,y,t1))))) # label(non_clause).  [assumption].
9 (all x all y (in1(x,y) <-> PRE(x,y) & T(y) & (ED(x) | PD(x) | Q(x)) | PRE(y,x) & T(x) & (ED(y) | PD(y) | Q(y)) | x = y & (ED(y) | PD(y) | Q(y) | T(y)))) # label(non_clause).  [assumption].
19 (all x all y (P(x,y) -> T(y) & T(y))) # label(non_clause).  [assumption].
38 (all x (R(x) -> AB(x))) # label(non_clause).  [assumption].
45 (all x (TR(x) | PR(x) | AR(x) -> R(x))) # label(non_clause).  [assumption].
48 (all x (T(x) -> TR(x))) # label(non_clause).  [assumption].
53 (all x (ED(x) -> -PD(x) & -Q(x) & -AB(x))) # label(non_clause).  [assumption].
54 (all x (PD(x) -> -Q(x) & -AB(x))) # label(non_clause).  [assumption].
55 (all x (Q(x) -> -AB(x))) # label(non_clause).  [assumption].
82 (all x all y (in1(x,y) -> in1(y,x))) # label(non_clause) # label(goal).  [goal].
184 -TR(x) | R(x).  [clausify(45)].
185 -R(x) | AB(x).  [clausify(38)].
208 -T(x) | TR(x).  [clausify(48)].
210 -TR(x) | AB(x).  [resolve(184,b,185,a)].
216 -ED(x) | -AB(x).  [clausify(53)].
217 -PD(x) | -AB(x).  [clausify(54)].
218 -Q(x) | -AB(x).  [clausify(55)].
220 AB(x) | -T(x).  [resolve(210,a,208,b)].
230 -PC(x,y,z) | T(z).  [clausify(1)].
236 PC(x,y,z) | P(f4(x,y,z),z).  [clausify(5)].
246 -in1(x,y) | ED(x) | PD(x) | Q(x) | ED(y) | PD(y) | Q(y) | y = x.  [clausify(9)].
262 -P(x,y) | T(y).  [clausify(19)].
286 in1(c1,c2).  [deny(82)].
287 -in1(c2,c1).  [deny(82)].
335 -T(x) | -ED(x).  [resolve(220,a,216,b)].
336 -T(x) | -PD(x).  [resolve(220,a,217,b)].
337 -T(x) | -Q(x).  [resolve(220,a,218,b)].
485 P(f4(x,y,z),z) | T(z).  [resolve(236,a,230,a)].
489 ED(c1) | PD(c1) | Q(c1) | ED(c2) | PD(c2) | Q(c2) | c2 = c1.  [resolve(286,a,246,a)].
509 T(x).  [resolve(485,a,262,a),merge(b)].
619 -Q(x).  [back_unit_del(337),unit_del(a,509)].
620 -PD(x).  [back_unit_del(336),unit_del(a,509)].
621 -ED(x).  [back_unit_del(335),unit_del(a,509)].
666 c2 = c1.  [back_unit_del(489),unit_del(a,621),unit_del(b,620),unit_del(c,619),unit_del(d,621),unit_del(e,620),unit_del(f,619)].
671 -in1(c1,c1).  [back_rewrite(287),rewrite([666(1)])].
672 $F.  [back_rewrite(286),rewrite([666(2)]),unit_del(a,671)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=234. Generated=1172. Kept=424. proofs=1.
Usable=8. Sos=56. Demods=1. Limbo=6, Disabled=635. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=747. Back_subsumed=187.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=1 (0 lex), Back_demodulated=2. Back_unit_deleted=165.
Demod_attempts=418. Demod_rewrites=2.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=2892. Nonunit_bsub_feature_tests=4721.
Megabytes=0.91.
User_CPU=0.13, System_CPU=0.01, Wall_clock=2.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 15868 exit (max_proofs) Mon Sep 30 23:51:24 2013
