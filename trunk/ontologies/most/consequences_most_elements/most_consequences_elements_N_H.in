% Saved by Prover9-Mace4 Version 0.5, December 2007.

set(ignore_option_dependencies). % GUI handles dependencies

if(Prover9). % Options for Prover9
  assign(max_seconds, 600).
end_if.

if(Mace4).   % Options for Mace4
  assign(max_seconds, 600).
end_if.

formulas(assumptions).

% 'http://colore.oor.net/most/most_root.clif'
% 'An atom can be bonded if there exists another atom for which it can be bonded.'
% all x ((atom(x) ->  exists b exists y ((atom(y) & hasBond(b, x, y))))).
% 'A bond is possible between two atoms.'
% all b ((bond(b) ->  exists x exists y (hasBond(b, x, y)))).
% 'An atom x is in a functional group y.'
% all x all y ((inGroup(x, y) -> (atom(x) & functional_group(y)))).
% 'Two atoms are bonded if a bond exists between them.'
 all b all x all y ((hasBond(b, x, y) -> (bond(b) & atom(x) & atom(y)))).
% 'Additional axioms to ensure that the same bond can only be between two atoms.'
 all b all x all y all z (((hasBond(b, x, y) & hasBond(b, x, z)) -> (y = z))).
 all b all x all y all z (((hasBond(b, x, y) & hasBond(b, z, y)) -> (x = z))).
% 'A bond is symmetric between two atoms.'
 all b all x all y ((hasBond(b, x, y) -> hasBond(b, y, x))).
% 'An atom cannot bond to itself.'
 all b all x (-(hasBond(b, x, x))).
% 'A bond is related to at most two atoms.'
 all b ((bond(b) ->  exists x exists y ((hasBond(b, x, y) & -((x = y)))))).
% 'A bond is related to at least two atoms.'
 all b all x all y all z (((bond(b) & hasBond(b, x, y) & hasBond(b, x, z)) -> (y = z))).
% 'Every group is in a molecule.'
% all x ((functional_group(x) ->  exists y ((molecule(y) & containsGroup(y, x))))).
% 'Every group is contained in a unique molecule.'
% all x ((functional_group(x) ->  exists y ((molecule(y) & containsGroup(y, x) & -( exists w ((molecule(w) & containsGroup(y, w) & -((w = y))))))))).
% 'A functional group is in a molecule if the group is in the molecule.'
% all x all y ((containsGroup(x, y) -> (molecule(x) & functional_group(y)))).
% 'Definition for an end atom in a linear functional group.'
% all x all y ((end(x, y) <-> (inGroup(x, y) &  all b1 all b2 all w all z (((hasBond(b1, x, z) & hasBond(b2, x, w) & inGroup(z, y) & inGroup(w, y)) -> (w = z)))))).
% 'Definition for a fork atom in a branched functional group: an atom in the same functional group has at least 3 other atoms in bonds.'
% all x all y ((fork(x, y) <-> (inGroup(x, y) &  exists b1 exists b2 exists b3 exists a1 exists a2 exists a3 ((-((b1 = b2)) & -((b2 = b3)) & -((b1 = b3)) & hasBond(b1, x, a1) & hasBond(b2, x, a2) & hasBond(b3, x, a3) & inGroup(a1, y) & inGroup(a2, y) & inGroup(a3, y)))))).
% 'Disjointness axioms for atom(x), bond(x), functional_group(x), and molecule(x).'
% all x ((molecule(x) -> -((atom(x) | bond(x) | functional_group(x))))).
% all x ((atom(x) -> -((bond(x) | functional_group(x))))).
% all x ((bond(x) -> -(functional_group(x)))).
% 'For every functional group, there exists an atom that is in the group.'
% all x ((functional_group(x) ->  exists a ((atom(a) & inGroup(a, x))))).
% 'Group-Bond Relationship: A bond is in a functional group iff both of its atoms are in the functional group.'
% all x all y ((bondGroup(x, y) <-> (bond(x) & functional_group(y) &  exists w exists z ((atom(z) & atom(w) & inGroup(z, y) & inGroup(w, y) & hasBond(x, z, w)))))).
% 'Molecule-Atom Relationship: An atom is in a molecule iff it is in a group that is contained in the molecule.'
% all x all y ((inMolecule(x, y) <-> (atom(x) & molecule(y) &  exists w exists z ((functional_group(z) & inGroup(x, z) & containsGroup(y, z)))))).
% 'Molecule-Bond Relationship: A bond is in a molecule iff it is in a group that is contained in the molecule.'
% all x all y ((molecularBond(x, y) <-> (bond(x) & molecule(y) &  exists w exists z ((functional_group(z) & bondGroup(x, z) & containsGroup(y, z)))))).
% 'Group-Atom Relationship: For every functional group, there exists an atom that is in the group.'
% all x ((atom(x) ->  exists b exists y exists z ((functional_group(y) & atom(z) & hasBond(b, x, z) & inGroup(z, y))))).

% 'http://colore.oor.net/most/most_bonds.clif'
% 'Theory containing definitions for the types of bonds between atoms.'
% 'A single bond is a bond.'
% all b all x all y ((singlebond(b, x, y) <-> (bond(b) & hasBond(b, x, y) &  all b2 ((hasBond(b2, x, y) -> (b = b2)))))).
% 'A double bond is a bond.'
% all b all x all y ((doublebond(b, x, y) <->  exists b2 ((bond(b2) & hasBond(b, x, y) & hasBond(b2, x, y) & -((b = b2)))))).
% 'A triple bond is a bond.'
% all b all x all y ((triplebond(b, x, y) <->  exists b2 exists b3 ((bond(b2) & bond(b3) & hasBond(b, x, y) & hasBond(b2, x, y) & hasBond(b3, x, y) & -((b = b2)) & -((b = b2)) & -((b2 = b3)))))).

% 'Axioms to prevent trivial models from being generated from Mace4.'
% exists x (molecule(x)).
% exists x (atom(x)).
% exists x (functional_group(x)).
% exists x (bond(x)).

% 'http://colore.oor.net/most/most_elements.clif'
% 'Valence Class Definitions'
% 'Single Valence'
% all x ((singlevalence(x) <-> (atom(x) &  all b1 all b2 all a1 all a2 (((hasBond(b1, a1, x) & hasBond(b2, a2, x)) -> (b1 = b2)))))).
% 'Double Valence'
% all x ((doublevalence(x) <-> (atom(x) &  all b1 all b2 all b3 all a1 all a2 all a3 (((hasBond(b1, a1, x) & hasBond(b2, a2, x) & hasBond(b3, a3, x)) -> ((b1 = b2) | (b1 = b3) | (b2 = b3))))))).
% 'Triple Valence'
% all x ((triplevalence(x) <-> (atom(x) &  all b1 all b2 all b3 all b4 all a1 all a2 all a3 all a4 (((hasBond(b1, a1, x) & hasBond(b2, a2, x) & hasBond(b3, a3, x) & hasBond(b4, a4, x)) -> ((b1 = b2) | (b1 = b3) | (b1 = b4) | (b2 = b3) | (b2 = b4) | (b3 = b4))))))).
% 'Quad Valence'
% all x ((quadvalence(x) <-> (atom(x) &  all b1 all b2 all b3 all b4 all b5 all a1 all a2 all a3 all a4 all a5 (((hasBond(b1, a1, x) & hasBond(b2, a2, x) & hasBond(b3, a3, x) & hasBond(b4, a4, x) & hasBond(b5, a5, x)) -> ((b1 = b2) | (b1 = b3) | (b1 = b4) | (b1 = b5) | (b2 = b3) | (b2 = b4) | (b2 = b5) | (b3 = b4) | (b3 = b5) | (b4 = b5))))))).
% 'New valence classes for elements.'
% 'These axioms indicate that they can have at most a certain number of bonds.'
% all x ((hydrogen(x) -> singlevalence(x))).
% all x ((oxygen(x) -> doublevalence(x))).
% all x ((nitrogen(x) -> triplevalence(x))).
% all x ((carbon(x) -> quadvalence(x))).
% '========Hydrogen========'
% 'Hydrogen has at least 1 covalent bond.'
 all x ((hydrogen(x) -> (atom(x) &  exists a1 exists b1 ((atom(a1) & hasBond(b1, a1, x)))))).
% 'Hydrogen has at most 1 covalent bond.'
 all x all a1 all a2 all b1 all b2 (((hydrogen(x) & hasBond(b1, a1, x) & hasBond(b2, a2, x)) -> (b1 = b2))).
% '========Oxygen========'
% 'Oxygen has exactly 2 covalent bonds.'
% all x ((oxygen(x) -> (atom(x) &  exists a1 exists b1 exists a2 exists b2 ((atom(a1) & atom(a2) & -((a1 = a2)) & -((b1 = b2)) & hasBond(b1, a1, x) & hasBond(b2, a2, x)))))).
% all x all a1 all a2 all a3 all b1 all b2 all b3 (((oxygen(x) & hasBond(b1, a1, x) & hasBond(b2, a2, x) & hasBond(b3, a3, x)) -> ((b1 = b2) | (b1 = b3) | (b2 = b3)))).
% '========Nitrogen========'
% 'Nitrogen has exactly 3 covalent bonds.'
 all x ((nitrogen(x) -> (atom(x) &  exists a1 exists a2 exists a3 exists b1 exists b2 exists b3 ((atom(a1) & atom(a2) & atom(a3) & -((a1 = a2)) & -((a1 = a3)) & -((a2 = a3)) & -((b1 = b2)) & -((b2 = b3)) & -((b1 = b3)) & hasBond(b1, a1, x) & hasBond(b2, a2, x) & hasBond(b3, a3, x)))))).
 all x all a1 all a2 all a3 all a4 all b1 all b2 all b3 all b4 (((nitrogen(x) & hasBond(b1, a1, x) & hasBond(b2, a2, x) & hasBond(b3, a3, x) & hasBond(b4, a4, x)) -> ((b1 = b2) | (b1 = b3) | (b1 = b4) | (b2 = b3) | (b2 = b4) | (b3 = b4)))).
% '========Carbon========'
% 'Carbon has exactly 4 covalent bonds.'
% all x ((carbon(x) -> (atom(x) &  exists a1 exists a2 exists a3 exists a4 exists b1 exists b2 exists b3 exists b4 ((atom(a1) & atom(a2) & atom(a3) & atom(a4) & -((a1 = a2)) & -((a1 = a3)) & -((a2 = a3)) & -((a2 = a4)) & -((a3 = a4)) & -((b1 = b2)) & -((b2 = b3)) & -((b1 = b3)) & -((b1 = b4)) & -((b3 = b4)) & hasBond(b1, a1, x) & hasBond(b2, a2, x) & hasBond(b3, a3, x) & hasBond(b4, a4, x)))))).
% all x all a1 all a2 all a3 all a4 all a5 all b1 all b2 all b3 all b4 all b5 (((carbon(x) & hasBond(b1, a1, x) & hasBond(b2, a2, x) & hasBond(b3, a3, x) & hasBond(b4, a4, x) & hasBond(b5, a5, x)) -> ((b1 = b2) | (b1 = b3) | (b1 = b4) | (b1 = b5) | (b2 = b3) | (b2 = b4) | (b2 = b5) | (b3 = b4) | (b3 = b5) | (b4 = b5)))).
% 'A halogen is a fluorine, chlorine, bromine, iodine or astatine atom.'
% all x ((halogen(x) -> (fluorine(x) | chlorine(x) | bromine(x) | iodine(x) | astatine(x)))).

end_of_list.

formulas(goals).

%all x ((oxygen(x) -> -(hydrogen(x)))).
%all x ((nitrogen(x) -> -(oxygen(x)))).
%all x ((carbon(x) -> -(nitrogen(x)))).
all x ((nitrogen(x) -> -(hydrogen(x)))).

end_of_list.

