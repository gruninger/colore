/*******************************************************************************
 * Copyright (c) University of Toronto and others. All rights reserved. 
 * The content of this file is licensed under the Creative Commons Attribution-
 * ShareAlike 3.0 Unported license. The legal text of this license can be
 * found at http://creativecommons.org/licenses/by-sa/3.0/legalcode.
 *
 * Contributors:
 *    Michael Gruninger, Carmen Chui
 *******************************************************************************/
 
(cl-text http://colore.oor.net/psl_core/mandatory

(cl-imports http://colore.oor.net/interval_psl/interval_psl_core)

(cl-comment "Source: Michael Gruninger, Carmen Chui")
(cl-comment "Comment: New relation to have mandatory participation of objects in a time object.")
(cl-comment "Every object has to participate in some time object.")
(forall (x)
	(if (object x)
		(exists (o t)
			(participatesin x o t))))

(cl-comment "Source: psl_core")
(cl-comment "Comment: ALL of the axioms below are from psl_core.  We have removed between and before relations.")

(cl-comment "Source: psl_core")
(cl-comment "Objects, activities, activity occurrences, and timepoints are all
distinct kinds of things.")
(forall (x)
	(and (if (activity x)
		(not (or (activity_occurrence x) (object x) (timepoint x))))
		(if (activity_occurrence x)
			(not (or (object x) (timepoint x))))
		(if (object x)
			(not (timepoint x)))))

(cl-comment "Source: psl_core")
(cl-comment "The occurrence relation only holds between activities and
activity occurrences.")
(forall (a occ)
	(if (occurrence_of occ a)
		(and (activity a)
			(activity_occurrence occ))))

(cl-comment "Source: psl_core")
(cl-comment "Every activity occurrence is the occurrence of some activity.")
(forall (occ)
	(if (activity_occurrence occ)
		(exists (a)
			(and (activity a)
				(occurrence_of occ a)))))

(cl-comment "Source: psl_core")
(cl-comment "An activity occurrence is associated with a unique activity.")
(forall (occ a1 a2)
	(if (and (occurrence_of occ a1)
		(occurrence_of occ a2))
		(= a1 a2)))

(cl-comment "Source: psl_core")
(cl-comment "The begin and end of an activity occurrence or object are timepoints.")
(forall (a x)
	(if (or (occurrence_of x a)
		(object x))
		(and (timepoint (beginof x))
			(timepoint (endof x)))))

(cl-comment "Source: psl_core")
(cl-comment "The begin point of every activity occurrence or object is
before or equal to its end point.")
(forall (x)
	(if (or (activity_occurrence x)
		(object x))
		(beforeEq (beginof x) (endof x))))

(cl-comment "Source: psl_core")
(cl-comment "The participates_in relation only holds between objects,
activity occurrences, and timepoints, respectively.")
(forall (x occ t)
	(if (participates_in x occ t)
		(and (object x)
			(activity_occurrence occ)
			(timepoint t))))

(cl-comment "Source: psl_core")
(cl-comment "An object can participate in an activity
occurrence only at those timepoints at which both the object exists and
the activity is occurring.")
(forall (x occ t)
	(if (participates_in x occ t)
		(and (exists_at x t)
			(is_occurring_at occ t))))

(cl-comment "Definition of between has been removed.")

(cl-comment "Source: psl_core")
(cl-comment "Timepoint t1 is beforeEq timepoint t2 if and only if t1 is before or equal
to t2.")
(forall (t1 t2)
	(iff (beforeEq t1 t2)
		(and (timepoint t1) (timepoint t2)
			(or (before t1 t2) (= t1 t2)))))

(cl-comment "Source: psl_core")
(cl-comment "Timepoint t2 is betweenEq timepoints t1 and t3 if and only if
t1 is before or equal to t2, and t2 is before or equal to t3.")
(forall (t1 t2 t3)
	(iff (betweenEq t1 t2 t3)
		(and (beforeEq t1 t2)
			(beforeEq t2 t3))))

(cl-comment "Source: psl_core")
(cl-comment "An object exists at a timepoint t if and only if t is betweenEq its begin
and end points.")
(forall (x t)
	(iff (exists_at x t)
		(and (object x)
			(betweenEq (beginof x) t (endof x)))))

(cl-comment "Source: psl_core")
(cl-comment "An activity is occurring at a timepoint t if and only if t
is betweenEq the begin and end points of the activity occurrence.")
(forall (occ t)
	(iff (is_occurring_at occ t)
		(betweenEq (beginof occ) t (endof occ))))

)
