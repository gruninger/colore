% Automatically generated from CL/KIF
formulas(sos).
% downward_m_foliation_u_cem_wmg
% '--------------------cem_wmg---------------'
 all x all y ((in(x, y) -> in(y, x))).
 all x (in(x, x)).
 all x ((point(x) <-> -(line(x)))).
 all x all y ((in(x, y) & point(x) & point(y) -> (x = y))).
 all x all y ((in(x, y) & line(x) & line(y) -> (x = y))).
 all x ((line(x) ->  exists y (point(y) & in(y, x)))).
 all x ((point(x) -> part(x, x))).
 all x all y ((part(x, y) & part(y, x) -> (x = y))).
 all x all y all z ((part(x, y) & part(y, z) -> part(x, z))).
 all x all y ((part(x, y) -> point(x) & point(y))).
% 'imports cm_mereology'
% 'imports em_mereology'
% 'imports mereology_def'
% 'Sum'
 all x all y ((underlaps(x, y) ->  exists z ( all v ((overlaps(v, z) <-> overlaps(v, x) | overlaps(v, y)))))).
% 'Product'
 all x all y ((overlaps(x, y) ->  exists z ( all v ((ppart(v, z) <-> ppart(v, x) & ppart(v, y)))))).
% 'Strong Supplementation Principle'
 all x all y ((-(part(x, y)) ->  exists z (part(z, x) & disjoint(z, y)))).
 all x (part(x, x)).
 all x all y ((part(x, y) & part(y, x) -> (x = y))).
 all x all y all z ((part(x, y) & part(y, z) -> part(x, z))).
 all x all y ((ppart(x, y) <-> part(x, y) & -(part(y, x)))).
 all x all y ((overlaps(x, y) <->  exists z (part(z, x) & part(z, y)))).
 all x all y ((disjoint(x, y) <-> -(overlaps(x, y)))).
 all x all y ((underlaps(x, y) <->  exists z (part(x, z) & part(y, z)))).
 all x ((atomic_part(x) <->  all y ((part(y, x) -> (y = x))))).
% '--------------------downward_m_foliation-----------------'
% 'imports m_foliation_root'
 all x (part(x, x)).
 all x all y ((part(x, y) & part(y, x) -> (x = y))).
 all x all y all z ((part(x, y) & part(y, z) -> part(x, z))).
 all x all y ((ppart(x, y) <-> part(x, y) & -(part(y, x)))).
 all x all y ((overlaps(x, y) <->  exists z (part(z, x) & part(z, y)))).
 all x all y ((disjoint(x, y) <-> -(overlaps(x, y)))).
 all x all y ((underlaps(x, y) <->  exists z (part(x, z) & part(y, z)))).
 all x ((atomic_part(x) <->  all y ((part(y, x) -> (y = x))))).
 all x all y ((in(x, y) -> in(y, x))).
 all x (in(x, x)).
 all x ((point(x) <-> -(line(x)))).
 all x all y ((in(x, y) & point(x) & point(y) -> (x = y))).
 all x all y ((in(x, y) & line(x) & line(y) -> (x = y))).
 all x ((line(x) ->  exists y (point(y) & in(y, x)))).
 all x ((point(x) -> part(x, x))).
 all x all y ((part(x, y) & part(y, x) -> (x = y))).
 all x all y all z ((part(x, y) & part(y, z) -> part(x, z))).
 all x all y ((part(x, y) -> point(x) & point(y))).
 all x all y ((in(x, y) -> in(y, x))).
 all x (in(x, x)).
 all p ((point(p) -> -(line(p)))).
 all x all y ((in(x, y) & point(x) & point(y) -> (x = y))).
 all x all y ((in(x, y) & line(x) & line(y) -> (x = y))).
 all x all y all p ((tpart(x, y, p) -> line(x) & line(y) & point(p))).
 all x all y all p ((tpart(x, y, p) -> in(x, p) & in(y, p))).
 all x all p ((line(x) -> tpart(x, x, p))).
 all x all y all p ((tpart(x, y, p) & tpart(y, x, p) -> (x = y))).
 all x all y all z all p ((tpart(x, y, p) & tpart(y, z, p) -> tpart(x, z, p))).
 all x all y all p1 all p2 ((tpart(x, y, p1) & part(p2, p1) -> tpart(x, y, p2))).

end_of_list.
