============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 10168 was started by cchui on stl1.mie.utoronto.ca,
Tue Mar 26 21:36:56 2013
The command was "mace4 -c -t 600 -s 600 -n 2 -N 20 -f test/p9/20130326/dolce_time_mereology/cem_mereology.p9 test/p9/20130326/dolce_time_mereology/dolce_time_mereology_reduction.p9 test/p9/20130326/dolce_time_mereology/cm_mereology.p9 test/p9/20130326/dolce_time_mereology/em_mereology.p9 test/p9/20130326/dolce_time_mereology/mereology_def.p9 test/p9/20130326/dolce_time_mereology/sum_mereology.p9 test/p9/20130326/dolce_time_mereology/prod_mereology.p9 test/p9/20130326/dolce_time_mereology/m_mereology.p9 test/p9/20130326/dolce_time_mereology/ex0326_reduction_9.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file test/p9/20130326/dolce_time_mereology/cem_mereology.p9


formulas(sos).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/dolce_time_mereology_reduction.p9


formulas(sos).
(all x (T(x) <-> x = x)).
(all x all y (P(x,y) <-> part(x,y))).
(all x all y (O(x,y) <-> overlaps(x,y))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/cm_mereology.p9


formulas(sos).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/em_mereology.p9


formulas(sos).
(all x all y (-part(x,y) -> (exists z (part(z,x) & disjoint(z,y))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/mereology_def.p9


formulas(sos).
(all x all y (ppart(x,y) <-> part(x,y) & -part(y,x))).
(all x all y (overlaps(x,y) <-> (exists z (part(z,x) & part(z,y))))).
(all x all y (disjoint(x,y) <-> -overlaps(x,y))).
(all x all y (underlaps(x,y) <-> (exists z (part(x,z) & part(y,z))))).
(all x (atomic_part(x) <-> (all y (part(y,x) -> y = x)))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/sum_mereology.p9


formulas(sos).
(all x all y (underlaps(x,y) -> (exists z all v (overlaps(v,z) <-> overlaps(v,x) | overlaps(v,y))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/prod_mereology.p9


formulas(sos).
(all x all y (overlaps(x,y) -> (exists z all v (ppart(v,z) <-> ppart(v,x) & ppart(v,y))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/m_mereology.p9


formulas(sos).
(all x part(x,x)).
(all x all y (part(x,y) & part(y,x) -> x = y)).
(all x all y all z (part(x,y) & part(y,z) -> part(x,z))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/ex0326_reduction_9.p9


formulas(goals).
(all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))).
end_of_list.

% From the command line: assign(max_seconds, 600).

% From the command line: assign(max_seconds_per, 600).
    % assign(domain_size, 2) -> assign(start_size, 2).
    % assign(domain_size, 2) -> assign(end_size, 2).

% From the command line: assign(domain_size, 2).

% From the command line: assign(end_size, 20).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x (T(x) <-> x = x)) # label(non_clause).  [assumption].
2 (all x all y (P(x,y) <-> part(x,y))) # label(non_clause).  [assumption].
3 (all x all y (O(x,y) <-> overlaps(x,y))) # label(non_clause).  [assumption].
4 (all x all y (-part(x,y) -> (exists z (part(z,x) & disjoint(z,y))))) # label(non_clause).  [assumption].
5 (all x all y (ppart(x,y) <-> part(x,y) & -part(y,x))) # label(non_clause).  [assumption].
6 (all x all y (overlaps(x,y) <-> (exists z (part(z,x) & part(z,y))))) # label(non_clause).  [assumption].
7 (all x all y (disjoint(x,y) <-> -overlaps(x,y))) # label(non_clause).  [assumption].
8 (all x all y (underlaps(x,y) <-> (exists z (part(x,z) & part(y,z))))) # label(non_clause).  [assumption].
9 (all x (atomic_part(x) <-> (all y (part(y,x) -> y = x)))) # label(non_clause).  [assumption].
10 (all x all y (underlaps(x,y) -> (exists z all v (overlaps(v,z) <-> overlaps(v,x) | overlaps(v,y))))) # label(non_clause).  [assumption].
11 (all x all y (overlaps(x,y) -> (exists z all v (ppart(v,z) <-> ppart(v,x) & ppart(v,y))))) # label(non_clause).  [assumption].
12 (all x part(x,x)) # label(non_clause).  [assumption].
13 (all x all y (part(x,y) & part(y,x) -> x = y)) # label(non_clause).  [assumption].
14 (all x all y all z (part(x,y) & part(y,z) -> part(x,z))) # label(non_clause).  [assumption].
15 (all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-T(x) | x = x.
T(x) | x != x.
-P(x,y) | part(x,y).
P(x,y) | -part(x,y).
-O(x,y) | overlaps(x,y).
O(x,y) | -overlaps(x,y).
part(x,y) | part(f1(x,y),x).
part(x,y) | disjoint(f1(x,y),y).
-ppart(x,y) | part(x,y).
-ppart(x,y) | -part(y,x).
ppart(x,y) | -part(x,y) | part(y,x).
-overlaps(x,y) | part(f2(x,y),x).
-overlaps(x,y) | part(f2(x,y),y).
overlaps(x,y) | -part(z,x) | -part(z,y).
-disjoint(x,y) | -overlaps(x,y).
disjoint(x,y) | overlaps(x,y).
-underlaps(x,y) | part(x,f3(x,y)).
-underlaps(x,y) | part(y,f3(x,y)).
underlaps(x,y) | -part(x,z) | -part(y,z).
-atomic_part(x) | -part(y,x) | y = x.
atomic_part(x) | part(f4(x),x).
atomic_part(x) | f4(x) != x.
-underlaps(x,y) | -overlaps(z,f5(x,y)) | overlaps(z,x) | overlaps(z,y).
-underlaps(x,y) | overlaps(z,f5(x,y)) | -overlaps(z,x).
-underlaps(x,y) | overlaps(z,f5(x,y)) | -overlaps(z,y).
-overlaps(x,y) | -ppart(z,f6(x,y)) | ppart(z,x).
-overlaps(x,y) | -ppart(z,f6(x,y)) | ppart(z,y).
-overlaps(x,y) | ppart(z,f6(x,y)) | -ppart(z,x) | -ppart(z,y).
part(x,x).
-part(x,y) | -part(y,x) | y = x.
-part(x,y) | -part(y,z) | part(x,z).
T(c1).
T(c2).
O(c1,c2).
-T(x) | T(f7(x)).
-T(x) | PP(f7(x),x) | PP(f7(x),c1).
-T(x) | PP(f7(x),x) | PP(f7(x),c2).
-T(x) | -PP(f7(x),x) | -PP(f7(x),c1) | -PP(f7(x),c2).
end_of_list.

============================== end of clauses for search =============

% There are no natural numbers in the input.

============================== DOMAIN SIZE 2 =========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.25 seconds).
Ground clauses: seen=161, kept=151.
Selections=196697, assignments=393393, propagations=135429, current_models=0.
Rewrite_terms=771737, rewrite_bools=1234060, indexes=507.
Rules_from_neg_clauses=400, cross_offs=400.

============================== end of statistics =====================

============================== DOMAIN SIZE 3 =========================

============================== STATISTICS ============================

For domain size 3.

Current CPU time: 0.00 seconds (total CPU time: 600.01 seconds).
Ground clauses: seen=426, kept=408.
Selections=286523029, assignments=622535177, propagations=383840376, current_models=0.
Rewrite_terms=1274008351, rewrite_bools=2617350380, indexes=26264241.
Rules_from_neg_clauses=20349377, cross_offs=43504524.

============================== end of statistics =====================

User_CPU=600.01, System_CPU=85.92, Wall_clock=687.

Exiting with failure.

Process 10168 exit (max_sec_no) Tue Mar 26 21:48:23 2013
The process finished Tue Mar 26 21:48:23 2013
