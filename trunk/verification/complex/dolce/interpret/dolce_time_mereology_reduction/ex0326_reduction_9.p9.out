============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 10167 was started by cchui on stl1.mie.utoronto.ca,
Tue Mar 26 21:36:56 2013
The command was "prover9 -t 600 -f test/p9/20130326/dolce_time_mereology/cem_mereology.p9 test/p9/20130326/dolce_time_mereology/dolce_time_mereology_reduction.p9 test/p9/20130326/dolce_time_mereology/cm_mereology.p9 test/p9/20130326/dolce_time_mereology/em_mereology.p9 test/p9/20130326/dolce_time_mereology/mereology_def.p9 test/p9/20130326/dolce_time_mereology/sum_mereology.p9 test/p9/20130326/dolce_time_mereology/prod_mereology.p9 test/p9/20130326/dolce_time_mereology/m_mereology.p9 test/p9/20130326/dolce_time_mereology/options.txt test/p9/20130326/dolce_time_mereology/ex0326_reduction_9.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file test/p9/20130326/dolce_time_mereology/cem_mereology.p9


formulas(sos).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/dolce_time_mereology_reduction.p9


formulas(sos).
(all x (T(x) <-> x = x)).
(all x all y (P(x,y) <-> part(x,y))).
(all x all y (O(x,y) <-> overlaps(x,y))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/cm_mereology.p9


formulas(sos).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/em_mereology.p9


formulas(sos).
(all x all y (-part(x,y) -> (exists z (part(z,x) & disjoint(z,y))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/mereology_def.p9


formulas(sos).
(all x all y (ppart(x,y) <-> part(x,y) & -part(y,x))).
(all x all y (overlaps(x,y) <-> (exists z (part(z,x) & part(z,y))))).
(all x all y (disjoint(x,y) <-> -overlaps(x,y))).
(all x all y (underlaps(x,y) <-> (exists z (part(x,z) & part(y,z))))).
(all x (atomic_part(x) <-> (all y (part(y,x) -> y = x)))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/sum_mereology.p9


formulas(sos).
(all x all y (underlaps(x,y) -> (exists z all v (overlaps(v,z) <-> overlaps(v,x) | overlaps(v,y))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/prod_mereology.p9


formulas(sos).
(all x all y (overlaps(x,y) -> (exists z all v (ppart(v,z) <-> ppart(v,x) & ppart(v,y))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/m_mereology.p9


formulas(sos).
(all x part(x,x)).
(all x all y (part(x,y) & part(y,x) -> x = y)).
(all x all y all z (part(x,y) & part(y,z) -> part(x,z))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file test/p9/20130326/dolce_time_mereology/ex0326_reduction_9.p9


formulas(goals).
(all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x (T(x) <-> x = x)) # label(non_clause).  [assumption].
2 (all x all y (P(x,y) <-> part(x,y))) # label(non_clause).  [assumption].
3 (all x all y (O(x,y) <-> overlaps(x,y))) # label(non_clause).  [assumption].
4 (all x all y (-part(x,y) -> (exists z (part(z,x) & disjoint(z,y))))) # label(non_clause).  [assumption].
5 (all x all y (ppart(x,y) <-> part(x,y) & -part(y,x))) # label(non_clause).  [assumption].
6 (all x all y (overlaps(x,y) <-> (exists z (part(z,x) & part(z,y))))) # label(non_clause).  [assumption].
7 (all x all y (disjoint(x,y) <-> -overlaps(x,y))) # label(non_clause).  [assumption].
8 (all x all y (underlaps(x,y) <-> (exists z (part(x,z) & part(y,z))))) # label(non_clause).  [assumption].
9 (all x (atomic_part(x) <-> (all y (part(y,x) -> y = x)))) # label(non_clause).  [assumption].
10 (all x all y (underlaps(x,y) -> (exists z all v (overlaps(v,z) <-> overlaps(v,x) | overlaps(v,y))))) # label(non_clause).  [assumption].
11 (all x all y (overlaps(x,y) -> (exists z all v (ppart(v,z) <-> ppart(v,x) & ppart(v,y))))) # label(non_clause).  [assumption].
12 (all x part(x,x)) # label(non_clause).  [assumption].
13 (all x all y (part(x,y) & part(y,x) -> x = y)) # label(non_clause).  [assumption].
14 (all x all y all z (part(x,y) & part(y,z) -> part(x,z))) # label(non_clause).  [assumption].
15 (all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating P/2
16 P(x,y) | -part(x,y).  [clausify(2)].
17 -P(x,y) | part(x,y).  [clausify(2)].

Eliminating O/2
18 O(x,y) | -overlaps(x,y).  [clausify(3)].
19 -O(x,y) | overlaps(x,y).  [clausify(3)].
20 O(c1,c2).  [deny(15)].
Derived: overlaps(c1,c2).  [resolve(20,a,19,a)].

Eliminating disjoint/2
21 -disjoint(x,y) | -overlaps(x,y).  [clausify(7)].
22 part(x,y) | disjoint(f1(x,y),y).  [clausify(4)].
Derived: -overlaps(f1(x,y),y) | part(x,y).  [resolve(21,a,22,b)].
23 disjoint(x,y) | overlaps(x,y).  [clausify(7)].

Eliminating underlaps/2
24 underlaps(x,y) | -part(x,z) | -part(y,z).  [clausify(8)].
25 -underlaps(x,y) | part(x,f3(x,y)).  [clausify(8)].
26 -underlaps(x,y) | part(y,f3(x,y)).  [clausify(8)].
Derived: -part(x,y) | -part(z,y) | part(x,f3(x,z)).  [resolve(24,a,25,a)].
Derived: -part(x,y) | -part(z,y) | part(z,f3(x,z)).  [resolve(24,a,26,a)].
27 -underlaps(x,y) | -overlaps(z,f5(x,y)) | overlaps(z,x) | overlaps(z,y).  [clausify(10)].
Derived: -overlaps(x,f5(y,z)) | overlaps(x,y) | overlaps(x,z) | -part(y,u) | -part(z,u).  [resolve(27,a,24,a)].
28 -underlaps(x,y) | overlaps(z,f5(x,y)) | -overlaps(z,x).  [clausify(10)].
Derived: overlaps(x,f5(y,z)) | -overlaps(x,y) | -part(y,u) | -part(z,u).  [resolve(28,a,24,a)].
29 -underlaps(x,y) | overlaps(z,f5(x,y)) | -overlaps(z,y).  [clausify(10)].
Derived: overlaps(x,f5(y,z)) | -overlaps(x,z) | -part(y,u) | -part(z,u).  [resolve(29,a,24,a)].

Eliminating atomic_part/1
30 atomic_part(x) | part(f4(x),x).  [clausify(9)].
31 -atomic_part(x) | -part(y,x) | y = x.  [clausify(9)].
Derived: part(f4(x),x) | -part(y,x) | y = x.  [resolve(30,a,31,a)].
32 atomic_part(x) | f4(x) != x.  [clausify(9)].
Derived: f4(x) != x | -part(y,x) | y = x.  [resolve(32,a,31,a)].

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, T, part, overlaps, ppart, PP ]).
Function symbol precedence:  function_order([ c1, c2, f1, f2, f3, f5, f6, f4, f7 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.00 seconds.

Low Water (keep): wt=33.000, iters=7468

Low Water (keep): wt=31.000, iters=6688

Low Water (keep): wt=27.000, iters=6851

Low Water (keep): wt=25.000, iters=6896

NOTE: Back_subsumption disabled, ratio of kept to back_subsumed is 461 (0.00 of 0.57 sec).

Low Water (keep): wt=24.000, iters=6720

Low Water (keep): wt=22.000, iters=6826

Low Water (keep): wt=20.000, iters=6706

Low Water (keep): wt=19.000, iters=6714

Low Water (keep): wt=18.000, iters=6676

Low Water (keep): wt=17.000, iters=6687

Low Water (keep): wt=16.000, iters=6671

Low Water (displace): id=8591, wt=33.000

Low Water (keep): wt=15.000, iters=6738

Low Water (displace): id=8600, wt=32.000

Low Water (displace): id=22053, wt=14.000

Low Water (displace): id=22251, wt=13.000

Low Water (displace): id=22549, wt=12.000

Low Water (displace): id=22555, wt=11.000

Low Water (keep): wt=14.000, iters=6678

Low Water (keep): wt=13.000, iters=6672

Low Water (displace): id=31912, wt=9.000

Low Water (keep): wt=12.000, iters=6715

============================== STATISTICS ============================

Given=40477. Generated=31116677. Kept=70264. proofs=0.
Usable=40472. Sos=14809. Demods=0. Limbo=0, Disabled=15030. Hints=0.
Kept_by_rule=0, Deleted_by_rule=180795.
Forward_subsumed=154645. Back_subsumed=25.
Sos_limit_deleted=30710973. Sos_displaced=14955. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=3.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=382552. Nonunit_bsub_feature_tests=75060.
Megabytes=82.91.
User_CPU=600.01, System_CPU=11.12, Wall_clock=617.

============================== end of statistics =====================

============================== end of search =========================

SEARCH FAILED

Exiting with failure.

Process 10167 exit (max_seconds) Tue Mar 26 21:47:13 2013
