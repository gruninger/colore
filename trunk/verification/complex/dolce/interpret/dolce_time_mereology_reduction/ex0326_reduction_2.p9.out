============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 10136 was started by cchui on stl1.mie.utoronto.ca,
Tue Mar 26 21:36:26 2013
The command was "prover9 -t 600 -f test/p9/20130326/dolce_time_mereology/cem_mereology.p9 test/p9/20130326/dolce_time_mereology/dolce_time_mereology_reduction.p9 test/p9/20130326/dolce_time_mereology/cm_mereology.p9 test/p9/20130326/dolce_time_mereology/em_mereology.p9 test/p9/20130326/dolce_time_mereology/mereology_def.p9 test/p9/20130326/dolce_time_mereology/sum_mereology.p9 test/p9/20130326/dolce_time_mereology/prod_mereology.p9 test/p9/20130326/dolce_time_mereology/m_mereology.p9 test/p9/20130326/dolce_time_mereology/options.txt test/p9/20130326/dolce_time_mereology/ex0326_reduction_2.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file test/p9/20130326/dolce_time_mereology/cem_mereology.p9


formulas(sos).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/dolce_time_mereology_reduction.p9


formulas(sos).
(all x (T(x) <-> x = x)).
(all x all y (P(x,y) <-> part(x,y))).
(all x all y (O(x,y) <-> overlaps(x,y))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/cm_mereology.p9


formulas(sos).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/em_mereology.p9


formulas(sos).
(all x all y (-part(x,y) -> (exists z (part(z,x) & disjoint(z,y))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/mereology_def.p9


formulas(sos).
(all x all y (ppart(x,y) <-> part(x,y) & -part(y,x))).
(all x all y (overlaps(x,y) <-> (exists z (part(z,x) & part(z,y))))).
(all x all y (disjoint(x,y) <-> -overlaps(x,y))).
(all x all y (underlaps(x,y) <-> (exists z (part(x,z) & part(y,z))))).
(all x (atomic_part(x) <-> (all y (part(y,x) -> y = x)))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/sum_mereology.p9


formulas(sos).
(all x all y (underlaps(x,y) -> (exists z all v (overlaps(v,z) <-> overlaps(v,x) | overlaps(v,y))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/prod_mereology.p9


formulas(sos).
(all x all y (overlaps(x,y) -> (exists z all v (ppart(v,z) <-> ppart(v,x) & ppart(v,y))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/m_mereology.p9


formulas(sos).
(all x part(x,x)).
(all x all y (part(x,y) & part(y,x) -> x = y)).
(all x all y all z (part(x,y) & part(y,z) -> part(x,z))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file test/p9/20130326/dolce_time_mereology/ex0326_reduction_2.p9


formulas(goals).
(all x all y (P(x,y) -> (T(x) <-> T(y)))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x (T(x) <-> x = x)) # label(non_clause).  [assumption].
2 (all x all y (P(x,y) <-> part(x,y))) # label(non_clause).  [assumption].
3 (all x all y (O(x,y) <-> overlaps(x,y))) # label(non_clause).  [assumption].
4 (all x all y (-part(x,y) -> (exists z (part(z,x) & disjoint(z,y))))) # label(non_clause).  [assumption].
5 (all x all y (ppart(x,y) <-> part(x,y) & -part(y,x))) # label(non_clause).  [assumption].
6 (all x all y (overlaps(x,y) <-> (exists z (part(z,x) & part(z,y))))) # label(non_clause).  [assumption].
7 (all x all y (disjoint(x,y) <-> -overlaps(x,y))) # label(non_clause).  [assumption].
8 (all x all y (underlaps(x,y) <-> (exists z (part(x,z) & part(y,z))))) # label(non_clause).  [assumption].
9 (all x (atomic_part(x) <-> (all y (part(y,x) -> y = x)))) # label(non_clause).  [assumption].
10 (all x all y (underlaps(x,y) -> (exists z all v (overlaps(v,z) <-> overlaps(v,x) | overlaps(v,y))))) # label(non_clause).  [assumption].
11 (all x all y (overlaps(x,y) -> (exists z all v (ppart(v,z) <-> ppart(v,x) & ppart(v,y))))) # label(non_clause).  [assumption].
12 (all x part(x,x)) # label(non_clause).  [assumption].
13 (all x all y (part(x,y) & part(y,x) -> x = y)) # label(non_clause).  [assumption].
14 (all x all y all z (part(x,y) & part(y,z) -> part(x,z))) # label(non_clause).  [assumption].
15 (all x all y (P(x,y) -> (T(x) <-> T(y)))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating P/2
16 P(x,y) | -part(x,y).  [clausify(2)].
17 -P(x,y) | part(x,y).  [clausify(2)].
18 P(c1,c2).  [deny(15)].
Derived: part(c1,c2).  [resolve(18,a,17,a)].

Eliminating O/2
19 O(x,y) | -overlaps(x,y).  [clausify(3)].
20 -O(x,y) | overlaps(x,y).  [clausify(3)].

Eliminating disjoint/2
21 -disjoint(x,y) | -overlaps(x,y).  [clausify(7)].
22 part(x,y) | disjoint(f1(x,y),y).  [clausify(4)].
Derived: -overlaps(f1(x,y),y) | part(x,y).  [resolve(21,a,22,b)].
23 disjoint(x,y) | overlaps(x,y).  [clausify(7)].

Eliminating underlaps/2
24 underlaps(x,y) | -part(x,z) | -part(y,z).  [clausify(8)].
25 -underlaps(x,y) | part(x,f3(x,y)).  [clausify(8)].
26 -underlaps(x,y) | part(y,f3(x,y)).  [clausify(8)].
Derived: -part(x,y) | -part(z,y) | part(x,f3(x,z)).  [resolve(24,a,25,a)].
Derived: -part(x,y) | -part(z,y) | part(z,f3(x,z)).  [resolve(24,a,26,a)].
27 -underlaps(x,y) | -overlaps(z,f5(x,y)) | overlaps(z,x) | overlaps(z,y).  [clausify(10)].
Derived: -overlaps(x,f5(y,z)) | overlaps(x,y) | overlaps(x,z) | -part(y,u) | -part(z,u).  [resolve(27,a,24,a)].
28 -underlaps(x,y) | overlaps(z,f5(x,y)) | -overlaps(z,x).  [clausify(10)].
Derived: overlaps(x,f5(y,z)) | -overlaps(x,y) | -part(y,u) | -part(z,u).  [resolve(28,a,24,a)].
29 -underlaps(x,y) | overlaps(z,f5(x,y)) | -overlaps(z,y).  [clausify(10)].
Derived: overlaps(x,f5(y,z)) | -overlaps(x,z) | -part(y,u) | -part(z,u).  [resolve(29,a,24,a)].

Eliminating atomic_part/1
30 atomic_part(x) | part(f4(x),x).  [clausify(9)].
31 -atomic_part(x) | -part(y,x) | y = x.  [clausify(9)].
Derived: part(f4(x),x) | -part(y,x) | y = x.  [resolve(30,a,31,a)].
32 atomic_part(x) | f4(x) != x.  [clausify(9)].
Derived: f4(x) != x | -part(y,x) | y = x.  [resolve(32,a,31,a)].

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, T, part, overlaps, ppart ]).
Function symbol precedence:  function_order([ c1, c2, f1, f2, f3, f5, f6, f4 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== PROOF =================================

% Proof 1 at 0.01 (+ 0.00) seconds.
% Length of proof is 6.
% Level of proof is 3.
% Maximum clause weight is 2.000.
% Given clauses 0.

1 (all x (T(x) <-> x = x)) # label(non_clause).  [assumption].
15 (all x all y (P(x,y) -> (T(x) <-> T(y)))) # label(non_clause) # label(goal).  [goal].
33 T(x) | x != x.  [clausify(1)].
34 T(x).  [copy(33),xx(b)].
48 -T(c1) | -T(c2).  [deny(15)].
49 $F.  [copy(48),unit_del(a,34),unit_del(b,34)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=0. Generated=17. Kept=14. proofs=1.
Usable=0. Sos=0. Demods=0. Limbo=14, Disabled=34. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=2. Back_subsumed=0.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=0.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=2. Nonunit_bsub_feature_tests=0.
Megabytes=0.09.
User_CPU=0.01, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 10136 exit (max_proofs) Tue Mar 26 21:36:26 2013
