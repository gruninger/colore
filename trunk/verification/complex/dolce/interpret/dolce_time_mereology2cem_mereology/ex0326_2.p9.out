============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 10052 was started by cchui on stl1.mie.utoronto.ca,
Tue Mar 26 21:18:05 2013
The command was "prover9 -t 600 -f test/p9/20130326/dolce_time_mereology/dolce_time_mereology.p9 test/p9/20130326/dolce_time_mereology/dolce_time_mereology2cem_mereology.p9 test/p9/20130326/dolce_time_mereology/dolce_taxonomy_pdedq.p9 test/p9/20130326/dolce_time_mereology/options.txt test/p9/20130326/dolce_time_mereology/ex0326_2.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file test/p9/20130326/dolce_time_mereology/dolce_time_mereology.p9


formulas(sos).
(all x all y (P(x,y) -> T(y) & T(y))).
(all x all y (P(x,y) -> (T(x) <-> T(y)))).
(all x all y (T(x) -> P(x,x))).
(all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)).
(all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & disjoint(z,y) & T(z))))).
(all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))).
(all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))).
(all x all y (T(x) & T(y) -> (disjoint(x,y) <-> -O(x,y)))).
(all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))).
(all x (T(x) -> (AtP(x) <-> (all y (T(y) & P(y,x) -> y = x))))).
(all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))).
(all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/dolce_time_mereology2cem_mereology.p9


formulas(sos).
(all x all y (part(x,y) <-> P(x,y) & T(x) & T(y))).
(all x (x = x <-> T(x))).
(all x all y (ppart(x,y) <-> PP(x,y) & T(x) & T(y))).
(all x all y (overlaps(x,y) <-> O(x,y) & T(x) & T(y))).
(all x all y (disjoint(x,y) <-> -overlaps(x,y))).
(all x all y (overlaps(x,y) <-> (exists z (part(z,x) & part(z,y))))).
(all x all y (underlaps(x,y) <-> (exists z (part(x,z) & part(y,z))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/dolce_taxonomy_pdedq.p9


formulas(sos).
(all x (ED(x) | PD(x) | Q(x) | T(x) -> PT(x))).
(all x (PT(x) <-> ED(x) | PD(x) | Q(x) | T(x))).
(all x (ED(x) -> -PD(x) & -Q(x) & -T(x))).
(all x (PD(x) -> -Q(x) & -T(x))).
(all x (Q(x) -> -T(x))).
(all x (T(x) -> AB(x))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file test/p9/20130326/dolce_time_mereology/ex0326_2.p9


formulas(goals).
(all x all y (underlaps(x,y) -> (exists z all v (overlaps(v,z) <-> overlaps(v,x) | overlaps(v,y))))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (P(x,y) -> T(y) & T(y))) # label(non_clause).  [assumption].
2 (all x all y (P(x,y) -> (T(x) <-> T(y)))) # label(non_clause).  [assumption].
3 (all x all y (T(x) -> P(x,x))) # label(non_clause).  [assumption].
4 (all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)) # label(non_clause).  [assumption].
5 (all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))) # label(non_clause).  [assumption].
6 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))) # label(non_clause).  [assumption].
7 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & disjoint(z,y) & T(z))))) # label(non_clause).  [assumption].
8 (all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))) # label(non_clause).  [assumption].
9 (all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))) # label(non_clause).  [assumption].
10 (all x all y (T(x) & T(y) -> (disjoint(x,y) <-> -O(x,y)))) # label(non_clause).  [assumption].
11 (all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))) # label(non_clause).  [assumption].
12 (all x (T(x) -> (AtP(x) <-> (all y (T(y) & P(y,x) -> y = x))))) # label(non_clause).  [assumption].
13 (all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))) # label(non_clause).  [assumption].
14 (all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))) # label(non_clause).  [assumption].
15 (all x all y (part(x,y) <-> P(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
16 (all x (x = x <-> T(x))) # label(non_clause).  [assumption].
17 (all x all y (ppart(x,y) <-> PP(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
18 (all x all y (overlaps(x,y) <-> O(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
19 (all x all y (disjoint(x,y) <-> -overlaps(x,y))) # label(non_clause).  [assumption].
20 (all x all y (overlaps(x,y) <-> (exists z (part(z,x) & part(z,y))))) # label(non_clause).  [assumption].
21 (all x all y (underlaps(x,y) <-> (exists z (part(x,z) & part(y,z))))) # label(non_clause).  [assumption].
22 (all x (ED(x) | PD(x) | Q(x) | T(x) -> PT(x))) # label(non_clause).  [assumption].
23 (all x (PT(x) <-> ED(x) | PD(x) | Q(x) | T(x))) # label(non_clause).  [assumption].
24 (all x (ED(x) -> -PD(x) & -Q(x) & -T(x))) # label(non_clause).  [assumption].
25 (all x (PD(x) -> -Q(x) & -T(x))) # label(non_clause).  [assumption].
26 (all x (Q(x) -> -T(x))) # label(non_clause).  [assumption].
27 (all x (T(x) -> AB(x))) # label(non_clause).  [assumption].
28 (all x all y (underlaps(x,y) -> (exists z all v (overlaps(v,z) <-> overlaps(v,x) | overlaps(v,y))))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating disjoint/2
29 -T(x) | -T(y) | -disjoint(x,y) | -O(x,y).  [clausify(10)].
30 -T(x) | -T(y) | P(x,y) | disjoint(f2(x,y),y).  [clausify(7)].
Derived: -T(f2(x,y)) | -T(y) | -O(f2(x,y),y) | -T(x) | -T(y) | P(x,y).  [resolve(29,c,30,d)].
31 -T(x) | -T(y) | disjoint(x,y) | O(x,y).  [clausify(10)].
32 -disjoint(x,y) | -overlaps(x,y).  [clausify(19)].
Derived: -overlaps(f2(x,y),y) | -T(x) | -T(y) | P(x,y).  [resolve(32,a,30,d)].
Derived: -overlaps(x,y) | -T(x) | -T(y) | O(x,y).  [resolve(32,a,31,c)].
33 disjoint(x,y) | overlaps(x,y).  [clausify(19)].
Derived: overlaps(x,y) | -T(x) | -T(y) | -O(x,y).  [resolve(33,a,29,c)].

Eliminating U/2
34 -T(x) | -T(y) | U(x,y) | -P(x,z) | -P(y,z) | -T(z).  [clausify(11)].
35 -T(x) | -T(y) | -U(x,y) | P(x,f4(x,y)).  [clausify(11)].
36 -T(x) | -T(y) | -U(x,y) | P(y,f4(x,y)).  [clausify(11)].
37 -T(x) | -T(y) | -U(x,y) | T(f4(x,y)).  [clausify(11)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | P(x,f4(x,y)).  [resolve(34,c,35,c)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | P(y,f4(x,y)).  [resolve(34,c,36,c)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | T(f4(x,y)).  [resolve(34,c,37,c)].
38 -T(x) | -T(y) | -U(x,y) | T(f6(x,y)).  [clausify(13)].
Derived: -T(x) | -T(y) | T(f6(x,y)) | -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z).  [resolve(38,c,34,c)].
39 -T(x) | -T(y) | -U(x,y) | -T(z) | -O(z,f6(x,y)) | O(z,x) | O(z,y).  [clausify(13)].
Derived: -T(x) | -T(y) | -T(z) | -O(z,f6(x,y)) | O(z,x) | O(z,y) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(39,c,34,c)].
40 -T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f6(x,y)) | -O(z,x).  [clausify(13)].
Derived: -T(x) | -T(y) | -T(z) | O(z,f6(x,y)) | -O(z,x) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(40,c,34,c)].
41 -T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f6(x,y)) | -O(z,y).  [clausify(13)].
Derived: -T(x) | -T(y) | -T(z) | O(z,f6(x,y)) | -O(z,y) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(41,c,34,c)].

Eliminating AtP/1
42 -T(x) | AtP(x) | T(f5(x)).  [clausify(12)].
43 -T(x) | -AtP(x) | -T(y) | -P(y,x) | y = x.  [clausify(12)].
Derived: -T(x) | T(f5(x)) | -T(x) | -T(y) | -P(y,x) | y = x.  [resolve(42,b,43,b)].
44 -T(x) | AtP(x) | P(f5(x),x).  [clausify(12)].
Derived: -T(x) | P(f5(x),x) | -T(x) | -T(y) | -P(y,x) | y = x.  [resolve(44,b,43,b)].
45 -T(x) | AtP(x) | f5(x) != x.  [clausify(12)].
Derived: -T(x) | f5(x) != x | -T(x) | -T(y) | -P(y,x) | y = x.  [resolve(45,b,43,b)].

Eliminating ppart/2
46 ppart(x,y) | -PP(x,y) | -T(x) | -T(y).  [clausify(17)].
47 -ppart(x,y) | PP(x,y).  [clausify(17)].
48 -ppart(x,y) | T(x).  [clausify(17)].
49 -ppart(x,y) | T(y).  [clausify(17)].

Eliminating underlaps/2
50 underlaps(x,y) | -part(x,z) | -part(y,z).  [clausify(21)].
51 -underlaps(x,y) | part(x,f9(x,y)).  [clausify(21)].
52 -underlaps(x,y) | part(y,f9(x,y)).  [clausify(21)].
Derived: -part(x,y) | -part(z,y) | part(x,f9(x,z)).  [resolve(50,a,51,a)].
Derived: -part(x,y) | -part(z,y) | part(z,f9(x,z)).  [resolve(50,a,52,a)].
53 underlaps(c1,c2).  [deny(28)].
Derived: part(c1,f9(c1,c2)).  [resolve(53,a,51,a)].
Derived: part(c2,f9(c1,c2)).  [resolve(53,a,52,a)].

Eliminating ED/1
54 -PT(x) | ED(x) | PD(x) | Q(x) | T(x).  [clausify(23)].
55 -ED(x) | PT(x).  [clausify(22)].
56 PT(x) | -ED(x).  [clausify(23)].
57 -ED(x) | -PD(x).  [clausify(24)].
58 -ED(x) | -Q(x).  [clausify(24)].
59 -ED(x) | -T(x).  [clausify(24)].

Eliminating PD/1

Eliminating Q/1

Eliminating PT/1

Eliminating AB/1

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, T, P, O, part, overlaps, PP ]).
Function symbol precedence:  function_order([ c1, c2, f1, f2, f3, f4, f6, f7, f8, f9, f5, f10 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

NOTE: Back_subsumption disabled, ratio of kept to back_subsumed is 119 (0.00 of 0.29 sec).

Low Water (keep): wt=21.000, iters=6963

Low Water (keep): wt=17.000, iters=6759

Low Water (keep): wt=16.000, iters=6694

Low Water (keep): wt=15.000, iters=6747

Low Water (keep): wt=14.000, iters=6701

Low Water (keep): wt=13.000, iters=6716

Low Water (keep): wt=12.000, iters=6682

Low Water (keep): wt=11.000, iters=6736

Low Water (keep): wt=10.000, iters=6671

Low Water (displace): id=9011, wt=21.000

Low Water (displace): id=9536, wt=19.000

Low Water (displace): id=9001, wt=18.000

Low Water (displace): id=9013, wt=17.000

Low Water (displace): id=10126, wt=16.000

Low Water (displace): id=23016, wt=12.000

Low Water (displace): id=23028, wt=9.000

Low Water (displace): id=23306, wt=8.000

Low Water (displace): id=25768, wt=7.000

Low Water (keep): wt=9.000, iters=6667

============================== STATISTICS ============================

Given=43458. Generated=22890449. Kept=69183. proofs=0.
Usable=43454. Sos=14730. Demods=0. Limbo=0, Disabled=11096. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=510775. Back_subsumed=65.
Sos_limit_deleted=22310491. Sos_displaced=10883. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=51.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=121569. Nonunit_bsub_feature_tests=18398.
Megabytes=73.54.
User_CPU=600.01, System_CPU=8.43, Wall_clock=609.

============================== end of statistics =====================

============================== end of search =========================

SEARCH FAILED

Exiting with failure.

Process 10052 exit (max_seconds) Tue Mar 26 21:28:14 2013
