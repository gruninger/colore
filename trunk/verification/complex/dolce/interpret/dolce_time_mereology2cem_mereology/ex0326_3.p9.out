============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 10070 was started by cchui on stl1.mie.utoronto.ca,
Tue Mar 26 21:29:51 2013
The command was "prover9 -t 600 -f test/p9/20130326/dolce_time_mereology/dolce_time_mereology.p9 test/p9/20130326/dolce_time_mereology/dolce_time_mereology2cem_mereology.p9 test/p9/20130326/dolce_time_mereology/dolce_taxonomy_pdedq.p9 test/p9/20130326/dolce_time_mereology/options.txt test/p9/20130326/dolce_time_mereology/ex0326_3.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file test/p9/20130326/dolce_time_mereology/dolce_time_mereology.p9


formulas(sos).
(all x all y (P(x,y) -> T(y) & T(y))).
(all x all y (P(x,y) -> (T(x) <-> T(y)))).
(all x all y (T(x) -> P(x,x))).
(all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)).
(all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & disjoint(z,y) & T(z))))).
(all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))).
(all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))).
(all x all y (T(x) & T(y) -> (disjoint(x,y) <-> -O(x,y)))).
(all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))).
(all x (T(x) -> (AtP(x) <-> (all y (T(y) & P(y,x) -> y = x))))).
(all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))).
(all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/dolce_time_mereology2cem_mereology.p9


formulas(sos).
(all x all y (part(x,y) <-> P(x,y) & T(x) & T(y))).
(all x (x = x <-> T(x))).
(all x all y (ppart(x,y) <-> PP(x,y) & T(x) & T(y))).
(all x all y (overlaps(x,y) <-> O(x,y) & T(x) & T(y))).
(all x all y (disjoint(x,y) <-> -overlaps(x,y))).
(all x all y (overlaps(x,y) <-> (exists z (part(z,x) & part(z,y))))).
(all x all y (underlaps(x,y) <-> (exists z (part(x,z) & part(y,z))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/dolce_taxonomy_pdedq.p9


formulas(sos).
(all x (ED(x) | PD(x) | Q(x) | T(x) -> PT(x))).
(all x (PT(x) <-> ED(x) | PD(x) | Q(x) | T(x))).
(all x (ED(x) -> -PD(x) & -Q(x) & -T(x))).
(all x (PD(x) -> -Q(x) & -T(x))).
(all x (Q(x) -> -T(x))).
(all x (T(x) -> AB(x))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file test/p9/20130326/dolce_time_mereology/ex0326_3.p9


formulas(goals).
(all x all y (-part(x,y) -> (exists z (part(z,x) & disjoint(z,y))))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (P(x,y) -> T(y) & T(y))) # label(non_clause).  [assumption].
2 (all x all y (P(x,y) -> (T(x) <-> T(y)))) # label(non_clause).  [assumption].
3 (all x all y (T(x) -> P(x,x))) # label(non_clause).  [assumption].
4 (all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)) # label(non_clause).  [assumption].
5 (all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))) # label(non_clause).  [assumption].
6 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))) # label(non_clause).  [assumption].
7 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & disjoint(z,y) & T(z))))) # label(non_clause).  [assumption].
8 (all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))) # label(non_clause).  [assumption].
9 (all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))) # label(non_clause).  [assumption].
10 (all x all y (T(x) & T(y) -> (disjoint(x,y) <-> -O(x,y)))) # label(non_clause).  [assumption].
11 (all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))) # label(non_clause).  [assumption].
12 (all x (T(x) -> (AtP(x) <-> (all y (T(y) & P(y,x) -> y = x))))) # label(non_clause).  [assumption].
13 (all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))) # label(non_clause).  [assumption].
14 (all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))) # label(non_clause).  [assumption].
15 (all x all y (part(x,y) <-> P(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
16 (all x (x = x <-> T(x))) # label(non_clause).  [assumption].
17 (all x all y (ppart(x,y) <-> PP(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
18 (all x all y (overlaps(x,y) <-> O(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
19 (all x all y (disjoint(x,y) <-> -overlaps(x,y))) # label(non_clause).  [assumption].
20 (all x all y (overlaps(x,y) <-> (exists z (part(z,x) & part(z,y))))) # label(non_clause).  [assumption].
21 (all x all y (underlaps(x,y) <-> (exists z (part(x,z) & part(y,z))))) # label(non_clause).  [assumption].
22 (all x (ED(x) | PD(x) | Q(x) | T(x) -> PT(x))) # label(non_clause).  [assumption].
23 (all x (PT(x) <-> ED(x) | PD(x) | Q(x) | T(x))) # label(non_clause).  [assumption].
24 (all x (ED(x) -> -PD(x) & -Q(x) & -T(x))) # label(non_clause).  [assumption].
25 (all x (PD(x) -> -Q(x) & -T(x))) # label(non_clause).  [assumption].
26 (all x (Q(x) -> -T(x))) # label(non_clause).  [assumption].
27 (all x (T(x) -> AB(x))) # label(non_clause).  [assumption].
28 (all x all y (-part(x,y) -> (exists z (part(z,x) & disjoint(z,y))))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

Eliminating U/2
29 -T(x) | -T(y) | U(x,y) | -P(x,z) | -P(y,z) | -T(z).  [clausify(11)].
30 -T(x) | -T(y) | -U(x,y) | P(x,f4(x,y)).  [clausify(11)].
31 -T(x) | -T(y) | -U(x,y) | P(y,f4(x,y)).  [clausify(11)].
32 -T(x) | -T(y) | -U(x,y) | T(f4(x,y)).  [clausify(11)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | P(x,f4(x,y)).  [resolve(29,c,30,c)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | P(y,f4(x,y)).  [resolve(29,c,31,c)].
Derived: -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z) | -T(x) | -T(y) | T(f4(x,y)).  [resolve(29,c,32,c)].
33 -T(x) | -T(y) | -U(x,y) | T(f6(x,y)).  [clausify(13)].
Derived: -T(x) | -T(y) | T(f6(x,y)) | -T(x) | -T(y) | -P(x,z) | -P(y,z) | -T(z).  [resolve(33,c,29,c)].
34 -T(x) | -T(y) | -U(x,y) | -T(z) | -O(z,f6(x,y)) | O(z,x) | O(z,y).  [clausify(13)].
Derived: -T(x) | -T(y) | -T(z) | -O(z,f6(x,y)) | O(z,x) | O(z,y) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(34,c,29,c)].
35 -T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f6(x,y)) | -O(z,x).  [clausify(13)].
Derived: -T(x) | -T(y) | -T(z) | O(z,f6(x,y)) | -O(z,x) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(35,c,29,c)].
36 -T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f6(x,y)) | -O(z,y).  [clausify(13)].
Derived: -T(x) | -T(y) | -T(z) | O(z,f6(x,y)) | -O(z,y) | -T(x) | -T(y) | -P(x,u) | -P(y,u) | -T(u).  [resolve(36,c,29,c)].

Eliminating AtP/1
37 -T(x) | AtP(x) | T(f5(x)).  [clausify(12)].
38 -T(x) | -AtP(x) | -T(y) | -P(y,x) | y = x.  [clausify(12)].
Derived: -T(x) | T(f5(x)) | -T(x) | -T(y) | -P(y,x) | y = x.  [resolve(37,b,38,b)].
39 -T(x) | AtP(x) | P(f5(x),x).  [clausify(12)].
Derived: -T(x) | P(f5(x),x) | -T(x) | -T(y) | -P(y,x) | y = x.  [resolve(39,b,38,b)].
40 -T(x) | AtP(x) | f5(x) != x.  [clausify(12)].
Derived: -T(x) | f5(x) != x | -T(x) | -T(y) | -P(y,x) | y = x.  [resolve(40,b,38,b)].

Eliminating ppart/2
41 ppart(x,y) | -PP(x,y) | -T(x) | -T(y).  [clausify(17)].
42 -ppart(x,y) | PP(x,y).  [clausify(17)].
43 -ppart(x,y) | T(x).  [clausify(17)].
44 -ppart(x,y) | T(y).  [clausify(17)].

Eliminating overlaps/2
45 overlaps(x,y) | -O(x,y) | -T(x) | -T(y).  [clausify(18)].
46 -overlaps(x,y) | O(x,y).  [clausify(18)].
47 -overlaps(x,y) | T(x).  [clausify(18)].
48 -overlaps(x,y) | T(y).  [clausify(18)].
49 -disjoint(x,y) | -overlaps(x,y).  [clausify(19)].
Derived: -disjoint(x,y) | -O(x,y) | -T(x) | -T(y).  [resolve(49,b,45,a)].
50 disjoint(x,y) | overlaps(x,y).  [clausify(19)].
Derived: disjoint(x,y) | O(x,y).  [resolve(50,b,46,a)].
Derived: disjoint(x,y) | T(x).  [resolve(50,b,47,a)].
Derived: disjoint(x,y) | T(y).  [resolve(50,b,48,a)].
51 -overlaps(x,y) | part(f8(x,y),x).  [clausify(20)].
Derived: part(f8(x,y),x) | -O(x,y) | -T(x) | -T(y).  [resolve(51,a,45,a)].
Derived: part(f8(x,y),x) | disjoint(x,y).  [resolve(51,a,50,b)].
52 -overlaps(x,y) | part(f8(x,y),y).  [clausify(20)].
Derived: part(f8(x,y),y) | -O(x,y) | -T(x) | -T(y).  [resolve(52,a,45,a)].
Derived: part(f8(x,y),y) | disjoint(x,y).  [resolve(52,a,50,b)].
53 overlaps(x,y) | -part(z,x) | -part(z,y).  [clausify(20)].
Derived: -part(x,y) | -part(x,z) | O(y,z).  [resolve(53,a,46,a)].
Derived: -part(x,y) | -part(x,z) | T(y).  [resolve(53,a,47,a)].
Derived: -part(x,y) | -part(x,z) | -disjoint(y,z).  [resolve(53,a,49,b)].
Derived: -part(x,y) | -part(x,z) | part(f8(y,z),y).  [resolve(53,a,51,a)].
Derived: -part(x,y) | -part(x,z) | part(f8(y,z),z).  [resolve(53,a,52,a)].

Eliminating underlaps/2
54 underlaps(x,y) | -part(x,z) | -part(y,z).  [clausify(21)].
55 -underlaps(x,y) | part(x,f9(x,y)).  [clausify(21)].
56 -underlaps(x,y) | part(y,f9(x,y)).  [clausify(21)].
Derived: -part(x,y) | -part(z,y) | part(x,f9(x,z)).  [resolve(54,a,55,a)].
Derived: -part(x,y) | -part(z,y) | part(z,f9(x,z)).  [resolve(54,a,56,a)].

Eliminating ED/1
57 -PT(x) | ED(x) | PD(x) | Q(x) | T(x).  [clausify(23)].
58 -ED(x) | PT(x).  [clausify(22)].
59 PT(x) | -ED(x).  [clausify(23)].
60 -ED(x) | -PD(x).  [clausify(24)].
61 -ED(x) | -Q(x).  [clausify(24)].
62 -ED(x) | -T(x).  [clausify(24)].

Eliminating PD/1

Eliminating Q/1

Eliminating PT/1

Eliminating AB/1

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, T, P, part, O, PP, disjoint ]).
Function symbol precedence:  function_order([ c1, c2, f1, f2, f3, f4, f6, f7, f8, f9, f5 ]).
After inverse_order:  (no changes).
Unfolding symbols: (none).

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

============================== PROOF =================================

% Proof 1 at 0.03 (+ 0.00) seconds.
% Length of proof is 18.
% Level of proof is 5.
% Maximum clause weight is 12.000.
% Given clauses 130.

7 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & disjoint(z,y) & T(z))))) # label(non_clause).  [assumption].
15 (all x all y (part(x,y) <-> P(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
16 (all x (x = x <-> T(x))) # label(non_clause).  [assumption].
28 (all x all y (-part(x,y) -> (exists z (part(z,x) & disjoint(z,y))))) # label(non_clause) # label(goal).  [goal].
71 -T(x) | -T(y) | P(x,y) | P(f2(x,y),x).  [clausify(7)].
72 -T(x) | -T(y) | P(x,y) | disjoint(f2(x,y),y).  [clausify(7)].
90 part(x,y) | -P(x,y) | -T(x) | -T(y).  [clausify(15)].
91 x != x | T(x).  [clausify(16)].
92 T(x).  [copy(91),xx(a)].
93 -part(c1,c2).  [deny(28)].
94 -part(x,c1) | -disjoint(x,c2).  [deny(28)].
146 part(x,y) | -P(x,y).  [back_unit_del(90),unit_del(c,92),unit_del(d,92)].
156 P(x,y) | disjoint(f2(x,y),y).  [back_unit_del(72),unit_del(a,92),unit_del(b,92)].
157 P(x,y) | P(f2(x,y),x).  [back_unit_del(71),unit_del(a,92),unit_del(b,92)].
176 -P(c1,c2).  [ur(146,a,93,a)].
179 P(x,c2) | -part(f2(x,c2),c1).  [resolve(156,b,94,b)].
183 P(x,y) | part(f2(x,y),x).  [resolve(157,b,146,b)].
936 $F.  [resolve(183,b,179,b),merge(b),unit_del(a,176)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=130. Generated=1111. Kept=859. proofs=1.
Usable=126. Sos=677. Demods=0. Limbo=0, Disabled=158. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=251. Back_subsumed=34.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=0 (0 lex), Back_demodulated=0. Back_unit_deleted=22.
Demod_attempts=0. Demod_rewrites=0.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=2284. Nonunit_bsub_feature_tests=1620.
Megabytes=1.26.
User_CPU=0.03, System_CPU=0.00, Wall_clock=0.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 10070 exit (max_proofs) Tue Mar 26 21:29:51 2013
