============================== Mace4 =================================
Mace4 (64) version 2009-11A, November 2009.
Process 10053 was started by cchui on stl1.mie.utoronto.ca,
Tue Mar 26 21:18:05 2013
The command was "mace4 -c -t 600 -s 600 -n 2 -N 20 -f test/p9/20130326/dolce_time_mereology/dolce_time_mereology.p9 test/p9/20130326/dolce_time_mereology/dolce_time_mereology2cem_mereology.p9 test/p9/20130326/dolce_time_mereology/dolce_taxonomy_pdedq.p9 test/p9/20130326/dolce_time_mereology/ex0326_2.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file test/p9/20130326/dolce_time_mereology/dolce_time_mereology.p9


formulas(sos).
(all x all y (P(x,y) -> T(y) & T(y))).
(all x all y (P(x,y) -> (T(x) <-> T(y)))).
(all x all y (T(x) -> P(x,x))).
(all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)).
(all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))).
(all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & disjoint(z,y) & T(z))))).
(all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))).
(all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))).
(all x all y (T(x) & T(y) -> (disjoint(x,y) <-> -O(x,y)))).
(all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))).
(all x (T(x) -> (AtP(x) <-> (all y (T(y) & P(y,x) -> y = x))))).
(all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))).
(all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/dolce_time_mereology2cem_mereology.p9


formulas(sos).
(all x all y (part(x,y) <-> P(x,y) & T(x) & T(y))).
(all x (x = x <-> T(x))).
(all x all y (ppart(x,y) <-> PP(x,y) & T(x) & T(y))).
(all x all y (overlaps(x,y) <-> O(x,y) & T(x) & T(y))).
(all x all y (disjoint(x,y) <-> -overlaps(x,y))).
(all x all y (overlaps(x,y) <-> (exists z (part(z,x) & part(z,y))))).
(all x all y (underlaps(x,y) <-> (exists z (part(x,z) & part(y,z))))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/dolce_taxonomy_pdedq.p9


formulas(sos).
(all x (ED(x) | PD(x) | Q(x) | T(x) -> PT(x))).
(all x (PT(x) <-> ED(x) | PD(x) | Q(x) | T(x))).
(all x (ED(x) -> -PD(x) & -Q(x) & -T(x))).
(all x (PD(x) -> -Q(x) & -T(x))).
(all x (Q(x) -> -T(x))).
(all x (T(x) -> AB(x))).
end_of_list.

% Reading from file test/p9/20130326/dolce_time_mereology/ex0326_2.p9


formulas(goals).
(all x all y (underlaps(x,y) -> (exists z all v (overlaps(v,z) <-> overlaps(v,x) | overlaps(v,y))))).
end_of_list.

% From the command line: assign(max_seconds, 600).

% From the command line: assign(max_seconds_per, 600).
    % assign(domain_size, 2) -> assign(start_size, 2).
    % assign(domain_size, 2) -> assign(end_size, 2).

% From the command line: assign(domain_size, 2).

% From the command line: assign(end_size, 20).

============================== end of input ==========================

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y (P(x,y) -> T(y) & T(y))) # label(non_clause).  [assumption].
2 (all x all y (P(x,y) -> (T(x) <-> T(y)))) # label(non_clause).  [assumption].
3 (all x all y (T(x) -> P(x,x))) # label(non_clause).  [assumption].
4 (all x all y (T(x) & T(y) & P(x,y) & P(y,x) -> x = y)) # label(non_clause).  [assumption].
5 (all x all y all z (T(x) & T(y) & P(x,y) & P(y,z) -> P(x,z))) # label(non_clause).  [assumption].
6 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (T(z) & P(z,x) & -O(z,y))))) # label(non_clause).  [assumption].
7 (all x all y (T(x) & T(y) & -P(x,y) -> (exists z (P(z,x) & disjoint(z,y) & T(z))))) # label(non_clause).  [assumption].
8 (all x all y (T(x) & T(y) -> (PP(x,y) <-> P(x,y) & -P(y,x)))) # label(non_clause).  [assumption].
9 (all x all y (T(x) & T(y) -> (O(x,y) <-> (exists z (P(z,x) & P(z,y) & T(z)))))) # label(non_clause).  [assumption].
10 (all x all y (T(x) & T(y) -> (disjoint(x,y) <-> -O(x,y)))) # label(non_clause).  [assumption].
11 (all x all y (T(x) & T(y) -> (U(x,y) <-> (exists z (P(x,z) & P(y,z) & T(z)))))) # label(non_clause).  [assumption].
12 (all x (T(x) -> (AtP(x) <-> (all y (T(y) & P(y,x) -> y = x))))) # label(non_clause).  [assumption].
13 (all x all y (T(x) & T(y) & U(x,y) -> (exists z (T(z) & (all w (T(w) -> (O(w,z) <-> O(w,x) | O(w,y)))))))) # label(non_clause).  [assumption].
14 (all x all y (T(x) & T(y) & O(x,y) -> (exists z (T(z) & (all w (T(w) -> (PP(w,z) <-> PP(w,x) & PP(w,y)))))))) # label(non_clause).  [assumption].
15 (all x all y (part(x,y) <-> P(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
16 (all x (x = x <-> T(x))) # label(non_clause).  [assumption].
17 (all x all y (ppart(x,y) <-> PP(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
18 (all x all y (overlaps(x,y) <-> O(x,y) & T(x) & T(y))) # label(non_clause).  [assumption].
19 (all x all y (disjoint(x,y) <-> -overlaps(x,y))) # label(non_clause).  [assumption].
20 (all x all y (overlaps(x,y) <-> (exists z (part(z,x) & part(z,y))))) # label(non_clause).  [assumption].
21 (all x all y (underlaps(x,y) <-> (exists z (part(x,z) & part(y,z))))) # label(non_clause).  [assumption].
22 (all x (ED(x) | PD(x) | Q(x) | T(x) -> PT(x))) # label(non_clause).  [assumption].
23 (all x (PT(x) <-> ED(x) | PD(x) | Q(x) | T(x))) # label(non_clause).  [assumption].
24 (all x (ED(x) -> -PD(x) & -Q(x) & -T(x))) # label(non_clause).  [assumption].
25 (all x (PD(x) -> -Q(x) & -T(x))) # label(non_clause).  [assumption].
26 (all x (Q(x) -> -T(x))) # label(non_clause).  [assumption].
27 (all x (T(x) -> AB(x))) # label(non_clause).  [assumption].
28 (all x all y (underlaps(x,y) -> (exists z all v (overlaps(v,z) <-> overlaps(v,x) | overlaps(v,y))))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== CLAUSES FOR SEARCH ====================

formulas(mace4_clauses).
-P(x,y) | T(y).
-P(x,y) | -T(x) | T(y).
-P(x,y) | T(x) | -T(y).
-T(x) | P(x,x).
-T(x) | -T(y) | -P(x,y) | -P(y,x) | y = x.
-T(x) | -T(y) | -P(x,y) | -P(y,z) | P(x,z).
-T(x) | -T(y) | P(x,y) | T(f1(x,y)).
-T(x) | -T(y) | P(x,y) | P(f1(x,y),x).
-T(x) | -T(y) | P(x,y) | -O(f1(x,y),y).
-T(x) | -T(y) | P(x,y) | P(f2(x,y),x).
-T(x) | -T(y) | P(x,y) | disjoint(f2(x,y),y).
-T(x) | -T(y) | P(x,y) | T(f2(x,y)).
-T(x) | -T(y) | -PP(x,y) | P(x,y).
-T(x) | -T(y) | -PP(x,y) | -P(y,x).
-T(x) | -T(y) | PP(x,y) | -P(x,y) | P(y,x).
-T(x) | -T(y) | -O(x,y) | P(f3(x,y),x).
-T(x) | -T(y) | -O(x,y) | P(f3(x,y),y).
-T(x) | -T(y) | -O(x,y) | T(f3(x,y)).
-T(x) | -T(y) | O(x,y) | -P(z,x) | -P(z,y) | -T(z).
-T(x) | -T(y) | -disjoint(x,y) | -O(x,y).
-T(x) | -T(y) | disjoint(x,y) | O(x,y).
-T(x) | -T(y) | -U(x,y) | P(x,f4(x,y)).
-T(x) | -T(y) | -U(x,y) | P(y,f4(x,y)).
-T(x) | -T(y) | -U(x,y) | T(f4(x,y)).
-T(x) | -T(y) | U(x,y) | -P(x,z) | -P(y,z) | -T(z).
-T(x) | -AtP(x) | -T(y) | -P(y,x) | y = x.
-T(x) | AtP(x) | T(f5(x)).
-T(x) | AtP(x) | P(f5(x),x).
-T(x) | AtP(x) | f5(x) != x.
-T(x) | -T(y) | -U(x,y) | T(f6(x,y)).
-T(x) | -T(y) | -U(x,y) | -T(z) | -O(z,f6(x,y)) | O(z,x) | O(z,y).
-T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f6(x,y)) | -O(z,x).
-T(x) | -T(y) | -U(x,y) | -T(z) | O(z,f6(x,y)) | -O(z,y).
-T(x) | -T(y) | -O(x,y) | T(f7(x,y)).
-T(x) | -T(y) | -O(x,y) | -T(z) | -PP(z,f7(x,y)) | PP(z,x).
-T(x) | -T(y) | -O(x,y) | -T(z) | -PP(z,f7(x,y)) | PP(z,y).
-T(x) | -T(y) | -O(x,y) | -T(z) | PP(z,f7(x,y)) | -PP(z,x) | -PP(z,y).
-part(x,y) | P(x,y).
-part(x,y) | T(x).
-part(x,y) | T(y).
part(x,y) | -P(x,y) | -T(x) | -T(y).
x != x | T(x).
x = x | -T(x).
-ppart(x,y) | PP(x,y).
-ppart(x,y) | T(x).
-ppart(x,y) | T(y).
ppart(x,y) | -PP(x,y) | -T(x) | -T(y).
-overlaps(x,y) | O(x,y).
-overlaps(x,y) | T(x).
-overlaps(x,y) | T(y).
overlaps(x,y) | -O(x,y) | -T(x) | -T(y).
-disjoint(x,y) | -overlaps(x,y).
disjoint(x,y) | overlaps(x,y).
-overlaps(x,y) | part(f8(x,y),x).
-overlaps(x,y) | part(f8(x,y),y).
overlaps(x,y) | -part(z,x) | -part(z,y).
-underlaps(x,y) | part(x,f9(x,y)).
-underlaps(x,y) | part(y,f9(x,y)).
underlaps(x,y) | -part(x,z) | -part(y,z).
-ED(x) | PT(x).
-PD(x) | PT(x).
-Q(x) | PT(x).
-T(x) | PT(x).
-PT(x) | ED(x) | PD(x) | Q(x) | T(x).
PT(x) | -ED(x).
PT(x) | -PD(x).
PT(x) | -Q(x).
PT(x) | -T(x).
-ED(x) | -PD(x).
-ED(x) | -Q(x).
-ED(x) | -T(x).
-PD(x) | -Q(x).
-PD(x) | -T(x).
-Q(x) | -T(x).
-T(x) | AB(x).
underlaps(c1,c2).
overlaps(f10(x),x) | overlaps(f10(x),c1) | overlaps(f10(x),c2).
-overlaps(f10(x),x) | -overlaps(f10(x),c1).
-overlaps(f10(x),x) | -overlaps(f10(x),c2).
end_of_list.

============================== end of clauses for search =============

% There are no natural numbers in the input.

============================== DOMAIN SIZE 2 =========================

============================== STATISTICS ============================

For domain size 2.

Current CPU time: 0.00 seconds (total CPU time: 0.01 seconds).
Ground clauses: seen=307, kept=262.
Selections=50, assignments=99, propagations=692, current_models=0.
Rewrite_terms=658, rewrite_bools=3294, indexes=128.
Rules_from_neg_clauses=128, cross_offs=128.

============================== end of statistics =====================

============================== DOMAIN SIZE 3 =========================

============================== STATISTICS ============================

For domain size 3.

Current CPU time: 0.00 seconds (total CPU time: 600.00 seconds).
Ground clauses: seen=751, kept=667.
Selections=340269033, assignments=1020806958, propagations=66014, current_models=0.
Rewrite_terms=2776622507, rewrite_bools=1593400843, indexes=3943.
Rules_from_neg_clauses=7520, cross_offs=18798.

============================== end of statistics =====================

User_CPU=600.00, System_CPU=102.35, Wall_clock=703.

Exiting with failure.

Process 10053 exit (max_sec_no) Tue Mar 26 21:29:48 2013
The process finished Tue Mar 26 21:29:48 2013
