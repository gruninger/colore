%axioms from module ig//consistency/p9/ig_nontrivial.p9
%----------------------------------

% Automatically generated from CL/KIF
formulas(sos).
% Module ig/consistency/ig_nontrivial
%imports("ig/ig").
 exists x (Pl(x)).


%axioms from module ig/p9/ig.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module ig/ig
%imports("ig/ig_2d_lin").
% '(linear) incidence geometry'
% 'I.0b'
 all x ((Pt(x) -> -(L(x)) & -(Pl(x)))).
 all x ((L(x) -> -(Pt(x)) & -(Pl(x)))).
 all x ((Pl(x) -> -(Pt(x)) & -(L(x)))).
% 'I.3'
 all x ((Pl(x) ->  exists p exists q exists r (-((p = q)) & -((p = r)) & -((q = r)) & Pt(p) & Pt(q) & Pt(r) & on(p, x) & on(q, x) & on(r, x) &  all l ((L(l) -> -(on(p, l)) | -(on(q, l)) | -(on(r, l))))))).
% 'I.4a'
 all p all q all r ((Pt(p) & Pt(q) & Pt(r) &  all l ((L(l) -> -(on(p, l)) | -(on(q, l)) | -(on(r, l)))) ->  exists x (Pl(x) & on(p, x) & on(q, x) & on(r, x)))).
% 'I.4b'
 all p all q all r all x all y ((Pt(p) & Pt(q) & Pt(r) &  all l ((L(l) -> -(on(p, l)) | -(on(q, l)) | -(on(r, l)))) & Pl(x) & on(p, x) & on(q, x) & on(r, x) & Pl(y) & on(p, y) & on(q, y) & on(r, y) -> (x = y))).
% 'I.5'
 all p all q all l all x ((Pt(p) & Pt(q) & -((p = q)) & L(l) & on(p, l) & on(q, l) & Pl(x) & on(p, x) & on(q, x) ->  all r ((Pt(r) & on(r, l) -> on(r, x))))).


%axioms from module ig/p9/ig_2d_lin.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module ig/ig_2d_lin
% 'linear line spaces'
%imports("ig/ig_2d_slin").
% 'I.2b'
 all x all y ((Pt(x) & Pt(y) & -((x = y)) ->  exists z (L(z) & on(x, z) & on(y, z)))).


%axioms from module ig/p9/ig_2d_slin.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module ig/ig_2d_slin
% 'semi-linear line spaces'
%imports("ig/ig_2d").
% 'I.2a'
 all l all m all x all y ((-((x = y)) & L(l) & L(m) & on(x, l) & on(y, l) & on(x, m) & on(y, m) -> (l = m))).


%axioms from module ig/p9/ig_2d.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module ig/ig_2d
% 'axioms of line spaces'
% 'I.0a'
 all x all y ((on(x, y) -> Pt(x) & -(Pt(y)))).
% 'I.1'
 all x ((L(x) ->  exists y exists z (on(y, x) & on(z, x) & -((y = z))))).

end_of_list.

