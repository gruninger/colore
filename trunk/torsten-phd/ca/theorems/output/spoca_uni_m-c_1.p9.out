============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 22120 was started by torsten on scotus.mie.utoronto.ca,
Mon Nov  5 17:30:27 2012
The command was "prover9 -t 600 -f ca/p9/spoca.p9 ca/p9/uni.p9 ca/p9/oca.p9 contact/p9/weak_contact.p9 lat/p9/ortho_complemented_lattice_meet_join.p9 lat/p9/bounded_lattice_meet_join.p9 lat/p9/lattice_meet_join.p9 ca//theorems/p9/options.txt ca//theorems/p9/spoca_uni_m-c_1.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file ca/p9/spoca.p9


formulas(sos).
(all x all y meet(x,pc(meet(x,y))) = meet(x,pc(y))).
pc("zero") = "one".
pc("one") = "zero".
(all x all y pc(pc(join(x,y))) = join(pc(pc(x)),pc(pc(y)))).
end_of_list.

% Reading from file ca/p9/uni.p9


formulas(sos).
(all x all y all z (meet(x,y) = "zero" & join(x,y) = "one" & meet(x,z) = "zero" & join(x,z) = "one" -> y = z)).
end_of_list.

% Reading from file ca/p9/oca.p9


formulas(sos).
end_of_list.

% Reading from file contact/p9/weak_contact.p9


formulas(sos).
(all x -C("zero",x)).
(all x (x != "zero" -> C(x,x))).
(all x all y (C(x,y) -> C(y,x))).
(all x all y all z (x = meet(x,y) & C(z,x) -> C(z,y))).
end_of_list.

% Reading from file lat/p9/ortho_complemented_lattice_meet_join.p9


formulas(sos).
(all x x = oc(oc(x))).
(all x "one" = join(x,oc(x))).
(all x all y meet(x,y) = oc(join(oc(y),oc(x)))).
end_of_list.

% Reading from file lat/p9/bounded_lattice_meet_join.p9


formulas(sos).
(all x join("zero",x) = x).
(all x join("one",x) = "one").
end_of_list.

% Reading from file lat/p9/lattice_meet_join.p9


formulas(sos).
(all x x = meet(x,x)).
(all x x = join(x,x)).
(all x all y meet(x,y) = meet(y,x)).
(all x all y join(x,y) = join(y,x)).
(all x all y all z meet(x,meet(y,z)) = meet(z,meet(x,y))).
(all x all y all z join(x,join(y,z)) = join(z,join(x,y))).
(all x all y meet(x,join(x,y)) = x).
(all x all y join(x,meet(x,y)) = x).
end_of_list.

% Reading from file ca//theorems/p9/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file ca//theorems/p9/spoca_uni_m-c_1.p9


formulas(goals).
(all x all z (meet(z,oc(x)) = "zero" -> meet(z,x) = z)).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y meet(x,pc(meet(x,y))) = meet(x,pc(y))) # label(non_clause).  [assumption].
2 (all x all y pc(pc(join(x,y))) = join(pc(pc(x)),pc(pc(y)))) # label(non_clause).  [assumption].
3 (all x all y all z (meet(x,y) = "zero" & join(x,y) = "one" & meet(x,z) = "zero" & join(x,z) = "one" -> y = z)) # label(non_clause).  [assumption].
4 (all x -C("zero",x)) # label(non_clause).  [assumption].
5 (all x (x != "zero" -> C(x,x))) # label(non_clause).  [assumption].
6 (all x all y (C(x,y) -> C(y,x))) # label(non_clause).  [assumption].
7 (all x all y all z (x = meet(x,y) & C(z,x) -> C(z,y))) # label(non_clause).  [assumption].
8 (all x x = oc(oc(x))) # label(non_clause).  [assumption].
9 (all x "one" = join(x,oc(x))) # label(non_clause).  [assumption].
10 (all x all y meet(x,y) = oc(join(oc(y),oc(x)))) # label(non_clause).  [assumption].
11 (all x join("zero",x) = x) # label(non_clause).  [assumption].
12 (all x join("one",x) = "one") # label(non_clause).  [assumption].
13 (all x x = meet(x,x)) # label(non_clause).  [assumption].
14 (all x x = join(x,x)) # label(non_clause).  [assumption].
15 (all x all y meet(x,y) = meet(y,x)) # label(non_clause).  [assumption].
16 (all x all y join(x,y) = join(y,x)) # label(non_clause).  [assumption].
17 (all x all y all z meet(x,meet(y,z)) = meet(z,meet(x,y))) # label(non_clause).  [assumption].
18 (all x all y all z join(x,join(y,z)) = join(z,join(x,y))) # label(non_clause).  [assumption].
19 (all x all y meet(x,join(x,y)) = x) # label(non_clause).  [assumption].
20 (all x all y join(x,meet(x,y)) = x) # label(non_clause).  [assumption].
21 (all x all z (meet(z,oc(x)) = "zero" -> meet(z,x) = z)) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

No predicates eliminated.

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, C ]).
Function symbol precedence:  function_order([ "one", "zero", c1, c2, join, meet, pc, oc ]).
After inverse_order: Function symbol precedence:  function_order([ "one", "zero", c1, c2, join, oc, meet, pc ]).
Unfolding symbols: meet/2.

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

% Operation join is commutative; C redundancy checks enabled.
% back CAC tautology: 42 oc(join(oc(x),oc(y))) = oc(join(oc(y),oc(x))).  [copy(41),rewrite([35(1),35(5)])].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

% Operation join is associative-commutative; CAC redundancy checks enabled.
% back CAC tautology: 47 join(x,join(y,z)) = join(z,join(x,y)).  [copy(46),flip(a)].
% back CAC tautology: 89 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),oc(u))) = oc(join(oc(join(oc(z),join(oc(x),oc(y)))),oc(u))).  [back_rewrite(74),rewrite([79(6),79(15)])].
% back CAC tautology: 88 oc(join(oc(x),oc(join(oc(y),join(oc(z),oc(u)))))) = oc(join(oc(x),oc(join(oc(u),join(oc(y),oc(z)))))).  [back_rewrite(75),rewrite([79(7),79(16)])].
% back CAC tautology: 87 oc(join(oc(x),join(oc(y),oc(z)))) = oc(join(oc(z),join(oc(y),oc(x)))).  [back_rewrite(78),rewrite([79(6),79(12)])].
% back CAC tautology: 86 oc(join(oc(x),join(oc(join(oc(y),join(oc(z),oc(u)))),oc(w)))) = oc(join(oc(w),join(oc(x),oc(join(oc(u),join(oc(y),oc(z))))))).  [para(45(a,1),45(a,2,1,2)),rewrite([79(7),79(11),79(20),79(22)])].
% back CAC tautology: 85 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),join(oc(u),oc(w)))) = oc(join(oc(w),join(oc(join(oc(z),join(oc(x),oc(y)))),oc(u)))).  [para(45(a,1),45(a,2,1,1,2)),rewrite([79(6),79(11),79(18),79(22)])].
% back CAC tautology: 84 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),join(oc(u),oc(w)))) = oc(join(oc(u),join(oc(w),oc(join(oc(y),join(oc(z),oc(x))))))).  [para(45(a,1),45(a,2,1,1,1)),rewrite([79(9),79(11),79(17),79(22)]),flip(a)].
% back CAC tautology: 83 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),join(oc(u),oc(w)))) = oc(join(oc(u),join(oc(w),oc(join(oc(z),join(oc(x),oc(y))))))).  [para(45(a,1),45(a,1,1,2)),rewrite([79(9),79(11),79(17),79(22)]),flip(a)].
% back CAC tautology: 82 oc(join(oc(x),join(oc(join(oc(y),join(oc(z),oc(u)))),oc(w)))) = oc(join(oc(w),join(oc(x),oc(join(oc(z),join(oc(u),oc(y))))))).  [para(45(a,1),45(a,1,1,1,2)),rewrite([79(7),79(11),79(20),79(22)])].
% back CAC tautology: 81 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),join(oc(u),oc(w)))) = oc(join(oc(w),join(oc(join(oc(y),join(oc(z),oc(x)))),oc(u)))).  [para(45(a,1),45(a,1,1,1,1)),rewrite([79(6),79(11),79(18),79(22)])].
% back CAC tautology: 80 oc(join(oc(x),join(oc(y),oc(z)))) = oc(join(oc(z),join(oc(x),oc(y)))).  [para(43(a,1),45(a,2,1)),rewrite([79(6)]),flip(a)].

============================== PROOF =================================

% Proof 1 at 0.34 (+ 0.01) seconds.
% Length of proof is 65.
% Level of proof is 15.
% Maximum clause weight is 29.000.
% Given clauses 140.

1 (all x all y meet(x,pc(meet(x,y))) = meet(x,pc(y))) # label(non_clause).  [assumption].
3 (all x all y all z (meet(x,y) = "zero" & join(x,y) = "one" & meet(x,z) = "zero" & join(x,z) = "one" -> y = z)) # label(non_clause).  [assumption].
8 (all x x = oc(oc(x))) # label(non_clause).  [assumption].
9 (all x "one" = join(x,oc(x))) # label(non_clause).  [assumption].
10 (all x all y meet(x,y) = oc(join(oc(y),oc(x)))) # label(non_clause).  [assumption].
11 (all x join("zero",x) = x) # label(non_clause).  [assumption].
12 (all x join("one",x) = "one") # label(non_clause).  [assumption].
16 (all x all y join(x,y) = join(y,x)) # label(non_clause).  [assumption].
18 (all x all y all z join(x,join(y,z)) = join(z,join(x,y))) # label(non_clause).  [assumption].
19 (all x all y meet(x,join(x,y)) = x) # label(non_clause).  [assumption].
20 (all x all y join(x,meet(x,y)) = x) # label(non_clause).  [assumption].
21 (all x all z (meet(z,oc(x)) = "zero" -> meet(z,x) = z)) # label(non_clause) # label(goal).  [goal].
22 meet(x,pc(meet(x,y))) = meet(x,pc(y)).  [clausify(1)].
23 pc("zero") = "one".  [assumption].
24 pc("one") = "zero".  [assumption].
27 meet(x,y) != "zero" | join(x,y) != "one" | meet(x,z) != "zero" | join(x,z) != "one" | z = y.  [clausify(3)].
32 oc(oc(x)) = x.  [clausify(8)].
33 join(x,oc(x)) = "one".  [clausify(9)].
34 oc(join(oc(x),oc(y))) = meet(y,x).  [clausify(10)].
35 meet(x,y) = oc(join(oc(y),oc(x))).  [copy(34),flip(a)].
36 join("zero",x) = x.  [clausify(11)].
37 join("one",x) = "one".  [clausify(12)].
43 join(x,y) = join(y,x).  [clausify(16)].
46 join(x,join(y,z)) = join(y,join(z,x)).  [clausify(18)].
47 join(x,join(y,z)) = join(z,join(x,y)).  [copy(46),flip(a)].
48 meet(x,join(x,y)) = x.  [clausify(19)].
49 oc(join(oc(x),oc(join(x,y)))) = x.  [copy(48),rewrite([35(2),43(4)])].
50 join(x,meet(x,y)) = x.  [clausify(20)].
51 join(x,oc(join(oc(y),oc(x)))) = x.  [copy(50),rewrite([35(1)])].
52 meet(c2,oc(c1)) = "zero".  [deny(21)].
53 oc(join(c1,oc(c2))) = "zero".  [copy(52),rewrite([35(4),32(3)])].
54 meet(c2,c1) != c2.  [deny(21)].
55 oc(join(oc(c1),oc(c2))) != c2.  [copy(54),rewrite([35(3)])].
57 oc(join(oc(x),oc(y))) != "zero" | join(y,x) != "one" | oc(join(oc(z),oc(y))) != "zero" | join(y,z) != "one" | z = x.  [back_rewrite(27),rewrite([35(1),35(10)])].
58 oc(join(oc(x),oc(pc(oc(join(oc(y),oc(x))))))) = oc(join(oc(pc(y)),oc(x))).  [back_rewrite(22),rewrite([35(1),35(6),43(8),35(11)])].
61 oc("zero") = "one".  [para(36(a,1),33(a,1))].
62 join(x,"zero") = x.  [para(43(a,1),36(a,1))].
63 join(x,"one") = "one".  [para(43(a,1),37(a,1))].
92 join(x,join(oc(x),y)) = "one".  [para(33(a,1),47(a,1,2)),rewrite([63(2),47(4)]),flip(a)].
98 join(join(x,y),z) = join(x,join(y,z)).  [para(47(a,2),43(a,1)),flip(a)].
99 join(x,join(y,z)) = join(y,join(x,z)).  [para(43(a,1),47(a,1,2))].
106 oc("one") = "zero".  [para(36(a,1),49(a,1,1,2,1)),rewrite([61(2),37(3)])].
112 join(x,oc(join(y,oc(x)))) = x.  [para(32(a,1),51(a,1,2,1,1))].
115 join(c1,oc(c2)) = "one".  [para(53(a,1),32(a,1,1)),rewrite([61(2)]),flip(a)].
119 oc(join(oc(x),y)) != "zero" | join(oc(y),x) != "one" | x = y.  [para(33(a,1),57(a,1,1)),rewrite([106(2),43(5),33(5),32(9)]),xx(a),xx(b)].
125 oc(join(oc(x),oc(pc(x)))) = "zero".  [para(24(a,1),58(a,2,1,1,1)),rewrite([106(3),36(4),32(3),61(7),37(8),106(7)])].
127 oc(join(x,oc(pc(oc(join(oc(y),x)))))) = oc(join(oc(pc(y)),x)).  [para(32(a,1),58(a,1,1,1)),rewrite([32(3),32(11)])].
129 oc(join(x,oc(pc(x)))) = oc(x).  [para(33(a,1),58(a,1,1,2,1,1,1)),rewrite([32(2),106(2),23(2),106(2),62(2),32(5),43(4)]),flip(a)].
144 join(x,join(y,oc(x))) = "one".  [para(43(a,1),92(a,1,2))].
149 join(oc(x),oc(join(y,x))) = oc(x).  [para(32(a,1),112(a,1,2,1,2))].
156 join(oc(x),oc(pc(x))) = "one".  [para(125(a,1),32(a,1,1)),rewrite([61(2)]),flip(a)].
161 join(x,join(y,oc(join(x,y)))) = "one".  [para(98(a,1),33(a,1))].
185 join(x,oc(pc(x))) = x.  [para(129(a,1),32(a,1,1)),rewrite([32(2)]),flip(a)].
197 join(x,pc(x)) = "one".  [para(185(a,1),144(a,1,2)),rewrite([43(2)])].
292 join(x,join(y,oc(join(y,x)))) = "one".  [para(43(a,1),161(a,1,2,2,1))].
396 oc(pc(x)) = x.  [para(156(a,1),119(a,1,1)),rewrite([106(2),32(6),43(5),197(5)]),flip(c),xx(a),xx(b)].
398 pc(oc(x)) = x.  [para(197(a,1),119(a,1,1)),rewrite([106(2),396(6),43(5),33(5)]),flip(c),xx(a),xx(b)].
417 oc(join(x,oc(join(oc(y),x)))) = oc(join(y,x)).  [back_rewrite(127),rewrite([398(4),396(7)])].
443 join(x,join(y,join(z,oc(join(z,x))))) = "one".  [para(292(a,1),99(a,1,2)),rewrite([63(2)]),flip(a)].
561 join(oc(c2),join(x,c1)) = "one".  [para(115(a,1),443(a,1,2,2,2,1)),rewrite([106(5),43(5),36(5)])].
768 join(x,oc(join(oc(y),x))) = join(y,x).  [para(417(a,1),32(a,1,1)),rewrite([32(3)]),flip(a)].
861 join(c2,join(x,c1)) = join(x,c1).  [para(561(a,1),768(a,1,2,1)),rewrite([106(4),43(4),36(4)]),flip(a)].
907 join(c1,c2) = c1.  [para(36(a,1),861(a,1,2)),rewrite([43(3),36(6)])].
917 join(oc(c1),oc(c2)) = oc(c2).  [para(907(a,1),149(a,1,2,1)),rewrite([43(5)])].
919 $F.  [back_rewrite(55),rewrite([917(5),32(3)]),xx(a)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=140. Generated=9267. Kept=887. proofs=1.
Usable=97. Sos=396. Demods=252. Limbo=2, Disabled=416. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=8379. Back_subsumed=38.
Sos_limit_deleted=0. Sos_displaced=0. Sos_removed=0.
New_demodulators=507 (4 lex), Back_demodulated=342. Back_unit_deleted=0.
Demod_attempts=114011. Demod_rewrites=23245.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=10376. Nonunit_bsub_feature_tests=3412.
Megabytes=1.54.
User_CPU=0.34, System_CPU=0.01, Wall_clock=1.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 22120 exit (max_proofs) Mon Nov  5 17:30:28 2012
