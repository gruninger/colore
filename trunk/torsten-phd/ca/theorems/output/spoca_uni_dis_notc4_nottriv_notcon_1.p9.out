============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 20436 was started by torsten on scotus.mie.utoronto.ca,
Mon Nov  5 12:11:15 2012
The command was "prover9 -t 600 -f ca/p9/spoca.p9 ca/p9/uni.p9 ca/p9/dis.p9 ca/p9/notc4.p9 ca/p9/oca.p9 contact/p9/weak_contact.p9 lat/p9/ortho_complemented_lattice_meet_join.p9 lat/p9/bounded_lattice_meet_join.p9 lat/p9/lattice_meet_join.p9 ca//theorems/p9/options.txt ca//theorems/p9/spoca_uni_dis_notc4_nottriv_notcon_1.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file ca/p9/spoca.p9


formulas(sos).
(all x all y meet(x,pc(meet(x,y))) = meet(x,pc(y))).
pc("zero") = "one".
pc("one") = "zero".
(all x all y pc(pc(join(x,y))) = join(pc(pc(x)),pc(pc(y)))).
end_of_list.

% Reading from file ca/p9/uni.p9


formulas(sos).
(all x all y all z (meet(x,y) = "zero" & join(x,y) = "one" & meet(x,z) = "zero" & join(x,z) = "one" -> y = z)).
end_of_list.

% Reading from file ca/p9/dis.p9


formulas(sos).
(all x (x != "one" -> (exists y (y != "zero" & -C(x,y))))).
end_of_list.

% Reading from file ca/p9/notc4.p9


formulas(sos).
(exists x exists y exists z (C(z,join(x,y)) & -C(z,x) & -C(z,y))).
end_of_list.

% Reading from file ca/p9/oca.p9


formulas(sos).
end_of_list.

% Reading from file contact/p9/weak_contact.p9


formulas(sos).
(all x -C("zero",x)).
(all x (x != "zero" -> C(x,x))).
(all x all y (C(x,y) -> C(y,x))).
(all x all y all z (x = meet(x,y) & C(z,x) -> C(z,y))).
end_of_list.

% Reading from file lat/p9/ortho_complemented_lattice_meet_join.p9


formulas(sos).
(all x x = oc(oc(x))).
(all x "one" = join(x,oc(x))).
(all x all y meet(x,y) = oc(join(oc(y),oc(x)))).
end_of_list.

% Reading from file lat/p9/bounded_lattice_meet_join.p9


formulas(sos).
(all x join("zero",x) = x).
(all x join("one",x) = "one").
end_of_list.

% Reading from file lat/p9/lattice_meet_join.p9


formulas(sos).
(all x x = meet(x,x)).
(all x x = join(x,x)).
(all x all y meet(x,y) = meet(y,x)).
(all x all y join(x,y) = join(y,x)).
(all x all y all z meet(x,meet(y,z)) = meet(z,meet(x,y))).
(all x all y all z join(x,join(y,z)) = join(z,join(x,y))).
(all x all y meet(x,join(x,y)) = x).
(all x all y join(x,meet(x,y)) = x).
end_of_list.

% Reading from file ca//theorems/p9/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file ca//theorems/p9/spoca_uni_dis_notc4_nottriv_notcon_1.p9


formulas(goals).
(exists y (y != "one" & C(y,y))) -> (exists x (x != "zero" & x != "one" & C(x,oc(x)))).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y meet(x,pc(meet(x,y))) = meet(x,pc(y))) # label(non_clause).  [assumption].
2 (all x all y pc(pc(join(x,y))) = join(pc(pc(x)),pc(pc(y)))) # label(non_clause).  [assumption].
3 (all x all y all z (meet(x,y) = "zero" & join(x,y) = "one" & meet(x,z) = "zero" & join(x,z) = "one" -> y = z)) # label(non_clause).  [assumption].
4 (all x (x != "one" -> (exists y (y != "zero" & -C(x,y))))) # label(non_clause).  [assumption].
5 (exists x exists y exists z (C(z,join(x,y)) & -C(z,x) & -C(z,y))) # label(non_clause).  [assumption].
6 (all x -C("zero",x)) # label(non_clause).  [assumption].
7 (all x (x != "zero" -> C(x,x))) # label(non_clause).  [assumption].
8 (all x all y (C(x,y) -> C(y,x))) # label(non_clause).  [assumption].
9 (all x all y all z (x = meet(x,y) & C(z,x) -> C(z,y))) # label(non_clause).  [assumption].
10 (all x x = oc(oc(x))) # label(non_clause).  [assumption].
11 (all x "one" = join(x,oc(x))) # label(non_clause).  [assumption].
12 (all x all y meet(x,y) = oc(join(oc(y),oc(x)))) # label(non_clause).  [assumption].
13 (all x join("zero",x) = x) # label(non_clause).  [assumption].
14 (all x join("one",x) = "one") # label(non_clause).  [assumption].
15 (all x x = meet(x,x)) # label(non_clause).  [assumption].
16 (all x x = join(x,x)) # label(non_clause).  [assumption].
17 (all x all y meet(x,y) = meet(y,x)) # label(non_clause).  [assumption].
18 (all x all y join(x,y) = join(y,x)) # label(non_clause).  [assumption].
19 (all x all y all z meet(x,meet(y,z)) = meet(z,meet(x,y))) # label(non_clause).  [assumption].
20 (all x all y all z join(x,join(y,z)) = join(z,join(x,y))) # label(non_clause).  [assumption].
21 (all x all y meet(x,join(x,y)) = x) # label(non_clause).  [assumption].
22 (all x all y join(x,meet(x,y)) = x) # label(non_clause).  [assumption].
23 (exists y (y != "one" & C(y,y))) -> (exists x (x != "zero" & x != "one" & C(x,oc(x)))) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

No predicates eliminated.

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, C ]).
Function symbol precedence:  function_order([ "one", "zero", c1, c2, c3, c4, join, meet, pc, oc, f1 ]).
After inverse_order: Function symbol precedence:  function_order([ "one", "zero", c1, c2, c3, c4, join, oc, meet, pc, f1 ]).
Unfolding symbols: meet/2.

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

% Operation join is commutative; C redundancy checks enabled.
% back CAC tautology: 50 oc(join(oc(x),oc(y))) = oc(join(oc(y),oc(x))).  [copy(49),rewrite([43(1),43(5)])].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

% Operation join is associative-commutative; CAC redundancy checks enabled.
% back CAC tautology: 55 join(x,join(y,z)) = join(z,join(x,y)).  [copy(54),flip(a)].
% back CAC tautology: 100 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),oc(u))) = oc(join(oc(join(oc(z),join(oc(x),oc(y)))),oc(u))).  [back_rewrite(85),rewrite([90(6),90(15)])].
% back CAC tautology: 99 oc(join(oc(x),oc(join(oc(y),join(oc(z),oc(u)))))) = oc(join(oc(x),oc(join(oc(u),join(oc(y),oc(z)))))).  [back_rewrite(86),rewrite([90(7),90(16)])].
% back CAC tautology: 98 oc(join(oc(x),join(oc(y),oc(z)))) = oc(join(oc(z),join(oc(y),oc(x)))).  [back_rewrite(89),rewrite([90(6),90(12)])].
% back CAC tautology: 97 oc(join(oc(x),join(oc(join(oc(y),join(oc(z),oc(u)))),oc(w)))) = oc(join(oc(w),join(oc(x),oc(join(oc(u),join(oc(y),oc(z))))))).  [para(53(a,1),53(a,2,1,2)),rewrite([90(7),90(11),90(20),90(22)])].
% back CAC tautology: 96 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),join(oc(u),oc(w)))) = oc(join(oc(w),join(oc(join(oc(z),join(oc(x),oc(y)))),oc(u)))).  [para(53(a,1),53(a,2,1,1,2)),rewrite([90(6),90(11),90(18),90(22)])].
% back CAC tautology: 95 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),join(oc(u),oc(w)))) = oc(join(oc(u),join(oc(w),oc(join(oc(y),join(oc(z),oc(x))))))).  [para(53(a,1),53(a,2,1,1,1)),rewrite([90(9),90(11),90(17),90(22)]),flip(a)].
% back CAC tautology: 94 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),join(oc(u),oc(w)))) = oc(join(oc(u),join(oc(w),oc(join(oc(z),join(oc(x),oc(y))))))).  [para(53(a,1),53(a,1,1,2)),rewrite([90(9),90(11),90(17),90(22)]),flip(a)].
% back CAC tautology: 93 oc(join(oc(x),join(oc(join(oc(y),join(oc(z),oc(u)))),oc(w)))) = oc(join(oc(w),join(oc(x),oc(join(oc(z),join(oc(u),oc(y))))))).  [para(53(a,1),53(a,1,1,1,2)),rewrite([90(7),90(11),90(20),90(22)])].
% back CAC tautology: 92 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),join(oc(u),oc(w)))) = oc(join(oc(w),join(oc(join(oc(y),join(oc(z),oc(x)))),oc(u)))).  [para(53(a,1),53(a,1,1,1,1)),rewrite([90(6),90(11),90(18),90(22)])].
% back CAC tautology: 91 oc(join(oc(x),join(oc(y),oc(z)))) = oc(join(oc(z),join(oc(x),oc(y)))).  [para(51(a,1),53(a,2,1)),rewrite([90(6)]),flip(a)].

NOTE: Back_subsumption disabled, ratio of kept to back_subsumed is 29 (0.00 of 1.34 sec).

Low Water (keep): wt=71.000, iters=6733

Low Water (keep): wt=64.000, iters=6761

Low Water (keep): wt=60.000, iters=6936

Low Water (keep): wt=58.000, iters=6883

Low Water (keep): wt=57.000, iters=6831

Low Water (keep): wt=53.000, iters=6733

Low Water (keep): wt=52.000, iters=6755

Low Water (keep): wt=51.000, iters=6707

Low Water (keep): wt=50.000, iters=6766

Low Water (keep): wt=48.000, iters=6689

Low Water (keep): wt=44.000, iters=6678

Low Water (keep): wt=41.000, iters=6689

Low Water (keep): wt=40.000, iters=6694

Low Water (keep): wt=38.000, iters=6801

Low Water (keep): wt=37.000, iters=6716

Low Water (keep): wt=36.000, iters=6711

Low Water (keep): wt=35.000, iters=6750

Low Water (keep): wt=34.000, iters=6738

Low Water (keep): wt=33.000, iters=6672

Low Water (keep): wt=32.000, iters=6786

Low Water (keep): wt=31.000, iters=6709

Low Water (keep): wt=30.000, iters=6683

Low Water (keep): wt=29.000, iters=6712

Low Water (keep): wt=28.000, iters=6715

Low Water (keep): wt=27.000, iters=6669

Low Water (keep): wt=26.000, iters=6699

Low Water (keep): wt=25.000, iters=6670

Low Water (keep): wt=24.000, iters=6666

Demod_increase_limit: join(join(oc(join(oc(v200),oc(y))),join(oc(join(oc(c2),oc(y))),join(oc(join(oc(v201),oc(y))),join(oc(join(oc(c1),oc(y))),oc(join(oc(v202),oc(y))))))),join(join(oc(join(oc(v200),oc(z))),join(oc(join(oc(c2),oc(z))),join(oc(join(oc(v201),oc(z))),join(oc(join(oc(c1),oc(z))),oc(join(oc(v202),oc(z))))))),join(join(join(join(join(oc(join(oc(v200),oc(w))),join(oc(join(oc(c2),oc(w))),join(oc(join(oc(v201),oc(w))),join(oc(join(oc(c1),oc(w))),join(oc(join(oc(v202),oc(w))),join(oc(join(oc(v200),join(oc(w),join(oc(u),join(v202,join(z,join(oc(join(y,join(oc(c1),join(v202,z)))),join(oc(join(y,join(c1,join(oc(v201),join(v202,z))))),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w)))))))))),join(oc(join(oc(c2),join(oc(w),join(oc(u),join(v202,join(z,join(oc(join(y,join(oc(c1),join(v202,z)))),join(oc(join(y,join(c1,join(oc(v201),join(v202,z))))),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w)))))))))),join(oc(join(oc(v201),join(oc(w),join(oc(u),join(v202,join(z,join(oc(join(y,join(oc(c1),join(v202,z)))),join(oc(join(y,join(c1,join(oc(v201),join(v202,z))))),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w)))))))))),oc(join(oc(c1),join(oc(w),join(oc(u),join(v202,join(z,join(oc(join(y,join(oc(c1),join(v202,z)))),join(oc(join(y,join(c1,join(oc(v201),join(v202,z))))),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w)))))))))))))))))),join(oc(join(oc(v200),join(y,join(w,join(oc(join(u,join(oc(z),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w))))),oc(join(u,join(v202,join(z,join(oc(join(y,join(oc(c1),join(v202,z)))),join(oc(join(y,join(c1,join(oc(v201),join(v202,z))))),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w))))))))))))),join(oc(join(oc(c2),join(y,join(w,join(oc(join(u,join(oc(z),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w))))),oc(join(u,join(v202,join(z,join(oc(join(y,join(oc(c1),join(v202,z)))),join(oc(join(y,join(c1,join(oc(v201),join(v202,z))))),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w))))))))))))),oc(join(oc(join(v201,join(c1,v202))),join(y,join(w,join(oc(join(u,join(oc(z),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w))))),oc(join(u,join(v202,join(z,join(oc(join(y,join(oc(c1),join(v202,z)))),join(oc(join(y,join(c1,join(oc(v201),join(v202,z))))),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w)))))))))))))))),oc(join(oc(join(v200,join(c2,join(v201,join(c1,v202))))),join(oc(oc(v202)),join(join(oc(y),w),join(oc(join(u,join(oc(z),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w))))),oc(join(u,join(v202,join(z,join(oc(join(y,join(oc(c1),join(v202,z)))),join(oc(join(y,join(c1,join(oc(v201),join(v202,z))))),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w)))))))))))))),oc(join(oc(join(v200,join(c2,join(v201,join(c1,v202))))),join(oc(z),join(join(oc(v202),join(oc(y),w)),join(oc(join(u,join(oc(z),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w))))),oc(join(u,join(v202,join(z,join(oc(join(y,join(oc(c1),join(v202,z)))),join(oc(join(y,join(c1,join(oc(v201),join(v202,z))))),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w)))))))))))))),oc(join(oc(join(v200,join(c2,join(v201,join(c1,v202))))),join(oc(u),join(join(z,join(oc(v202),join(oc(y),w))),join(oc(join(u,join(oc(z),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w))))),oc(join(u,join(v202,join(z,join(oc(join(y,join(oc(c1),join(v202,z)))),join(oc(join(y,join(c1,join(oc(v201),join(v202,z))))),join(oc(join(y,join(oc(c2),join(v201,join(c1,join(v202,z)))))),join(oc(join(y,join(c2,join(oc(v200),join(v201,join(c1,join(v202,z))))))),w)))))))))))))))) != "zero".  [ur(1560,a,1620,a,c,2738,a(flip)),rewrite([12422(10),12422(9),12422(7),12422(6),109(15),110(16),109(19),109(25),109(24),109(29),109(28),109(36),109(35),109(34),110(37),109(40),109(39),109(38),109(41),109(40),109(39),109(38),51(53),3301(54),3335(10),3335(13),3335(16),3335(19),3301(79),3335(36),3335(39),3335(42),3335(45),12422(102),12422(101),4078(97),9804(90),40(86),109(165),9820(165),9782(157),15363(151),110(138),276(138),51(133),12422(135),12422(134),12422(133),12422(131),9804(127),12474(103),14497(100),3335(62),3335(65),3335(68),3335(71),3335(129),3335(173),3335(217),12912(260),109(264),109(263),109(262),109(261),40(273),3335(341),3335(411)])].

Demod_increase_limit (steps=67, size=1069).
The most recent kept clause is 18210.
From here on, a short message will be printed
for each 100 times the limit is hit.


Low Water (keep): wt=23.000, iters=6673

Low Water (keep): wt=22.000, iters=6670

Low Water (keep): wt=21.000, iters=6683

Low Water (keep): wt=20.000, iters=6667
Demod_limit hit 100 times.

============================== PROOF =================================

% Proof 1 at 369.45 (+ 0.87) seconds.
% Length of proof is 115.
% Level of proof is 23.
% Maximum clause weight is 29.000.
% Given clauses 6030.

1 (all x all y meet(x,pc(meet(x,y))) = meet(x,pc(y))) # label(non_clause).  [assumption].
3 (all x all y all z (meet(x,y) = "zero" & join(x,y) = "one" & meet(x,z) = "zero" & join(x,z) = "one" -> y = z)) # label(non_clause).  [assumption].
5 (exists x exists y exists z (C(z,join(x,y)) & -C(z,x) & -C(z,y))) # label(non_clause).  [assumption].
6 (all x -C("zero",x)) # label(non_clause).  [assumption].
7 (all x (x != "zero" -> C(x,x))) # label(non_clause).  [assumption].
8 (all x all y (C(x,y) -> C(y,x))) # label(non_clause).  [assumption].
9 (all x all y all z (x = meet(x,y) & C(z,x) -> C(z,y))) # label(non_clause).  [assumption].
10 (all x x = oc(oc(x))) # label(non_clause).  [assumption].
11 (all x "one" = join(x,oc(x))) # label(non_clause).  [assumption].
12 (all x all y meet(x,y) = oc(join(oc(y),oc(x)))) # label(non_clause).  [assumption].
13 (all x join("zero",x) = x) # label(non_clause).  [assumption].
14 (all x join("one",x) = "one") # label(non_clause).  [assumption].
18 (all x all y join(x,y) = join(y,x)) # label(non_clause).  [assumption].
20 (all x all y all z join(x,join(y,z)) = join(z,join(x,y))) # label(non_clause).  [assumption].
21 (all x all y meet(x,join(x,y)) = x) # label(non_clause).  [assumption].
22 (all x all y join(x,meet(x,y)) = x) # label(non_clause).  [assumption].
23 (exists y (y != "one" & C(y,y))) -> (exists x (x != "zero" & x != "one" & C(x,oc(x)))) # label(non_clause) # label(goal).  [goal].
24 meet(x,pc(meet(x,y))) = meet(x,pc(y)).  [clausify(1)].
25 pc("zero") = "one".  [assumption].
26 pc("one") = "zero".  [assumption].
29 meet(x,y) != "zero" | join(x,y) != "one" | meet(x,z) != "zero" | join(x,z) != "one" | z = y.  [clausify(3)].
33 C(c3,join(c1,c2)).  [clausify(5)].
34 -C(c3,c1).  [clausify(5)].
35 -C(c3,c2).  [clausify(5)].
36 -C("zero",x).  [clausify(6)].
37 "zero" = x | C(x,x).  [clausify(7)].
38 -C(x,y) | C(y,x).  [clausify(8)].
39 meet(x,y) != x | -C(z,x) | C(z,y).  [clausify(9)].
40 oc(oc(x)) = x.  [clausify(10)].
41 join(x,oc(x)) = "one".  [clausify(11)].
42 oc(join(oc(x),oc(y))) = meet(y,x).  [clausify(12)].
43 meet(x,y) = oc(join(oc(y),oc(x))).  [copy(42),flip(a)].
44 join("zero",x) = x.  [clausify(13)].
45 join("one",x) = "one".  [clausify(14)].
51 join(x,y) = join(y,x).  [clausify(18)].
54 join(x,join(y,z)) = join(y,join(z,x)).  [clausify(20)].
55 join(x,join(y,z)) = join(z,join(x,y)).  [copy(54),flip(a)].
56 meet(x,join(x,y)) = x.  [clausify(21)].
57 oc(join(oc(x),oc(join(x,y)))) = x.  [copy(56),rewrite([43(2),51(4)])].
58 join(x,meet(x,y)) = x.  [clausify(22)].
59 join(x,oc(join(oc(y),oc(x)))) = x.  [copy(58),rewrite([43(1)])].
63 "zero" = x | "one" = x | - C(x,oc(x)).  [deny(23)].
64 oc(join(oc(x),oc(y))) != y | -C(z,y) | C(z,x).  [back_rewrite(39),rewrite([43(1)])].
65 oc(join(oc(x),oc(y))) != "zero" | join(y,x) != "one" | oc(join(oc(z),oc(y))) != "zero" | join(y,z) != "one" | z = x.  [back_rewrite(29),rewrite([43(1),43(10)])].
66 oc(join(oc(x),oc(pc(oc(join(oc(y),oc(x))))))) = oc(join(oc(pc(y)),oc(x))).  [back_rewrite(24),rewrite([43(1),43(6),51(8),43(11)])].
67 C(join(c1,c2),c3).  [resolve(38,a,33,a)].
68 -C(x,"zero").  [ur(38,b,36,a)].
69 -C(c2,c3).  [ur(38,b,35,a)].
70 -C(c1,c3).  [ur(38,b,34,a)].
72 oc("zero") = "one".  [para(44(a,1),41(a,1))].
73 join(x,"zero") = x.  [para(51(a,1),44(a,1))].
74 join(x,"one") = "one".  [para(51(a,1),45(a,1))].
103 join(x,join(oc(x),y)) = "one".  [para(41(a,1),55(a,1,2)),rewrite([74(2),55(4)]),flip(a)].
109 join(join(x,y),z) = join(x,join(y,z)).  [para(55(a,2),51(a,1)),flip(a)].
110 join(x,join(y,z)) = join(y,join(x,z)).  [para(51(a,1),55(a,1,2))].
114 join(oc(x),oc(join(x,y))) = oc(x).  [para(57(a,1),40(a,1,1)),flip(a)].
117 oc("one") = "zero".  [para(44(a,1),57(a,1,1,2,1)),rewrite([72(2),45(3)])].
123 join(x,oc(join(y,oc(x)))) = x.  [para(40(a,1),59(a,1,2,1,1))].
130 oc(join(oc(x),oc(y))) != y | C(y,x) | "zero" = y.  [resolve(64,b,37,b)].
136 oc(join(oc(x),y)) != "zero" | join(oc(y),x) != "one" | x = y.  [para(41(a,1),65(a,1,1)),rewrite([117(2),51(5),41(5),40(9)]),xx(a),xx(b)].
142 oc(join(oc(x),oc(pc(x)))) = "zero".  [para(26(a,1),66(a,2,1,1,1)),rewrite([117(3),44(4),40(3),72(7),45(8),117(7)])].
144 oc(join(x,oc(pc(oc(join(oc(y),x)))))) = oc(join(oc(pc(y)),x)).  [para(40(a,1),66(a,1,1,1)),rewrite([40(3),40(11)])].
146 oc(join(x,oc(pc(x)))) = oc(x).  [para(41(a,1),66(a,1,1,2,1,1,1)),rewrite([40(2),117(2),25(2),117(2),73(2),40(5),51(4)]),flip(a)].
153 oc(join(oc(x),oc(c3))) != c3 | C(join(c1,c2),x).  [resolve(67,a,64,b)].
154 c3 != "zero".  [ur(64,b,67,a,c,68,a),rewrite([72(2),45(4),117(2)]),flip(a)].
156 join(c1,c2) != "zero".  [ur(64,b,33,a,c,68,a),rewrite([72(2),45(6),117(2)]),flip(a)].
169 join(x,join(y,oc(x))) = "one".  [para(51(a,1),103(a,1,2))].
171 join(oc(x),join(y,x)) = "one".  [para(40(a,1),169(a,1,2,2))].
185 join(x,oc(join(oc(x),y))) = x.  [para(51(a,1),123(a,1,2,1))].
194 join(oc(x),oc(pc(x))) = "one".  [para(142(a,1),40(a,1,1)),rewrite([72(2)]),flip(a)].
201 join(x,join(oc(join(x,y)),join(z,y))) = "one".  [para(110(a,1),171(a,1,2)),rewrite([110(5)])].
209 join(x,oc(pc(x))) = x.  [para(146(a,1),40(a,1,1)),rewrite([40(2)]),flip(a)].
216 join(x,pc(x)) = "one".  [para(209(a,1),169(a,1,2)),rewrite([51(2)])].
276 join(oc(x),join(oc(join(x,y)),z)) = join(oc(x),z).  [para(114(a,1),109(a,1,1)),flip(a)].
336 oc(join(oc(x),oc(y))) != x | C(x,y) | "zero" = x.  [para(51(a,1),130(a,1,1))].
468 oc(join(x,oc(y))) != "zero" | join(oc(x),y) != "one" | y = x.  [para(51(a,1),136(a,1,1))].
472 join(x,oc(join(y,x))) != "one" | join(y,x) = x.  [para(169(a,1),136(a,1,1)),rewrite([117(2),40(5),51(6),40(10)]),flip(c),xx(a)].
476 oc(pc(x)) = x.  [para(194(a,1),136(a,1,1)),rewrite([117(2),40(6),51(5),216(5)]),flip(c),xx(a),xx(b)].
478 pc(oc(x)) = x.  [para(216(a,1),136(a,1,1)),rewrite([117(2),476(6),51(5),41(5)]),flip(c),xx(a),xx(b)].
499 oc(join(x,oc(join(oc(y),x)))) = oc(join(y,x)).  [back_rewrite(144),rewrite([478(4),476(7)])].
659 oc(join(x,oc(c3))) != c3 | C(join(c1,c2),oc(x)).  [para(40(a,1),153(a,1,1,1))].
1239 join(x,oc(join(x,y))) != "one" | oc(join(x,y)) = oc(x).  [para(114(a,1),472(a,1,2,1)),rewrite([40(4),51(3),114(9)]),flip(b)].
1251 join(x,oc(join(oc(y),x))) = join(y,x).  [para(499(a,1),40(a,1,1)),rewrite([40(3)]),flip(a)].
1254 join(x,y) = "zero" | join(x,y) = "one" | -C(join(x,y),oc(join(x,y))).  [para(499(a,1),63(c,2)),rewrite([1251(5),1251(8),1251(10)]),flip(a),flip(b)].
1335 join(x,oc(join(y,x))) = join(oc(y),x).  [para(40(a,1),1251(a,1,2,1,1))].
1400 join(x,oc(join(x,y))) = join(oc(y),x).  [para(51(a,1),1335(a,1,2,1))].
1411 oc(join(oc(x),oc(y))) != "zero" | oc(join(x,oc(y))) = y.  [para(1335(a,1),136(a,1,1)),rewrite([40(10),51(9),169(9)]),flip(c),xx(b)].
1427 join(oc(join(x,y)),join(z,y)) = join(oc(x),join(z,y)).  [para(201(a,1),1335(a,1,2,1)),rewrite([117(6),51(6),44(6),276(10)])].
1443 join(oc(x),y) != "one" | oc(join(y,x)) = oc(y).  [back_rewrite(1239),rewrite([1400(3)])].
1715 oc(join(x,join(y,oc(c3)))) != c3 | C(join(c1,c2),oc(join(x,y))).  [para(109(a,1),659(a,1,1))].
1965 C(x,join(y,x)) | "zero" = x.  [para(123(a,1),336(a,1,1)),rewrite([40(2),40(3)]),xx(a)].
1966 C(x,join(x,y)) | "zero" = x.  [para(185(a,1),336(a,1,1)),rewrite([40(2),40(3)]),xx(a)].
1985 "zero" = x | C(join(y,x),x).  [resolve(1965,a,38,a)].
2016 "zero" = x | oc(join(oc(y),oc(x))) != x | C(join(z,x),y).  [resolve(1985,b,64,b)].
3462 join(x,y) != "one" | oc(join(y,oc(x))) = oc(y).  [para(40(a,1),1443(a,1,1))].
3767 oc(join(oc(x),y)) != "zero" | join(y,x) = y.  [para(1400(a,1),468(a,1,1)),rewrite([110(8),103(8)]),xx(b)].
3793 oc(join(x,y)) != "zero" | join(y,oc(x)) = y.  [para(40(a,1),3767(a,1,1,1))].
3817 oc(join(x,y)) != "zero" | join(x,oc(y)) = x.  [para(51(a,1),3793(a,1,1))].
4745 join(x,y) != "one" | oc(join(x,oc(y))) = oc(x).  [para(51(a,1),3462(a,1))].
13599 oc(join(oc(x),oc(y))) != "zero" | oc(join(y,oc(x))) = x.  [para(51(a,1),1411(a,1,1))].
20152 "zero" = x | oc(join(oc(x),oc(y))) != x | C(join(z,x),y).  [para(51(a,1),2016(b,1,1))].
24144 "zero" = x | C(join(y,x),join(z,x)).  [para(123(a,1),20152(b,1,1)),rewrite([40(4),40(6)]),xx(b)].
24175 oc(join(x,y)) = "zero" | C(oc(x),join(z,oc(join(x,y)))).  [para(114(a,1),24144(b,1)),flip(a)].
24473 oc(join(x,oc(y))) = "zero" | C(oc(x),y).  [para(123(a,1),24175(b,2))].
24593 oc(join(oc(x),oc(y))) = "zero" | C(x,y).  [para(40(a,1),24473(b,1))].
29666 oc(join(oc(c1),oc(c3))) = "zero".  [resolve(24593,b,70,a)].
29667 oc(join(oc(c2),oc(c3))) = "zero".  [resolve(24593,b,69,a)].
29745 join(c3,oc(c1)) = oc(c1).  [resolve(29666,a,3817,a),rewrite([40(5),51(4)])].
29765 join(c1,join(x,oc(c3))) = join(x,oc(c3)).  [para(29666(a,1),1427(a,1,1)),rewrite([44(5),40(6)]),flip(a)].
29924 C(c3,oc(c1)).  [para(29745(a,1),1966(a,2)),flip(b),unit_del(b,154)].
30377 oc(join(c1,oc(c2))) != oc(c1).  [ur(64,b,29924,a,c,35,a),rewrite([40(5),51(4)])].
30409 join(c1,c2) != "one".  [ur(4745,b,30377,a)].
30410 -C(join(c1,c2),oc(join(c1,c2))).  [ur(1254,a,156,a,b,30409,a)].
30451 oc(join(c2,oc(c3))) != c3.  [ur(1715,b,30410,a),rewrite([29765(6)])].
30464 $F.  [ur(13599,b,30451,a),rewrite([51(5),29667(6)]),xx(a)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=6030. Generated=1341390. Kept=30430. proofs=1.
Usable=5692. Sos=19442. Demods=1258. Limbo=1, Disabled=5325. Hints=0.
Kept_by_rule=0, Deleted_by_rule=4511.
Forward_subsumed=1175717. Back_subsumed=73.
Sos_limit_deleted=130731. Sos_displaced=0. Sos_removed=0.
New_demodulators=2695 (4 lex), Back_demodulated=5114. Back_unit_deleted=96.
Demod_attempts=28242389. Demod_rewrites=4993447.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=32735305. Nonunit_bsub_feature_tests=12842.
Megabytes=49.60.
User_CPU=369.45, System_CPU=0.87, Wall_clock=370.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 20436 exit (max_proofs) Mon Nov  5 12:17:25 2012
