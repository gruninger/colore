============================== Prover9 ===============================
Prover9 (64) version 2009-11A, November 2009.
Process 22268 was started by torsten on scotus.mie.utoronto.ca,
Mon Nov  5 17:38:05 2012
The command was "prover9 -t 600 -f ca/p9/spoca.p9 ca/p9/oca.p9 contact/p9/weak_contact.p9 lat/p9/ortho_complemented_lattice_meet_join.p9 lat/p9/bounded_lattice_meet_join.p9 lat/p9/lattice_meet_join.p9 ca//theorems/p9/options.txt ca//theorems/p9/spoca_m-s_1.p9".
============================== end of head ===========================

============================== INPUT =================================

% Reading from file ca/p9/spoca.p9


formulas(sos).
(all x all y meet(x,pc(meet(x,y))) = meet(x,pc(y))).
pc("zero") = "one".
pc("one") = "zero".
(all x all y pc(pc(join(x,y))) = join(pc(pc(x)),pc(pc(y)))).
end_of_list.

% Reading from file ca/p9/oca.p9


formulas(sos).
end_of_list.

% Reading from file contact/p9/weak_contact.p9


formulas(sos).
(all x -C("zero",x)).
(all x (x != "zero" -> C(x,x))).
(all x all y (C(x,y) -> C(y,x))).
(all x all y all z (x = meet(x,y) & C(z,x) -> C(z,y))).
end_of_list.

% Reading from file lat/p9/ortho_complemented_lattice_meet_join.p9


formulas(sos).
(all x x = oc(oc(x))).
(all x "one" = join(x,oc(x))).
(all x all y meet(x,y) = oc(join(oc(y),oc(x)))).
end_of_list.

% Reading from file lat/p9/bounded_lattice_meet_join.p9


formulas(sos).
(all x join("zero",x) = x).
(all x join("one",x) = "one").
end_of_list.

% Reading from file lat/p9/lattice_meet_join.p9


formulas(sos).
(all x x = meet(x,x)).
(all x x = join(x,x)).
(all x all y meet(x,y) = meet(y,x)).
(all x all y join(x,y) = join(y,x)).
(all x all y all z meet(x,meet(y,z)) = meet(z,meet(x,y))).
(all x all y all z join(x,join(y,z)) = join(z,join(x,y))).
(all x all y meet(x,join(x,y)) = x).
(all x all y join(x,meet(x,y)) = x).
end_of_list.

% Reading from file ca//theorems/p9/options.txt

clear(auto_denials).
clear(print_initial_clauses).
clear(print_kept).
clear(print_given).

% Reading from file ca//theorems/p9/spoca_m-s_1.p9


formulas(goals).
(all x all y all z (meet(join(x,y),z) != "zero" <-> meet(z,x) != "zero" | meet(z,y) != "zero")).
end_of_list.

============================== end of input ==========================

% From the command line: assign(max_seconds, 600).

============================== PROCESS NON-CLAUSAL FORMULAS ==========

% Formulas that are not ordinary clauses:
1 (all x all y meet(x,pc(meet(x,y))) = meet(x,pc(y))) # label(non_clause).  [assumption].
2 (all x all y pc(pc(join(x,y))) = join(pc(pc(x)),pc(pc(y)))) # label(non_clause).  [assumption].
3 (all x -C("zero",x)) # label(non_clause).  [assumption].
4 (all x (x != "zero" -> C(x,x))) # label(non_clause).  [assumption].
5 (all x all y (C(x,y) -> C(y,x))) # label(non_clause).  [assumption].
6 (all x all y all z (x = meet(x,y) & C(z,x) -> C(z,y))) # label(non_clause).  [assumption].
7 (all x x = oc(oc(x))) # label(non_clause).  [assumption].
8 (all x "one" = join(x,oc(x))) # label(non_clause).  [assumption].
9 (all x all y meet(x,y) = oc(join(oc(y),oc(x)))) # label(non_clause).  [assumption].
10 (all x join("zero",x) = x) # label(non_clause).  [assumption].
11 (all x join("one",x) = "one") # label(non_clause).  [assumption].
12 (all x x = meet(x,x)) # label(non_clause).  [assumption].
13 (all x x = join(x,x)) # label(non_clause).  [assumption].
14 (all x all y meet(x,y) = meet(y,x)) # label(non_clause).  [assumption].
15 (all x all y join(x,y) = join(y,x)) # label(non_clause).  [assumption].
16 (all x all y all z meet(x,meet(y,z)) = meet(z,meet(x,y))) # label(non_clause).  [assumption].
17 (all x all y all z join(x,join(y,z)) = join(z,join(x,y))) # label(non_clause).  [assumption].
18 (all x all y meet(x,join(x,y)) = x) # label(non_clause).  [assumption].
19 (all x all y join(x,meet(x,y)) = x) # label(non_clause).  [assumption].
20 (all x all y all z (meet(join(x,y),z) != "zero" <-> meet(z,x) != "zero" | meet(z,y) != "zero")) # label(non_clause) # label(goal).  [goal].

============================== end of process non-clausal formulas ===

============================== PROCESS INITIAL CLAUSES ===============

============================== PREDICATE ELIMINATION =================

No predicates eliminated.

============================== end predicate elimination =============

Term ordering decisions:
Predicate symbol precedence:  predicate_order([ =, C ]).
Function symbol precedence:  function_order([ "zero", "one", c1, c2, c3, meet, join, pc, oc ]).
After inverse_order: Function symbol precedence:  function_order([ "zero", "one", c1, c2, c3, join, oc, meet, pc ]).
Unfolding symbols: meet/2.

Auto_inference settings:
  % set(paramodulation).  % (positive equality literals)
  % set(binary_resolution).  % (non-Horn)
  % set(neg_ur_resolution).  % (non-Horn, less than 100 clauses)

Auto_process settings:
  % set(factor).  % (non-Horn)
  % set(unit_deletion).  % (non-Horn)

% Operation join is commutative; C redundancy checks enabled.
% back CAC tautology: 40 oc(join(oc(x),oc(y))) = oc(join(oc(y),oc(x))).  [copy(39),rewrite([33(1),33(5)])].

============================== end of process initial clauses ========

============================== CLAUSES FOR SEARCH ====================

============================== end of clauses for search =============

============================== SEARCH ================================

% Starting search at 0.01 seconds.

% Operation join is associative-commutative; CAC redundancy checks enabled.
% back CAC tautology: 45 join(x,join(y,z)) = join(z,join(x,y)).  [copy(44),flip(a)].
% back CAC tautology: 88 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),oc(u))) = oc(join(oc(join(oc(z),join(oc(x),oc(y)))),oc(u))).  [back_rewrite(73),rewrite([78(6),78(15)])].
% back CAC tautology: 87 oc(join(oc(x),oc(join(oc(y),join(oc(z),oc(u)))))) = oc(join(oc(x),oc(join(oc(u),join(oc(y),oc(z)))))).  [back_rewrite(74),rewrite([78(7),78(16)])].
% back CAC tautology: 86 oc(join(oc(x),join(oc(y),oc(z)))) = oc(join(oc(z),join(oc(y),oc(x)))).  [back_rewrite(77),rewrite([78(6),78(12)])].
% back CAC tautology: 85 oc(join(oc(x),join(oc(join(oc(y),join(oc(z),oc(u)))),oc(w)))) = oc(join(oc(w),join(oc(x),oc(join(oc(u),join(oc(y),oc(z))))))).  [para(43(a,1),43(a,2,1,2)),rewrite([78(7),78(11),78(20),78(22)])].
% back CAC tautology: 84 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),join(oc(u),oc(w)))) = oc(join(oc(w),join(oc(join(oc(z),join(oc(x),oc(y)))),oc(u)))).  [para(43(a,1),43(a,2,1,1,2)),rewrite([78(6),78(11),78(18),78(22)])].
% back CAC tautology: 83 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),join(oc(u),oc(w)))) = oc(join(oc(u),join(oc(w),oc(join(oc(y),join(oc(z),oc(x))))))).  [para(43(a,1),43(a,2,1,1,1)),rewrite([78(9),78(11),78(17),78(22)]),flip(a)].
% back CAC tautology: 82 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),join(oc(u),oc(w)))) = oc(join(oc(u),join(oc(w),oc(join(oc(z),join(oc(x),oc(y))))))).  [para(43(a,1),43(a,1,1,2)),rewrite([78(9),78(11),78(17),78(22)]),flip(a)].
% back CAC tautology: 81 oc(join(oc(x),join(oc(join(oc(y),join(oc(z),oc(u)))),oc(w)))) = oc(join(oc(w),join(oc(x),oc(join(oc(z),join(oc(u),oc(y))))))).  [para(43(a,1),43(a,1,1,1,2)),rewrite([78(7),78(11),78(20),78(22)])].
% back CAC tautology: 80 oc(join(oc(join(oc(x),join(oc(y),oc(z)))),join(oc(u),oc(w)))) = oc(join(oc(w),join(oc(join(oc(y),join(oc(z),oc(x)))),oc(u)))).  [para(43(a,1),43(a,1,1,1,1)),rewrite([78(6),78(11),78(18),78(22)])].
% back CAC tautology: 79 oc(join(oc(x),join(oc(y),oc(z)))) = oc(join(oc(z),join(oc(x),oc(y)))).  [para(41(a,1),43(a,2,1)),rewrite([78(6)]),flip(a)].

Low Water (keep): wt=40.000, iters=6672

Low Water (keep): wt=34.000, iters=6709

Low Water (keep): wt=31.000, iters=6733

Low Water (keep): wt=30.000, iters=6696

Low Water (keep): wt=28.000, iters=6699

Low Water (keep): wt=26.000, iters=6681

Low Water (keep): wt=25.000, iters=6685

Low Water (keep): wt=24.000, iters=6739

Low Water (keep): wt=23.000, iters=6717

Low Water (keep): wt=22.000, iters=6790

Low Water (keep): wt=21.000, iters=6668

Low Water (keep): wt=20.000, iters=6678

Low Water (keep): wt=19.000, iters=6671

Low Water (keep): wt=18.000, iters=6694

Low Water (keep): wt=17.000, iters=6671

Low Water (keep): wt=16.000, iters=6680

Low Water (displace): id=8377, wt=74.000

Low Water (displace): id=8379, wt=65.000

Low Water (displace): id=8372, wt=58.000

Low Water (displace): id=10517, wt=56.000

Low Water (displace): id=7605, wt=54.000

Low Water (displace): id=11483, wt=53.000

Low Water (displace): id=10396, wt=49.000

Low Water (displace): id=8242, wt=48.000

Low Water (displace): id=11465, wt=47.000

Low Water (displace): id=8369, wt=46.000

Low Water (displace): id=11486, wt=45.000

Low Water (displace): id=11485, wt=44.000

Low Water (displace): id=8326, wt=43.000

Low Water (displace): id=8348, wt=42.000

Low Water (displace): id=11034, wt=41.000

Low Water (displace): id=11970, wt=40.000

Low Water (displace): id=12962, wt=39.000

Low Water (displace): id=12974, wt=38.000

Low Water (displace): id=23527, wt=15.000

Low Water (displace): id=23608, wt=13.000

Low Water (displace): id=28280, wt=11.000

Low Water (keep): wt=15.000, iters=6668

============================== PROOF =================================

% Proof 1 at 227.89 (+ 6.44) seconds.
% Length of proof is 95.
% Level of proof is 18.
% Maximum clause weight is 26.000.
% Given clauses 5929.

1 (all x all y meet(x,pc(meet(x,y))) = meet(x,pc(y))) # label(non_clause).  [assumption].
7 (all x x = oc(oc(x))) # label(non_clause).  [assumption].
8 (all x "one" = join(x,oc(x))) # label(non_clause).  [assumption].
9 (all x all y meet(x,y) = oc(join(oc(y),oc(x)))) # label(non_clause).  [assumption].
10 (all x join("zero",x) = x) # label(non_clause).  [assumption].
11 (all x join("one",x) = "one") # label(non_clause).  [assumption].
13 (all x x = join(x,x)) # label(non_clause).  [assumption].
15 (all x all y join(x,y) = join(y,x)) # label(non_clause).  [assumption].
16 (all x all y all z meet(x,meet(y,z)) = meet(z,meet(x,y))) # label(non_clause).  [assumption].
17 (all x all y all z join(x,join(y,z)) = join(z,join(x,y))) # label(non_clause).  [assumption].
18 (all x all y meet(x,join(x,y)) = x) # label(non_clause).  [assumption].
19 (all x all y join(x,meet(x,y)) = x) # label(non_clause).  [assumption].
20 (all x all y all z (meet(join(x,y),z) != "zero" <-> meet(z,x) != "zero" | meet(z,y) != "zero")) # label(non_clause) # label(goal).  [goal].
21 meet(x,pc(meet(x,y))) = meet(x,pc(y)).  [clausify(1)].
22 pc("zero") = "one".  [assumption].
23 pc("one") = "zero".  [assumption].
30 oc(oc(x)) = x.  [clausify(7)].
31 join(x,oc(x)) = "one".  [clausify(8)].
32 oc(join(oc(x),oc(y))) = meet(y,x).  [clausify(9)].
33 meet(x,y) = oc(join(oc(y),oc(x))).  [copy(32),flip(a)].
34 join("zero",x) = x.  [clausify(10)].
35 join("one",x) = "one".  [clausify(11)].
38 join(x,x) = x.  [clausify(13)].
41 join(x,y) = join(y,x).  [clausify(15)].
42 meet(x,meet(y,z)) = meet(y,meet(z,x)).  [clausify(16)].
43 oc(join(join(oc(x),oc(y)),oc(z))) = oc(join(join(oc(z),oc(x)),oc(y))).  [copy(42),rewrite([33(1),33(5),30(5),33(7),33(11),30(11)])].
44 join(x,join(y,z)) = join(y,join(z,x)).  [clausify(17)].
45 join(x,join(y,z)) = join(z,join(x,y)).  [copy(44),flip(a)].
46 meet(x,join(x,y)) = x.  [clausify(18)].
47 oc(join(oc(x),oc(join(x,y)))) = x.  [copy(46),rewrite([33(2),41(4)])].
48 join(x,meet(x,y)) = x.  [clausify(19)].
49 join(x,oc(join(oc(y),oc(x)))) = x.  [copy(48),rewrite([33(1)])].
50 meet(join(c1,c2),c3) != "zero" | meet(c3,c1) != "zero" | meet(c3,c2) != "zero".  [deny(20)].
51 oc(join(oc(c3),oc(join(c1,c2)))) != "zero" | oc(join(oc(c1),oc(c3))) != "zero" | oc(join(oc(c2),oc(c3))) != "zero".  [copy(50),rewrite([33(5),33(13),33(21)])].
52 meet(join(c1,c2),c3) = "zero" | meet(c3,c1) = "zero".  [deny(20)].
53 oc(join(oc(c3),oc(join(c1,c2)))) = "zero" | oc(join(oc(c1),oc(c3))) = "zero".  [copy(52),rewrite([33(5),33(13)])].
54 meet(join(c1,c2),c3) = "zero" | meet(c3,c2) = "zero".  [deny(20)].
55 oc(join(oc(c3),oc(join(c1,c2)))) = "zero" | oc(join(oc(c2),oc(c3))) = "zero".  [copy(54),rewrite([33(5),33(13)])].
57 oc(join(oc(x),oc(pc(oc(join(oc(y),oc(x))))))) = oc(join(oc(pc(y)),oc(x))).  [back_rewrite(21),rewrite([33(1),33(6),41(8),33(11)])].
60 oc("zero") = "one".  [para(34(a,1),31(a,1))].
62 join(x,"one") = "one".  [para(41(a,1),35(a,1))].
68 join(join(join(oc(x),oc(y)),oc(z)),oc(join(join(oc(y),oc(z)),oc(x)))) = "one".  [para(43(a,2),31(a,1,2))].
78 oc(join(join(oc(x),oc(y)),oc(z))) = oc(join(oc(x),join(oc(y),oc(z)))).  [para(41(a,1),43(a,1,1)),flip(a)].
89 join(join(join(oc(x),oc(y)),oc(z)),oc(join(oc(y),join(oc(z),oc(x))))) = "one".  [back_rewrite(68),rewrite([78(11)])].
91 join(x,join(oc(x),y)) = "one".  [para(31(a,1),45(a,1,2)),rewrite([62(2),45(4)]),flip(a)].
94 join(x,join(y,x)) = join(y,x).  [para(38(a,1),45(a,1,2)),flip(a)].
97 join(join(x,y),z) = join(x,join(y,z)).  [para(45(a,2),41(a,1)),flip(a)].
98 join(x,join(y,z)) = join(y,join(x,z)).  [para(41(a,1),45(a,1,2))].
101 join(oc(x),join(oc(y),join(oc(z),oc(join(oc(y),join(oc(z),oc(x))))))) = "one".  [back_rewrite(89),rewrite([97(5),97(12),97(11)])].
102 join(oc(x),oc(join(x,y))) = oc(x).  [para(47(a,1),30(a,1,1)),flip(a)].
105 oc("one") = "zero".  [para(34(a,1),47(a,1,1,2,1)),rewrite([60(2),35(3)])].
111 join(x,oc(join(y,oc(x)))) = x.  [para(30(a,1),49(a,1,2,1,1))].
121 oc(join(oc(x),oc(pc(x)))) = "zero".  [para(23(a,1),57(a,2,1,1,1)),rewrite([105(3),34(4),30(3),60(7),35(8),105(7)])].
122 join(oc(x),oc(pc(oc(join(oc(y),oc(x)))))) = join(oc(pc(y)),oc(x)).  [para(57(a,1),30(a,1,1)),rewrite([30(6)]),flip(a)].
140 join(x,join(y,oc(x))) = "one".  [para(41(a,1),91(a,1,2))].
141 oc(join(oc(c1),oc(c3))) = "zero" | join(oc(c3),join(oc(join(c1,c2)),x)) = "one".  [para(53(a,1),91(a,1,2,1)),rewrite([34(17),97(16)])].
142 oc(join(oc(c2),oc(c3))) = "zero" | join(oc(c3),join(oc(join(c1,c2)),x)) = "one".  [para(55(a,1),91(a,1,2,1)),rewrite([34(17),97(16)])].
144 join(oc(x),join(y,x)) = "one".  [para(30(a,1),140(a,1,2,2))].
154 join(oc(x),join(y,join(z,x))) = "one".  [para(97(a,1),144(a,1,2))].
156 join(x,join(y,join(z,x))) = join(y,join(z,x)).  [para(97(a,1),94(a,1,2)),rewrite([97(5)])].
159 join(oc(x),oc(join(y,x))) = oc(x).  [para(30(a,1),111(a,1,2,1,2))].
160 join(x,oc(join(oc(x),y))) = x.  [para(41(a,1),111(a,1,2,1))].
167 join(oc(x),oc(pc(x))) = "one".  [para(121(a,1),30(a,1,1)),rewrite([60(2)]),flip(a)].
246 join(oc(pc(x)),join(oc(y),oc(x))) = "one".  [para(167(a,1),101(a,1,2,2,2,1,2)),rewrite([41(7),35(7),105(6),41(6),34(6)])].
267 join(oc(x),join(y,oc(join(x,z)))) = join(y,oc(x)).  [para(102(a,1),98(a,1,2)),flip(a)].
326 join(oc(x),join(y,oc(join(z,x)))) = join(y,oc(x)).  [para(159(a,1),98(a,1,2)),flip(a)].
520 join(x,oc(pc(oc(join(oc(y),x))))) = join(oc(pc(y)),x).  [para(30(a,1),122(a,1,1)),rewrite([30(3),30(10)])].
1194 join(oc(pc(x)),join(y,oc(x))) = "one".  [para(30(a,1),246(a,1,2,1))].
1199 join(oc(x),oc(pc(join(x,y)))) = "one".  [para(160(a,1),246(a,1,2)),rewrite([30(2),41(5)])].
1210 join(oc(pc(oc(x))),join(y,x)) = "one".  [para(30(a,1),1194(a,1,2,2))].
1249 join(oc(join(x,y)),oc(pc(join(x,join(y,z))))) = "one".  [para(97(a,1),1199(a,1,2,1,1))].
1285 join(oc(c3),join(oc(join(c1,c2)),x)) = "one" | join(y,join(z,join(oc(c1),oc(c3)))) = "one".  [para(141(a,1),154(a,1,1)),rewrite([34(19)])].
1302 join(oc(c1),oc(c3)) = "one".  [factor(1285,a,b),rewrite([41(12),97(12),267(12),41(7),94(8)])].
1305 oc(join(oc(c3),oc(join(c1,c2)))) != "zero" | oc(join(oc(c2),oc(c3))) != "zero".  [back_rewrite(51),rewrite([1302(15),105(12)]),xx(b)].
1307 join(oc(c1),join(oc(c3),x)) = "one".  [para(1302(a,1),97(a,1,1)),rewrite([35(2)]),flip(a)].
1332 join(oc(c3),join(oc(join(c1,c2)),x)) = "one" | join(y,join(z,join(oc(c2),oc(c3)))) = "one".  [para(142(a,1),154(a,1,1)),rewrite([34(19)])].
1349 join(oc(c2),oc(c3)) = "one".  [factor(1332,a,b),rewrite([41(12),97(12),326(12),41(7),94(8)])].
1351 oc(join(oc(c3),oc(join(c1,c2)))) != "zero".  [back_rewrite(1305),rewrite([1349(15),105(12)]),xx(b)].
1357 join(oc(c2),join(oc(c3),x)) = "one".  [para(1349(a,1),97(a,1,1)),rewrite([35(2)]),flip(a)].
1493 join(oc(c3),join(x,oc(c1))) = "one".  [para(156(a,1),1307(a,1))].
1495 join(oc(c3),join(x,oc(c2))) = "one".  [para(156(a,1),1357(a,1))].
7715 join(oc(pc(pc(oc(x)))),join(y,x)) = join(y,x).  [para(1210(a,1),520(a,1,2,1,1,1)),rewrite([105(3),22(3),105(3),41(3),34(3)]),flip(a)].
7738 join(oc(pc(c3)),join(x,oc(c1))) = join(x,oc(c1)).  [para(1493(a,1),520(a,1,2,1,1,1)),rewrite([105(5),22(5),105(5),41(5),34(5)]),flip(a)].
7739 join(oc(pc(c3)),join(x,oc(c2))) = join(x,oc(c2)).  [para(1495(a,1),520(a,1,2,1,1,1)),rewrite([105(5),22(5),105(5),41(5),34(5)]),flip(a)].
21877 join(x,oc(pc(pc(oc(x))))) = x.  [para(34(a,1),7715(a,1,2)),rewrite([41(5),34(7)])].
22027 join(oc(x),oc(pc(pc(x)))) = oc(x).  [para(30(a,1),21877(a,1,2,1,1,1))].
25505 join(oc(c1),oc(pc(c3))) = oc(c1).  [para(34(a,1),7738(a,1,2)),rewrite([41(6),34(10)])].
25606 join(c1,pc(c3)) = pc(c3).  [para(25505(a,1),111(a,1,2,1)),rewrite([30(5),41(4)])].
25724 join(oc(join(x,c1)),oc(pc(join(x,pc(c3))))) = "one".  [para(25606(a,1),1249(a,1,2,1,1,2))].
28045 join(oc(c2),oc(pc(c3))) = oc(c2).  [para(34(a,1),7739(a,1,2)),rewrite([41(6),34(10)])].
28145 join(c2,pc(c3)) = pc(c3).  [para(28045(a,1),111(a,1,2,1)),rewrite([30(5),41(4)])].
32092 join(oc(join(c1,c2)),oc(pc(pc(c3)))) = "one".  [para(28145(a,1),25724(a,1,2,1,1)),rewrite([41(3)])].
32094 join(oc(join(c1,c2)),join(x,oc(pc(pc(c3))))) = "one".  [para(32092(a,1),98(a,1,2)),rewrite([62(2)]),flip(a)].
33261 join(oc(c3),oc(join(c1,c2))) = "one".  [para(22027(a,1),32094(a,1,2)),rewrite([41(7)])].
33264 $F.  [back_rewrite(1351),rewrite([33261(7),105(2)]),xx(a)].

============================== end of proof ==========================

============================== STATISTICS ============================

Given=5929. Generated=12435154. Kept=33232. proofs=1.
Usable=5871. Sos=19551. Demods=22647. Limbo=3, Disabled=7831. Hints=0.
Kept_by_rule=0, Deleted_by_rule=0.
Forward_subsumed=10723825. Back_subsumed=809.
Sos_limit_deleted=1678096. Sos_displaced=5898. Sos_removed=0.
New_demodulators=28802 (4 lex), Back_demodulated=1086. Back_unit_deleted=2.
Demod_attempts=223045153. Demod_rewrites=42575643.
Res_instance_prunes=0. Para_instance_prunes=0. Basic_paramod_prunes=0.
Nonunit_fsub_feature_tests=7222282. Nonunit_bsub_feature_tests=170703.
Megabytes=50.31.
User_CPU=227.89, System_CPU=6.44, Wall_clock=234.

============================== end of statistics =====================

============================== end of search =========================

THEOREM PROVED

Exiting with 1 proof.

Process 22268 exit (max_proofs) Mon Nov  5 17:41:59 2012
