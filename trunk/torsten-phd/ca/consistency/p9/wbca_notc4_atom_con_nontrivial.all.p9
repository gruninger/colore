%axioms from module ca//consistency/p9/wbca_notc4_atom_con_nontrivial.p9
%----------------------------------

% Automatically generated from CL/KIF
formulas(sos).
% 'ca/theorems/wbca_notC4_Atom_Con_nontrivial'
%imports("ca/wbca").
%imports("ca/C4").
%imports("ca/Atom").
%imports("ca/Conn").
%imports("ca/notTriv").


%axioms from module ca/p9/wbca.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'ca/wbca'
% 'Weak Boolean Contact algebra axioms (as defined in Hahmann and Gruninger, Notre Dame J. Formal Logic 2013)'
%imports("ca/spoca").
%imports("ca/Uni").
 all x ((x = oc(oc(x)))).
(oc("zero") = "one").
(oc("one") = "zero").
 all x (("zero" = meet(x, oc(x)))).
 all x (("one" = join(x, oc(x)))).
 all x ((-((x = "zero")) -> C(x, "one"))).


%axioms from module ca/p9/c4.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'ca/C4'
% 'C4'
 all x all y all z ((C(z, join(x, y)) -> C(z, x) | C(z, y))).


%axioms from module ca/p9/atom.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'ca/Atom'
 exists x (-(x("zero")) &  all y ((y = "zero") | (y = x) | -((meet(x, y) = y)))).


%axioms from module ca/p9/conn.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'ca/Dis'
% 'Dis'
 all x ((-((x = "one")) ->  exists y (-((y = "zero")) & -(C(x, y))))).


%axioms from module ca/p9/nottriv.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'ca/NotTriv'
% 'non-trivial model'
 exists y (-((y = "zero")) & -((y = "one"))).


%axioms from module ca/p9/spoca.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'ca/spoca'
% 'Stonian p-ortocomplemented contact algebra'
%imports("ca/oca").
% 'PC1'
 all x all y ((meet(x, pc(meet(x, y))) = meet(x, pc(y)))).
% 'PC2prime'
(pc("zero") = "one").
% 'PC2primeprime'
(pc("one") = "zero").
% 'S: Stone property'
 all x all y ((pc(pc(join(x, y))) = join(pc(pc(x)), pc(pc(y))))).


%axioms from module ca/p9/uni.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'ca/Uni'
% 'Uni'
 all x all y all z (((meet(x, y) = "zero") & (join(x, y) = "one") & (meet(x, z) = "zero") & (join(x, z) = "one") -> (y = z))).


%axioms from module ca/p9/oca.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'ca/oca'
% 'equational axiomatization of orthocomplemented contact algebra'
%imports("contact/weak_contact").
%imports("lat/ortho_complemented_lattice_meet_join").


%axioms from module contact/p9/weak_contact.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'contact/weak_contact'
% 'Weak Contact Relation (WC)'
% 'C0: Disconnected null region'
 all x (-(C("zero", x))).
% 'C1: Reflexivity'
 all x ((-((x = "zero")) -> C(x, x))).
% 'C2: Symmetry'
 all x all y ((C(x, y) -> C(y, x))).
% 'C3: Closure (using rewriting of lattice operation leq)'
 all x all y all z (((x = meet(x, y)) & C(z, x) -> C(z, y))).


%axioms from module lat/p9/ortho_complemented_lattice_meet_join.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'lat/ortho_complemented_lattice_meet_join'
%imports("lat/bounded_lattice_meet_join").
% 'Orthocomplemented lattice axioms'
% 'O1prime: Orthocomplement is complement'
 all x ((x = oc(oc(x)))).
% 'O2prime: Orthocomplement is involutary'
 all x (("one" = join(x, oc(x)))).
% 'O3prime: Orthocomplement is order-reversing'
 all x all y ((meet(x, y) = oc(join(oc(y), oc(x))))).


%axioms from module lat/p9/bounded_lattice_meet_join.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'lat/bounded_lattice_meet_join'
%imports("lat/lattice_meet_join").
% 'Bounded lattice axioms expressed in terms of meet and join'
% 'L5join: Bottom (zero)'
 all x ((join("zero", x) = x)).
% 'L6join: Top (one)'
 all x ((join("one", x) = "one")).


%axioms from module lat/p9/lattice_meet_join.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'lat/lattice_meet_join'
% 'L1: Idempotency'
 all x ((x = meet(x, x))).
 all x ((x = join(x, x))).
% 'L2: Commutativity'
 all x all y ((meet(x, y) = meet(y, x))).
 all x all y ((join(x, y) = join(y, x))).
% 'L3: Associativity'
 all x all y all z ((meet(x, meet(y, z)) = meet(z, meet(x, y)))).
 all x all y all z ((join(x, join(y, z)) = join(z, join(x, y)))).
% 'L4: Absorption Laws'
 all x all y ((meet(x, join(x, y)) = x)).
 all x all y ((join(x, meet(x, y)) = x)).

end_of_list.

