%axioms from module codib//consistency/p9/codi_bcont_nontrivial.p9
%----------------------------------

% Automatically generated from CL/KIF
formulas(sos).
% Module codib/consistency/codi_bcont_nontrivial
%imports("codib/codi_bcont").
%imports("codi/defs/epp").
 exists x exists y exists v exists z (P(x, v) & P(y, v) & Cont(z, x) & Cont(z, y) & SC(x, y) & Covers(v, z) & Min(x) & Min(y)).


%axioms from module codib/p9/codi_bcont.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codib/codi_bcont
%imports("codi/codi").
%imports("codi/defs/min_max_in_dim").
%imports("codi/defs/po").
%imports("codi/defs/inc").
%imports("codi/defs/sc").
%imports("codi/theorems/po_theorems").
%imports("codi/theorems/inc_theorems").
%imports("codi/theorems/sc_theorems").
% 'BC-A1: entities in the boundary are at least of a dimension lower than the bounded entity'
 all x all y ((BCont(x, y) -> Cont(x, y) & Inc(x, y))).
% 'BC-A2: if z is contained in two superficially connected entities x and y embedded in an entity v of the dimension of x, that is x has locally a codimension of zero, then z is contained in the boundary of x'
 all x all y all v all z ((SC(x, y) & Min(x) & P(x, v) & Cont(y, v) & Cont(z, x) & Cont(z, y) -> BCont(z, x))).
% 'BC-A3: any z contained in two superficially connected parts x and y of v that is exactly of one dimension lower than v is not in the boundary of v'
 all x all y all z all v ((SC(x, y) & P(x, v) & P(y, v) & Cont(z, x) & Cont(z, y) & Covers(v, z) -> -(BCont(z, v)))).
% 'BC-A4'
 all x all y all z ((BCont(x, y) & P(y, z) &  all v all w ((P(v, z) & -(PO(v, y)) & P(w, x) -> -(Cont(w, v)))) -> BCont(x, z))).
% 'BC-A5: transitivity with respect to Cont'
 all x all y all z ((BCont(x, y) & Cont(z, x) -> BCont(z, y))).


%axioms from module codi//defs/p9/epp.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/epp
%imports("codi/defs/ep").
% 'EPP-D: definition of proper parthood'
 all x all y ((PP(x, y) <-> P(x, y) & -((x = y)))).


%axioms from module codi/p9/codi.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/codi
%imports("codi/codi_linear").
%imports("cont/cont_c").
%imports("codi/defs/ep").
%imports("codi/defs/epp").
%imports("codi/defs/po").
%imports("codi/defs/inc").
%imports("codi/defs/sc").
%imports("codi/defs/min_max_in_dim").


%axioms from module codi//defs/p9/min_max_in_dim.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/min_max_in_dim
%imports("codi/defs/epp").
% 'definitional extension'
% 'ME-D1: defining maximal entities of a dimension'
 all x ((Max(x) <-> -(ZEX(x)) &  all y (-(PP(x, y))))).
% 'ME-D2: defining minimal entities of a dimension'
 all x ((Min(x) <-> -(ZEX(x)) &  all y (-(PP(y, x))))).


%axioms from module codi//defs/p9/po.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/po
%imports("codi/defs/ep").
% 'PO-D: partial overlap (strong contact)'
 all x all y ((PO(x, y) <->  exists z (P(z, x) & P(z, y)))).


%axioms from module codi//defs/p9/inc.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/inc
% 'basic axioms of incidence (two entities occupy some same space. It is reserved for entities of differing dimensions. It is a variant of contact.'
%imports("codi/defs/ep").
% 'Inc-D: incidence holds if and only if some entity of the dimension as the lower of the two incident entities is shared'
 all x all y ((Inc(x, y) <->  exists z (LESS(z, x) & Cont(z, x) & P(z, y)) |  exists z (LESS(z, y) & Cont(z, y) & P(z, x)))).


%axioms from module codi//defs/p9/sc.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/sc
% 'SC-D: superficial (weak) contact (contact is of a lesser dimension than either involved entity) - prover9 file needs extra parentheses'
 all x all y ((SC(x, y) <->  exists z (Cont(z, x) & Cont(z, y)) &  all z ((Cont(z, x) & Cont(z, y) -> LESS(z, x) & LESS(z, y))))).


%axioms from module codi//theorems/p9/po_theorems.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/po_theorems
%imports("codi/codi_basic").
%imports("codi/defs/ep").
%imports("codi/defs/po").
% 'PO-T1: partial overlap reflexive'
 all x ((-(ZEX(x)) -> PO(x, x))).
% 'PO-T2: partial overlap symmetric'
 all x all y ((PO(x, y) -> PO(y, x))).
% 'PO-T3: partial overlap requires equi-dimensionality'
 all x all y ((PO(x, y) -> EqDim(x, y))).


%axioms from module codi//theorems/p9/inc_theorems.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/inc_theorems
%imports("codi/codi_basic").
%imports("codi/defs/ep").
%imports("codi/defs/inc").
% 'Inc-T1: incidence irreflexive'
 all x (-(Inc(x, x))).
% 'Inc-T2: incidence symmetric'
 all x all y ((Inc(x, y) -> Inc(y, x))).
% 'Inc-T3: equi-dimensionality prevents incidence'
 all x all y ((EqDim(x, y) -> -(Inc(x, y)))).
% 'Inc-T4: incidence requires comparability'
 all x all y ((Inc(x, y) -> LESS(x, y) | LESS(y, x))).
% 'Inc-T5: containment of a lower-dimensional entity requires incidence'
 all x all y ((Cont(x, y) & LESS(x, y) -> Inc(x, y))).
% 'Inc-T6: incidence transitive with respect to parthood'
 all x all y all z ((Inc(x, y) & P(y, z) -> Inc(x, z))).


%axioms from module codi//theorems/p9/sc_theorems.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/sc_theorems
%imports("codi/codi_basic").
%imports("codi/defs/ep").
%imports("codi/defs/sc").
% 'SC-T1a: alternative definition of superficial contact'
 all x all y ((SC(x, y) -> C(x, y))).
% 'SC-T1b: alternative definition of superficial contact'
 all x all y ((SC(x, y) -> -( exists z (Cont(z, x) & P(z, y))))).
% 'SC-T1c: alternative definition of superficial contact'
 all x all y ((SC(x, y) -> -( exists z (P(z, x) & Cont(z, y))))).
% 'SC-T1d: alternative definition of superficial contact'
 all x all y ((C(x, y) &  all z (-(Cont(z, x)) | -(Cont(z, y)) | -(P(z, x)) & -(P(z, y))) -> SC(x, y))).
% 'SC-T2: superficial contact irreflexive'
 all x (-(SC(x, x))).
% 'SC-T3: superficial contact symmetric'
 all x all y ((SC(x, y) -> SC(y, x))).
% 'SC-T4: superficial contact requires a shared entity of a lower dimension'
 all x all y ((SC(x, y) ->  exists z (LESS(z, x) & LESS(z, y) & Cont(z, x) & Cont(z, y)))).


%axioms from module codi//defs/p9/ep.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/ep
% 'basic axioms of traditional parthood (parthood of equidimensional entities) which is a non-strict partial order'
% 'parthood holds between two entities of the same spatial dimension'
% 'EP-D: definition of parthood'
 all x all y ((P(x, y) <-> Cont(x, y) & EqDim(x, y))).


%axioms from module codi/p9/codi_linear.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/codi_linear
%imports("dim/dim_prime_linear").
%imports("cont/cont_c").
% 'relationship between dimension and containment'
% 'CD-A1: containment requires that the contained entity has a dimension that is lower or equal to the entity containing it'
 all x all y ((Cont(x, y) -> LESS(x, y) | EqDim(x, y))).


%axioms from module cont/p9/cont_c.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module cont/cont_c
%imports("cont/cont_basic").
% 'C-D: definition of contact in terms of containment'
 all x all y ((C(x, y) <->  exists z (Cont(z, x) & Cont(z, y)))).


%axioms from module codi/p9/codi_basic.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/codi_basic
%imports("dim/dim_basic").
%imports("cont/cont_ext").
% 'relationship between dimension and containment'
% 'CD-A1: containment requires that the contained entity has a dimension that is lower or equal to the entity containing it'
 all x all y ((Cont(x, y) -> LESS(x, y) | EqDim(x, y))).


%axioms from module dim/p9/dim_prime_linear.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module dim/dim_prime_linear
% 'compact axioms for linear relative dimension with a lowest non-zero dimension'
%imports("dim/dim_prime_linear_unbounded").
% 'D-A6: a lowest dimension must exist'
 exists x (MinDim(x)).


%axioms from module cont/p9/cont_basic.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module cont/cont_basic
% 'basic axioms of containment (parthood irrespective of dimension) which is a non-strict partial order'
% 'a possibly existing zero extent ZEX is included'
% 'C-A1: reflexive (the direction <- is provable from C-A4'
 all x ((-(ZEX(x)) <-> Cont(x, x))).
% 'C-A2: antisymmetric'
 all x all y ((Cont(x, y) & Cont(y, x) -> (x = y))).
% 'C-A3: transitive'
 all x all y all z ((Cont(x, y) & Cont(y, z) -> Cont(x, z))).
% 'C-A4: ZEXs are not contained in anything and contain nothing'
 all x all y ((ZEX(x) -> -(Cont(y, x)) & -(Cont(x, y)))).
% 'The following hold no matter whether a ZEX exists or not (already included in the basic axiomatization of dimension)'
% 'D-A4: unique ZEX (previously Z-A2)'
 all x all y ((ZEX(x) & ZEX(y) -> (x = y))).


%axioms from module dim/p9/dim_basic.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module dim/dim_basic
% 'basic axioms of dimensionality'
% 'This set of axioms is rewritten from the original definition to reflect the fact that any spatial entity might have more than a unique dimension.'
% 'We further try to:'
% '(a) not have dimensions as domain objects by simply compare spatial entities by their dimension.'
% '(B) avoid introducing explicit dimension'
% 'Dimension is a strict partial order'
% 'D-A1: irreflexive'
 all x (-(LESS(x, x))).
% 'D-A2: asymmetric (antisymmetric & irreflexive)'
 all x all y ((LESS(x, y) -> -(LESS(y, x)))).
% 'D-A3: transitive'
 all x all y all z ((LESS(x, y) & LESS(y, z) -> LESS(x, z))).
% 'We further need a relation EqDim defined as following:'
% 'D-A4: reflexive'
 all x (EqDim(x, x)).
% 'D-A5: symmetric'
 all x all y ((EqDim(x, y) -> EqDim(y, x))).
% 'D-A6: transitive'
 all x all y all z ((EqDim(x, y) & EqDim(y, z) -> EqDim(x, z))).
% 'D-A7: Relationship between < and EqDim'
 all x all y ((LESS(x, y) -> -(EqDim(x, y)))).
% 'D-A8: EqDim makes < transitive'
 all x all y all z ((EqDim(x, y) -> (LESS(z, x) -> LESS(z, y)))).
% 'D-A9: EqDim makes < transitive'
 all x all y all z ((EqDim(x, y) -> (LESS(x, z) -> LESS(y, z)))).
% 'D-A10: a lowest dimension must exist'
 exists x (-(ZEX(x)) &  all y ((LESS(y, x) -> ZEX(y)))).
% 'The following hold no matter whether a ZEX exists or not'
% 'D-A11: unique ZEX (previously Z-A2)'
 all x all y ((ZEX(x) & ZEX(y) -> (x = y))).
% 'D-A12: ZEX has dimension lower than anything else (previously Z-A3)'
 all x all y ((ZEX(x) & -(ZEX(y)) -> LESS(x, y))).


%axioms from module cont/p9/cont_ext.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module cont/cont_ext
%imports("cont/cont_basic").
% 'C-T1: Cont is extensional'
 all x all y (( all z ((Cont(z, x) <-> Cont(z, y))) -> (x = y))).


%axioms from module dim/p9/dim_prime_linear_unbounded.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module dim/dim_prime_linear_unbounded
% 'compact axioms for linear relative dimension'
% 'D-A1: irreflexive'
 all x (-(LESS(x, x))).
% 'D-A2: asymmetric (antisymmetric & irreflexive)'
 all x all y ((LESS(x, y) -> -(LESS(y, x)))).
% 'D-A3: transitive (corrected from IJCAI version: need <= in the second condition to ensure that EqDim is transitive)'
 all x all y all z ((LESS(x, y) & LEQ(y, z) -> LESS(x, z))).
% 'D-A4: unique ZEX'
 all x all y ((ZEX(x) & ZEX(y) -> (x = y))).
% 'D-A5: ZEX has dimension lower than anything else'
 all x all y ((ZEX(x) & -(ZEX(y)) -> LESS(x, y))).
% 'D-D2: define EqDim in terms of <'
 all x all y ((EqDim(x, y) <-> -(LESS(x, y)) & -(LESS(y, x)))).
% 'D-D3: <='
 all x all y ((LEQ(x, y) <-> LESS(x, y) | EqDim(x, y))).
% 'D-D4: Maximal dimension (Codim=0)'
 all x ((MaxDim(x) <->  all y (LEQ(y, x)))).
% 'D-D5: Minimal dimension (Dim=0)'
 all x ((MinDim(x) <-> -(ZEX(x)) &  all y ((LESS(y, x) -> ZEX(y))))).
% 'D-D6: next highest dimension (covers), x covers y if x>y and no z s.t. x>z>y'
 all x all y ((Covers(x, y) <-> LESS(y, x) &  all z (-(LESS(y, z) & LESS(z, x))))).

end_of_list.

