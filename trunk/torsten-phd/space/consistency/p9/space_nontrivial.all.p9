%axioms from module space//consistency/p9/space_nontrivial.p9
%----------------------------------

% Automatically generated from CL/KIF
formulas(sos).
% 'space/consistency/space_nontrivial'
%imports("space/space").
 exists x exists y exists z exists t exists u exists v exists w (POD(x) & M(y) & DPF(z) & RPF(t) & S(u) & S(v) & S(w) & BCont(v, w) & ZEX(u)).


%axioms from module space/p9/space.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'space/space'
%imports("space/ped").
%imports("zex/zex").
%imports("space/dim_prime_linear").
%imports("space/cont_c").
%imports("space/codi_down").
%imports("space/codib_down").
%imports("space/codib_updown").
%imports("space/defs/icon").
% 'S-A1: '
 all x (-(PED(x)) | -(S(x))).
% 'S-A2: '
 all x (S(r(x))).
% 'S-A3: '
 all x ((S(x) <-> (x = r(x)))).
% 'S-A4: '
 all x all y ((Cont(x, y) -> S(x) & S(y))).
% 'S-A5: '
 all x all y ((LESS(x, y) -> S(x) & S(y))).
% 'S-A6: '
 all x ((ZEX(x) -> S(x))).
% 'S-A7: '
 all x all y ((BCont(x, y) -> S(x) & S(y))).
% 'S-A8: '
 all x ((PED(x) -> MaxDim(r(x)))).
% 'S-A9: '
 all x all y ((DK1(x, y) -> P(r(x), r(y)))).
% 'S-A10: '
 all x all y ((hosts(x, y) -> (RPF(y) <-> P(r(x), r(y))))).
% 'S-A11: '
 all x all y all m all n ((hosts(x, y) & RPF(y) & DK1(m, x) & DK1(n, y) -> P(r(n), r(m)))).
% 'S-A12: '
 all x all y ((hosts(x, y) -> (DPF(y) <-> -(PO(r(x), r(y)))))).


%axioms from module space/p9/ped.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'space/ped'
% 'PED-A1: '
 all x ((PED(x) -> POD(x) | M(x) | F(x))).
 all x ((POD(x) -> PED(x))).
 all x ((M(x) -> PED(x))).
 all x ((F(x) -> PED(x))).
% 'PED-A2: '
 all x ((POD(x) -> -(M(x)))).
 all x ((POD(x) -> -(F(x)))).
 all x ((M(x) -> -(F(x)))).
% 'PED-A3: '
 all x ((NAPO(x) -> POD(x))).
% 'PED-A4: '
 all x all y ((hosts(x, y) -> PED(x) & F(y))).
% 'PED-A5: '
 all x ((F(x) <->  exists y (hosts(y, x)))).
% 'PED-A6: '
 all x all y ((hosts(x, y) -> -(hosts(y, x)))).
% 'PED-A7: '
 all x ((F(x) <-> RPF(x) | DPF(x))).
% 'PED-A8: '
 all x (-(RPF(x)) | -(DPF(x))).
% 'PED-A9:'
 all x all y ((DK1(x, y) -> M(x))).
% 'PED-A9:'
 all x all y ((DK1(x, y) -> POD(y) | F(y))).
% 'PED-A10:'
 all x all y all z ((DK1(x, y) & DK1(z, y) -> (x = z))).
% 'PED-A11:'
 all y ((POD(y) | RPF(y) ->  exists x (DK1(x, y)))).


%axioms from module zex/p9/zex.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module dim/zex
% 'forces a special null region (zex)'
% 'Z-A1: there exists a zex'
 exists x (ZEX(x)).


%axioms from module space/p9/dim_prime_linear.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'space/dim_prime_linear'
% 'compact axioms for linear relative dimension'
% 'D-A1: irreflexive'
 all x (-(LESS(x, x))).
% 'D-A2: asymmetric (antisymmetric & irreflexive)'
 all x all y ((LESS(x, y) -> -(LESS(y, x)))).
% 'D-A3: transitive (corrected from IJCAI version: need <= in the second condition to ensure that EqDim is transitive)'
 all x all y all z ((LESS(x, y) & LEQ(y, z) -> LESS(x, z))).
% 'D-A4: unique ZEX'
 all x all y ((ZEX(x) & ZEX(y) -> (x = y))).
% 'D-A5: ZEX has dimension lower than anything else'
 all x all y ((ZEX(x) & S(y) & -(ZEX(y)) -> LESS(x, y))).
% 'D-D2: define EqDim in terms of <'
 all x all y ((EqDim(x, y) <-> S(x) & S(y) & -(LESS(x, y)) & -(LESS(y, x)))).
% 'D-D3: <='
 all x all y ((LEQ(x, y) <-> LESS(x, y) | EqDim(x, y))).
% 'D-D4: Maximal dimension (Codim=0)'
 all x ((MaxDim(x) <-> S(x) &  all y ((S(y) -> LEQ(y, x))))).
% 'D-D5: Minimal dimension (Dim=0)'
 all x ((MinDim(x) <-> S(x) & -(ZEX(x)) &  all y ((S(y) & LESS(y, x) -> ZEX(y))))).
% 'D-D6: next highest dimension (covers), x covers y if x>y and no z s.t. x>z>y'
 all x all y ((Covers(x, y) <-> LESS(y, x) &  all z ((S(z) -> -(LESS(y, z) & LESS(z, x)))))).
% 'D-A6: a lowest dimension must exist'
 exists x (MinDim(x)).


%axioms from module space/p9/cont_c.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'space/cont_c'
% 'C-A1: reflexive'
 all x ((S(x) & -(ZEX(x)) <-> Cont(x, x))).
% 'C-A2: antisymmetric'
 all x all y ((Cont(x, y) & Cont(y, x) -> (x = y))).
% 'C-A3: transitive'
 all x all y all z ((Cont(x, y) & Cont(y, z) -> Cont(x, z))).
% 'C-A4: ZEXs are not contained in anything and contain nothing'
 all x all y ((ZEX(x) -> S(x) & -(Cont(y, x)) & -(Cont(x, y)))).
% 'The following hold no matter whether a ZEX exists or not (already included in the basic axiomatization of dimension)'
% 'D-A4: unique ZEX (previously Z-A2)'
 all x all y ((ZEX(x) & ZEX(y) -> (x = y))).
% 'C-D: definition of contact in terms of containment'
 all x all y ((C(x, y) <->  exists z (Cont(z, x) & Cont(z, y)))).


%axioms from module space/p9/codi_down.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'space/codi_down'
%imports("codi/defs/min_max_in_dim").
%imports("codi/defs/po").
%imports("codi/defs/inc").
%imports("codi/defs/sc").
% 'CD-A1: containment requires that the contained entity has a dimension that is lower or equal to the entity containing it'
 all x all y ((Cont(x, y) -> LESS(x, y) | EqDim(x, y))).
% 'Int-A1: disconnected entities have empty intersection'
 all x all y ((S(x) & S(y) & -(C(x, y)) <-> ZEX(intersection(x, y)))).
% 'Int-A2: the intersection is contained in the intersecting entities (also ensures the intersection is of no greater dimension than necessary)'
 all x all y ((S(x) & S(y) & -(ZEX(intersection(x, y))) -> Cont(intersection(x, y), x))).
% 'Int-A3: the intersection is of greatest possible dimension (determines the dimension of the intersection)'
 all x all y all z ((Cont(z, x) & Cont(z, y) -> LEQ(z, intersection(x, y)))).
% 'Int-A4: the intersection contains everything of the greatest possible dimension (and whatever those things contain)'
 all x all y all z ((Cont(z, x) & Cont(z, y) & EqDim(z, intersection(x, y)) <-> P(z, intersection(x, y)))).
% 'Closure under differences'
% 'Dif-A1: difference is of same dimension'
 all x all y ((S(x) & S(y) & -(ZEX(difference(x, y))) -> EqDim(x, difference(x, y)))).
% 'Dif-A2: difference with a entity of lower dimension'
 all x all y ((LESS(y, x) -> (x = difference(x, y)))).
% 'Dif-A3a: constitution of the difference with an entity of greater or equal dimension'
 all x all y all z ((LEQ(x, y) & Cont(z, x) & LESS(intersection(z, y), z) -> Cont(z, difference(x, y)))).
% 'Dif-A3b: constitution of the difference with an entity of greater or equal dimension'
 all x all y all z ((LEQ(x, y) & Cont(z, difference(x, y)) -> Cont(z, x))).
% 'Dif-A3c: constitution of the difference with an entity of greater or equal dimension'
 all x all y all z ((LEQ(x, y) & P(z, difference(x, y)) -> LESS(intersection(z, y), z))).
% 'Dif-A4: zero difference only for contained entities or for zero entity'
 all x all y ((ZEX(difference(x, y)) <-> ZEX(x) | Cont(x, y))).


%axioms from module space/p9/codib_down.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'space/codib_down'
%imports("codi/defs/min_max_in_dim").
%imports("codi/defs/po").
%imports("codi/defs/inc").
%imports("codi/defs/sc").
%imports("codib/defs/closed").
%imports("codib/defs/icont").
%imports("codib/defs/tcont").
% 'ME-E1: atomic'
 all x ((S(x) & -(ZEX(x)) ->  exists y (P(y, x) & Min(y)))).
% 'BC-A1: entities in the boundary are at least of a dimension lower than the bounded entity'
 all x all y ((S(x) & S(y) & BCont(x, y) -> Cont(x, y) & Inc(x, y))).
% 'BC-A2: if z is contained in two superficially connected entities x and y embedded in an entity v of the dimension of x, that is x has locally a codimension of zero, then z is contained in the boundary of x'
 all x all y all v all z ((S(x) & S(y) & S(v) & S(z) & SC(x, y) & Min(x) & P(x, v) & Cont(y, v) & Cont(z, x) & Cont(z, y) -> BCont(z, x))).
% 'BC-A3: any z contained in two superficially connected parts x and y of v that is exactly of one dimension lower than v is not in the boundary of v'
 all x all y all z all v ((S(x) & S(y) & S(v) & S(z) & SC(x, y) & P(x, v) & P(y, v) & Cont(z, x) & Cont(z, y) & Covers(v, z) -> -(BCont(z, v)))).
% 'BC-A4'
 all x all y all z ((S(x) & S(y) & S(z) & BCont(x, y) & P(y, z) &  all v all w ((S(v) & S(w) & P(v, z) & -(PO(v, y)) & P(w, x) -> -(Cont(w, v)))) -> BCont(x, z))).
% 'BC-A5: transitivity with respect to Cont'
 all x all y all z ((S(x) & S(y) & S(z) & BCont(x, y) & Cont(z, x) -> BCont(z, y))).
% 'BC-A6'
 all x all y ((S(x) & S(y) & BCont(x, y) <-> S(x) & S(y) & -(ZEX(x)) &  all z ((P(z, x) & Min(z) -> BCont(z, y))))).


%axioms from module space/p9/codib_updown.p9
%----------------------------------

% Automatically generated from CL/KIF
% 'space/codib_updown'
% 'CODI with downwards closure and a ternary sum relation (not forcing the existence of sums)'
% 'Sum-A0prime'
 all x all y all z all v ((TSum(x, y, z) & TSum(x, y, v) -> S(x) & S(y) & S(z) & (v = z))).
% 'Sum-A1prime: sum is commutative'
 all x all y all z ((TSum(x, y, z) -> TSum(y, x, z))).
% 'Sum-A2prime: sum of entities of different dimensions'
 all x all y ((LESS(x, y) -> TSum(x, y, y))).
% 'Sum-A3prime: every part of y is a part of z=x+y if x<=y'
 all x all y all z all v ((TSum(x, y, z) & LEQ(x, y) & Cont(v, y) -> Cont(v, z))).
% 'Sum-A4prime: everything contained in the sum has a part contained in x or contained in y'
 all x all y all z all v ((TSum(x, y, z) & Cont(v, z) & -(Cont(v, x)) -> Cont(difference(v, x), y))).
% 'Sum-A5prime'
 all x all y all z ((S(z) & EqDim(x, y) &  all v ((PO(v, z) <-> PO(v, x) | PO(v, y))) -> TSum(x, y, z))).
% 'Sum-A6prime: forcing the existence of sums of equidimensional entities that only meet in boundary of minimal parts'
 all x all y ((EqDim(x, y) &  all z ((Cont(z, x) & Cont(z, y) & Min(z) ->  exists u exists v (P(u, x) & P(v, y) & BCont(z, u) & BCont(z, v)))) ->  exists z (TSum(x, y, z)))).
% 'U-A1: everything is contained in a universal entity'
 all x ((S(x) & -(ZEX(x)) -> Cont(x, Uni))).


%axioms from module space//defs/p9/icon.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module space/defs/icon
% 'Defining when an entity is self-connected'
% 'Con-D: definition of connectedness'
 all x ((Con(x) <-> S(x) &  all y ((PP(y, x) -> SC(y, difference(x, y)))))).
% 'ICon-D: interior connectedness'
 all x ((ICon(x) <-> Con(x) &  all y ((PP(y, x) -> Covers(x, intersection(y, difference(x, y))))))).
% 'UCon-D: uniform connectedness (everything in both x and y is in the intersection)'
 all x ((UCon(x) <-> S(x) & Con(x) &  all y all z ((PP(y, x) & Cont(z, y) & Cont(z, difference(x, y)) -> Cont(z, intersection(y, difference(x, y))))))).
% 'C-S-D: s-connectedness'
 all x all y ((StrongC(x, y) <-> SC(x, y) & EqDim(x, y) & Covers(x, intersection(x, y)))).


%axioms from module codi//defs/p9/min_max_in_dim.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/min_max_in_dim
%imports("codi/defs/epp").
% 'definitional extension'
% 'ME-D1: defining maximal entities of a dimension'
 all x ((Max(x) <-> -(ZEX(x)) &  all y (-(PP(x, y))))).
% 'ME-D2: defining minimal entities of a dimension'
 all x ((Min(x) <-> -(ZEX(x)) &  all y (-(PP(y, x))))).


%axioms from module codi//defs/p9/po.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/po
%imports("codi/defs/ep").
% 'PO-D: partial overlap (strong contact)'
 all x all y ((PO(x, y) <->  exists z (P(z, x) & P(z, y)))).


%axioms from module codi//defs/p9/inc.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/inc
% 'basic axioms of incidence (two entities occupy some same space. It is reserved for entities of differing dimensions. It is a variant of contact.'
%imports("codi/defs/ep").
% 'Inc-D: incidence holds if and only if some entity of the dimension as the lower of the two incident entities is shared'
 all x all y ((Inc(x, y) <->  exists z (LESS(z, x) & Cont(z, x) & P(z, y)) |  exists z (LESS(z, y) & Cont(z, y) & P(z, x)))).


%axioms from module codi//defs/p9/sc.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/sc
% 'SC-D: superficial (weak) contact (contact is of a lesser dimension than either involved entity) - prover9 file needs extra parentheses'
 all x all y ((SC(x, y) <->  exists z (Cont(z, x) & Cont(z, y)) &  all z ((Cont(z, x) & Cont(z, y) -> LESS(z, x) & LESS(z, y))))).


%axioms from module codib//defs/p9/closed.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codib/defs/closed
% 'Defining when an entity is closed (closed manifold)'
% 'CL-D: closed'
 all x ((Closed(x) <->  all y (-(BCont(y, x))))).


%axioms from module codib//defs/p9/icont.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codib/defs/icont
% 'Defining interior containment'
% 'IC-D'
 all x all y ((ICont(x, y) <-> Cont(x, y) &  all z ((Cont(z, x) -> -(BCont(z, y)))))).


%axioms from module codib//defs/p9/tcont.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codib/defs/tcont
% 'Defining tangential containment'
% 'TC-D'
 all x all y ((TCont(x, y) <-> Cont(x, y) &  exists z (Cont(z, x) & BCont(z, y)))).


%axioms from module codi//defs/p9/epp.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/epp
%imports("codi/defs/ep").
% 'EPP-D: definition of proper parthood'
 all x all y ((PP(x, y) <-> P(x, y) & -((x = y)))).


%axioms from module codi//defs/p9/ep.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/ep
% 'basic axioms of traditional parthood (parthood of equidimensional entities) which is a non-strict partial order'
% 'parthood holds between two entities of the same spatial dimension'
% 'EP-D: definition of parthood'
 all x all y ((P(x, y) <-> Cont(x, y) & EqDim(x, y))).

end_of_list.

