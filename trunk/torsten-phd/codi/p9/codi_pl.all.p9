%axioms from module codi/p9/codi_pl.p9
%----------------------------------

% Automatically generated from CL/KIF
formulas(sos).
% Module codi/codi_pl
%imports("codi/codi").
% 'PL-D1: points'
 all x ((Pt(x) <-> Max(x) & MinDim(x))).
% 'PL-D1: lines'
 all x ((L(x) <-> Max(x) &  all y ((Pt(y) -> Covers(x, y))))).
% 'PL-A1'
 all x ((L(x) ->  exists y exists z (Pt(y) & Pt(z) & Cont(y, x) & Cont(z, x) & -((y = z))))).
% 'PL-E1'
 all x all y ((Max(x) & Max(y) & Inc(x, y) & LESS(x, y) -> Cont(x, y))).
% 'CD-E1'
 all x ((MinDim(x) ->  all y ((Cont(y, x) -> (x = y))))).


%axioms from module codi/p9/codi.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/codi
%imports("codi/codi_linear").
%imports("cont/cont_c").
%imports("codi/defs/ep").
%imports("codi/defs/epp").
%imports("codi/defs/po").
%imports("codi/defs/inc").
%imports("codi/defs/sc").
%imports("codi/defs/min_max_in_dim").


%axioms from module codi/p9/codi_linear.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/codi_linear
%imports("dim/dim_prime_linear").
%imports("cont/cont_c").
% 'relationship between dimension and containment'
% 'CD-A1: containment requires that the contained entity has a dimension that is lower or equal to the entity containing it'
 all x all y ((Cont(x, y) -> LESS(x, y) | EqDim(x, y))).


%axioms from module cont/p9/cont_c.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module cont/cont_c
%imports("cont/cont_basic").
% 'C-D: definition of contact in terms of containment'
 all x all y ((C(x, y) <->  exists z (Cont(z, x) & Cont(z, y)))).


%axioms from module codi//defs/p9/ep.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/ep
% 'basic axioms of traditional parthood (parthood of equidimensional entities) which is a non-strict partial order'
% 'parthood holds between two entities of the same spatial dimension'
% 'EP-D: definition of parthood'
 all x all y ((P(x, y) <-> Cont(x, y) & EqDim(x, y))).


%axioms from module codi//defs/p9/epp.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/epp
%imports("codi/defs/ep").
% 'EPP-D: definition of proper parthood'
 all x all y ((PP(x, y) <-> P(x, y) & -((x = y)))).


%axioms from module codi//defs/p9/po.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/po
%imports("codi/defs/ep").
% 'PO-D: partial overlap (strong contact)'
 all x all y ((PO(x, y) <->  exists z (P(z, x) & P(z, y)))).


%axioms from module codi//defs/p9/inc.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/inc
% 'basic axioms of incidence (two entities occupy some same space. It is reserved for entities of differing dimensions. It is a variant of contact.'
%imports("codi/defs/ep").
% 'Inc-D: incidence holds if and only if some entity of the dimension as the lower of the two incident entities is shared'
 all x all y ((Inc(x, y) <->  exists z (LESS(z, x) & Cont(z, x) & P(z, y)) |  exists z (LESS(z, y) & Cont(z, y) & P(z, x)))).


%axioms from module codi//defs/p9/sc.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/sc
% 'SC-D: superficial (weak) contact (contact is of a lesser dimension than either involved entity) - prover9 file needs extra parentheses'
 all x all y ((SC(x, y) <->  exists z (Cont(z, x) & Cont(z, y)) &  all z ((Cont(z, x) & Cont(z, y) -> LESS(z, x) & LESS(z, y))))).


%axioms from module codi//defs/p9/min_max_in_dim.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module codi/defs/min_max_in_dim
%imports("codi/defs/epp").
% 'definitional extension'
% 'ME-D1: defining maximal entities of a dimension'
 all x ((Max(x) <-> -(ZEX(x)) &  all y (-(PP(x, y))))).
% 'ME-D2: defining minimal entities of a dimension'
 all x ((Min(x) <-> -(ZEX(x)) &  all y (-(PP(y, x))))).


%axioms from module dim/p9/dim_prime_linear.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module dim/dim_prime_linear
% 'compact axioms for linear relative dimension with a lowest non-zero dimension'
%imports("dim/dim_prime_linear_unbounded").
% 'D-A6: a lowest dimension must exist'
 exists x (MinDim(x)).


%axioms from module cont/p9/cont_basic.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module cont/cont_basic
% 'basic axioms of containment (parthood irrespective of dimension) which is a non-strict partial order'
% 'a possibly existing zero extent ZEX is included'
% 'C-A1: reflexive'
 all x ((-(ZEX(x)) <-> Cont(x, x))).
% 'C-A2: antisymmetric'
 all x all y ((Cont(x, y) & Cont(y, x) -> (x = y))).
% 'C-A3: transitive'
 all x all y all z ((Cont(x, y) & Cont(y, z) -> Cont(x, z))).
% 'C-A4: ZEXs are not contained in anything and contain nothing'
 all x all y ((ZEX(x) -> -(Cont(y, x)) & -(Cont(x, y)))).
% 'The following hold no matter whether a ZEX exists or not (already included in the basic axiomatization of dimension)'
% 'D-A4: unique ZEX (previously Z-A2)'
 all x all y ((ZEX(x) & ZEX(y) -> (x = y))).


%axioms from module dim/p9/dim_prime_linear_unbounded.p9
%----------------------------------

% Automatically generated from CL/KIF
% Module dim/dim_prime_linear_unbounded
% 'compact axioms for linear relative dimension'
% 'D-A1: irreflexive'
 all x (-(LESS(x, x))).
% 'D-A2: asymmetric (antisymmetric & irreflexive)'
 all x all y ((LESS(x, y) -> -(LESS(y, x)))).
% 'D-A3: transitive (corrected from IJCAI version: need <= in the second condition to ensure that EqDim is transitive)'
 all x all y all z ((LESS(x, y) & LEQ(y, z) -> LESS(x, z))).
% 'D-A4: unique ZEX'
 all x all y ((ZEX(x) & ZEX(y) -> (x = y))).
% 'D-A5: ZEX has dimension lower than anything else'
 all x all y ((ZEX(x) & -(ZEX(y)) -> LESS(x, y))).
% 'D-D2: define EqDim in terms of <'
 all x all y ((EqDim(x, y) <-> -(LESS(x, y)) & -(LESS(y, x)))).
% 'D-D3: <='
 all x all y ((LEQ(x, y) <-> LESS(x, y) | EqDim(x, y))).
% 'D-D4: Maximal dimension (Codim=0)'
 all x ((MaxDim(x) <->  all y (LEQ(y, x)))).
% 'D-D5: Minimal dimension (Dim=0)'
 all x ((MinDim(x) <-> -(ZEX(x)) &  all y ((LESS(y, x) -> ZEX(y))))).
% 'D-D6: next highest dimension (covers), x covers y if x>y and no z s.t. x>z>y'
 all x all y ((Covers(x, y) <-> LESS(y, x) &  all z (-(LESS(y, z) & LESS(z, x))))).

end_of_list.

