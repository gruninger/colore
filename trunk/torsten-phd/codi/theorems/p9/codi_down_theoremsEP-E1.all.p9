%axioms from module codi/theorems/p9/codi_down_theoremsEP-E1.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module codi/theorems/codi_down_theoremsep-e1
%imports("codi/codi_down").
%imports("codi/theorems/codi_down_theoremst1-t2").
%imports("codi/theorems/codi_down_theoremst3-t5").
% 'ep-e1: weak supplementation - original'
 all x all y ((pp(x, y) ->  exists z (p(z, y) & -(po(z, x))))).

end_of_list.

%axioms from module codi/p9/codi_down.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module codi/codi_down
%imports("codi/codi_int").
% 'closure under differences'
% 'dif-a1: difference is of same dimension'
 all x all y ((-(zex(difference(x, y))) -> eqdim(x, difference(x, y)))).
% 'dif-a2: difference with a entity of lower dimension'
 all x all y ((less(y, x) -> (x = difference(x, y)))).
% 'dif-a3a: constitution of the difference with an entity of greater or equal dimension'
 all x all y all z ((leq(x, y) & cont(z, x) & less(intersection(z, y), z) -> cont(z, difference(x, y)))).
% 'dif-a3b: constitution of the difference with an entity of greater or equal dimension'
 all x all y all z ((leq(x, y) & cont(z, difference(x, y)) -> cont(z, x))).
% 'dif-a3c: constitution of the difference with an entity of greater or equal dimension'
 all x all y all z ((leq(x, y) & p(z, difference(x, y)) -> less(intersection(z, y), z))).
% 'dif-a4: zero difference only for contained entities or for zero entity'
 all x all y ((zex(difference(x, y)) <-> zex(x) | cont(x, y))).

end_of_list.

%axioms from module codi/theorems/p9/codi_down_theoremsT1-T2.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module codi/theorems/codi_down_theoremst1-t2
%imports("codi/codi_down").
% 'dif-t1'
 all x all y ((-(zex(difference(x, y))) -> p(difference(x, y), x))).
% 'dif-t2 - easier'
 all x all y ((pp(y, x) & -(zex(difference(x, y))) & p(difference(x, y), x) -> pp(difference(x, y), x))).
% 'dif-t2 - full'
 all x all y ((pp(y, x) -> pp(difference(x, y), x))).

end_of_list.

%axioms from module codi/theorems/p9/codi_down_theoremsT3-T5.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module codi/theorems/codi_down_theoremst3-t5
%imports("codi/codi_down").
%imports("codi/theorems/codi_down_theoremst1-t2").
% 'dif-t3'
 all x all y ((-(zex(y)) & -(zex(difference(x, y))) -> -(po(y, difference(x, y))))).
% 'dif-t4'
 all x all y (-(po(intersection(x, y), difference(x, y)))).
% 'dif-t5a'
 all x all y all z ((p(z, difference(x, y)) -> p(z, x))).
% 'dif-t5b'
 all x all y all z ((p(z, difference(x, y)) -> -(po(z, intersection(x, y))))).
% 'dif-t5c'
 all x all y all z ((p(z, x) & -(po(z, intersection(x, y))) -> p(z, difference(x, y)))).

end_of_list.

%axioms from module codi/p9/codi_int.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module codi/codi_int
%imports("codi/codi_linear").
%imports("zex/zex").
% 'int-a1: disconnected entities have empty intersection'
 all x all y ((-(c(x, y)) -> zex(intersection(x, y)))).
% 'int-a2: the intersection is contained in the intersecting entities (also ensures the intersection is of no greater dimension than necessary)'
 all x all y ((-(zex(intersection(x, y))) -> cont(intersection(x, y), x))).
% 'int-a3: the intersection is of greatest possible dimension (determines the dimension of the intersection)'
 all x all y all z ((cont(z, x) & cont(z, y) -> leq(z, intersection(x, y)))).
% 'int-a4: the intersection contains everything of the greatest possible dimension (and whatever those things contain)'
 all x all y all z ((cont(z, x) & cont(z, y) & eqdim(z, intersection(x, y)) <-> p(z, intersection(x, y)))).

end_of_list.

%axioms from module codi/p9/codi_linear.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module codi/codi
%imports("dim/dim_prime_linear").
%imports("cont/cont_c_ext").
%imports("codi/defs/ep").
%imports("codi/defs/epp").
%imports("codi/defs/po").
%imports("codi/defs/inc").
%imports("codi/defs/sc").
%imports("codi/defs/min_max_in_dim").
% 'cd-a1: containment requires that the contained entity has a dimension that is lower or equal to the entity containing it'
 all x all y ((cont(x, y) -> leq(x, y))).

end_of_list.

%axioms from module zex/p9/zex.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module dim/zex
% 'forces a special null region (zex)'
% 'z-a1: there exists a zex'
 exists x (zex(x)).

end_of_list.

%axioms from module dim/p9/dim_prime_linear.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module dim/dim_prime_linear
% 'compact axioms for linear relative dimension'
% 'd-a1: irreflexive'
 all x (-(less(x, x))).
% 'd-a2: asymmetric (antisymmetric & irreflexive)'
 all x all y ((less(x, y) -> -(less(y, x)))).
% 'd-a3: transitive (corrected from ijcai version: need <= in the second condition to ensure that eqdim is transitive)'
 all x all y all z ((less(x, y) & leq(y, z) -> less(x, z))).
% 'd-a4: unique zex'
 all x all y ((zex(x) & zex(y) -> (x = y))).
% 'd-a5: zex has dimension lower than anything else'
 all x all y ((zex(x) & -(zex(y)) -> less(x, y))).
% 'd-a6: a lowest dimension must exist'
 exists x (mindim(x)).
% 'd-d2: define eqdim in terms of <'
 all x all y ((eqdim(x, y) <-> -(less(x, y)) & -(less(y, x)))).
% 'd-d3: <='
 all x all y ((leq(x, y) <-> less(x, y) | eqdim(x, y))).
% 'd-d4: maximal dimension (codim=0)'
 all x ((maxdim(x) <->  all y (leq(y, x)))).
% 'd-d5: minimal dimension (dim=0)'
 all x ((mindim(x) <-> -(zex(x)) &  all y ((less(y, x) -> zex(y))))).
% 'd-d6: next highest dimension (covers), x covers y if x>y and no z s.t. x>z>y'
 all x all y ((covers(x, y) <-> less(y, x) &  all z (-(less(y, z) & less(z, x))))).

end_of_list.

%axioms from module cont/p9/cont_c_ext.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module cont/cont_c-ext
%imports("cont/cont_c").
%imports("cont/cont_ext").

end_of_list.

%axioms from module codi/defs/p9/ep.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module codi/defs/ep
% 'basic axioms of traditional parthood (parthood of equidimensional entities) which is a non-strict partial order'
% 'parthood holds between two entities of the same spatial dimension'
% 'ep-d: definition of parthood'
 all x all y ((p(x, y) <-> cont(x, y) & eqdim(x, y))).

end_of_list.

%axioms from module codi/defs/p9/epp.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module codi/defs/epp
%imports("codi/defs/ep").
% 'epp-d: definition of proper parthood'
 all x all y ((pp(x, y) <-> p(x, y) & -((x = y)))).

end_of_list.

%axioms from module codi/defs/p9/po.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module codi/defs/po
%imports("codi/defs/ep").
% 'po-d: partial overlap (strong contact)'
 all x all y ((po(x, y) <->  exists z (p(z, x) & p(z, y)))).

end_of_list.

%axioms from module codi/defs/p9/inc.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module codi/defs/inc
% 'basic axioms of incidence (two entities occupy some same space. it is reserved for entities of differing dimensions. it is a variant of contact.'
%imports("codi/defs/ep").
% 'inc-d: incidence holds if and only if some entity of the dimension as the lower of the two incident entities is shared'
 all x all y ((inc(x, y) <->  exists z (less(z, x) & cont(z, x) & p(z, y)) |  exists z (less(z, y) & cont(z, y) & p(z, x)))).

end_of_list.

%axioms from module codi/defs/p9/sc.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module codi/defs/sc
% 'sc-d: superficial (weak) contact (contact is of a lesser dimension than either involved entity) - prover9 file needs extra parentheses'
 all x all y ((sc(x, y) <->  exists z (cont(z, x) & cont(z, y)) &  all z ((cont(z, x) & cont(z, y) -> less(z, x) & less(z, y))))).

end_of_list.

%axioms from module codi/defs/p9/min_max_in_dim.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module codi/defs/min_max_in_dim
%imports("codi/defs/epp").
% 'definitional extension'
% 'me-d1: defining maximal entities of a dimension'
 all x ((max(x) <-> -(zex(x)) &  all y (-(pp(x, y))))).
% 'me-d2: defining minimal entities of a dimension'
 all x ((min(x) <-> -(zex(x)) &  all y (-(pp(y, x))))).

end_of_list.

%axioms from module cont/p9/cont_c.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module cont/cont_c
%imports("cont/cont_basic").
% 'c-d: definition of contact in terms of containment'
 all x all y ((c(x, y) <->  exists z (cont(z, x) & cont(z, y)))).


end_of_list.

%axioms from module cont/p9/cont_ext.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module cont/cont_ext
%imports("cont/cont_basic").
% 'c-e1: cont is extensional'
 all x all y (( all z ((cont(z, x) <-> cont(z, y))) -> (x = y))).

end_of_list.

%axioms from module cont/p9/cont_basic.p9
%----------------------------------

% automatically generated from cl/kif
formulas(sos).
% module cont/cont_basic
% 'basic axioms of containment (parthood irrespective of dimension) which is a non-strict partial order'
% 'a possibly existing zero extent zex is included'
% 'c-a1: reflexive'
 all x ((-(zex(x)) <-> cont(x, x))).
% 'c-a2: antisymmetric'
 all x all y ((cont(x, y) & cont(y, x) -> (x = y))).
% 'c-a3: transitive'
 all x all y all z ((cont(x, y) & cont(y, z) -> cont(x, z))).
% 'c-a4: zexs are not contained in anything and contain nothing'
 all x all y ((zex(x) -> -(cont(y, x)) & -(cont(x, y)))).

end_of_list.

